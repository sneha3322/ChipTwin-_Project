
STM32F407_BMP280_I2C1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063c4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b4  08006558  08006558  00007558  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800690c  0800690c  00008204  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800690c  0800690c  0000790c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006914  08006914  00008204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006914  08006914  00007914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006918  08006918  00007918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000204  20000000  0800691c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008204  2**0
                  CONTENTS
 10 .bss          000001c4  20000204  20000204  00008204  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003c8  200003c8  00008204  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000761e  00000000  00000000  00008234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001545  00000000  00000000  0000f852  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007b0  00000000  00000000  00010d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005d9  00000000  00000000  00011548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020dc6  00000000  00000000  00011b21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009bfd  00000000  00000000  000328e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c49b4  00000000  00000000  0003c4e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00100e98  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002ff8  00000000  00000000  00100edc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  00103ed4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000204 	.word	0x20000204
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800653c 	.word	0x0800653c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000208 	.word	0x20000208
 80001cc:	0800653c 	.word	0x0800653c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_frsub>:
 8000ba8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bac:	e002      	b.n	8000bb4 <__addsf3>
 8000bae:	bf00      	nop

08000bb0 <__aeabi_fsub>:
 8000bb0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bb4 <__addsf3>:
 8000bb4:	0042      	lsls	r2, r0, #1
 8000bb6:	bf1f      	itttt	ne
 8000bb8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bbc:	ea92 0f03 	teqne	r2, r3
 8000bc0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bc4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc8:	d06a      	beq.n	8000ca0 <__addsf3+0xec>
 8000bca:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bce:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bd2:	bfc1      	itttt	gt
 8000bd4:	18d2      	addgt	r2, r2, r3
 8000bd6:	4041      	eorgt	r1, r0
 8000bd8:	4048      	eorgt	r0, r1
 8000bda:	4041      	eorgt	r1, r0
 8000bdc:	bfb8      	it	lt
 8000bde:	425b      	neglt	r3, r3
 8000be0:	2b19      	cmp	r3, #25
 8000be2:	bf88      	it	hi
 8000be4:	4770      	bxhi	lr
 8000be6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000bea:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bee:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bfa:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bfe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c02:	bf18      	it	ne
 8000c04:	4249      	negne	r1, r1
 8000c06:	ea92 0f03 	teq	r2, r3
 8000c0a:	d03f      	beq.n	8000c8c <__addsf3+0xd8>
 8000c0c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c10:	fa41 fc03 	asr.w	ip, r1, r3
 8000c14:	eb10 000c 	adds.w	r0, r0, ip
 8000c18:	f1c3 0320 	rsb	r3, r3, #32
 8000c1c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c20:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c24:	d502      	bpl.n	8000c2c <__addsf3+0x78>
 8000c26:	4249      	negs	r1, r1
 8000c28:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c2c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c30:	d313      	bcc.n	8000c5a <__addsf3+0xa6>
 8000c32:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c36:	d306      	bcc.n	8000c46 <__addsf3+0x92>
 8000c38:	0840      	lsrs	r0, r0, #1
 8000c3a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c3e:	f102 0201 	add.w	r2, r2, #1
 8000c42:	2afe      	cmp	r2, #254	@ 0xfe
 8000c44:	d251      	bcs.n	8000cea <__addsf3+0x136>
 8000c46:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c4a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c4e:	bf08      	it	eq
 8000c50:	f020 0001 	biceq.w	r0, r0, #1
 8000c54:	ea40 0003 	orr.w	r0, r0, r3
 8000c58:	4770      	bx	lr
 8000c5a:	0049      	lsls	r1, r1, #1
 8000c5c:	eb40 0000 	adc.w	r0, r0, r0
 8000c60:	3a01      	subs	r2, #1
 8000c62:	bf28      	it	cs
 8000c64:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c68:	d2ed      	bcs.n	8000c46 <__addsf3+0x92>
 8000c6a:	fab0 fc80 	clz	ip, r0
 8000c6e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c72:	ebb2 020c 	subs.w	r2, r2, ip
 8000c76:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c7a:	bfaa      	itet	ge
 8000c7c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c80:	4252      	neglt	r2, r2
 8000c82:	4318      	orrge	r0, r3
 8000c84:	bfbc      	itt	lt
 8000c86:	40d0      	lsrlt	r0, r2
 8000c88:	4318      	orrlt	r0, r3
 8000c8a:	4770      	bx	lr
 8000c8c:	f092 0f00 	teq	r2, #0
 8000c90:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c94:	bf06      	itte	eq
 8000c96:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c9a:	3201      	addeq	r2, #1
 8000c9c:	3b01      	subne	r3, #1
 8000c9e:	e7b5      	b.n	8000c0c <__addsf3+0x58>
 8000ca0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ca4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca8:	bf18      	it	ne
 8000caa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cae:	d021      	beq.n	8000cf4 <__addsf3+0x140>
 8000cb0:	ea92 0f03 	teq	r2, r3
 8000cb4:	d004      	beq.n	8000cc0 <__addsf3+0x10c>
 8000cb6:	f092 0f00 	teq	r2, #0
 8000cba:	bf08      	it	eq
 8000cbc:	4608      	moveq	r0, r1
 8000cbe:	4770      	bx	lr
 8000cc0:	ea90 0f01 	teq	r0, r1
 8000cc4:	bf1c      	itt	ne
 8000cc6:	2000      	movne	r0, #0
 8000cc8:	4770      	bxne	lr
 8000cca:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cce:	d104      	bne.n	8000cda <__addsf3+0x126>
 8000cd0:	0040      	lsls	r0, r0, #1
 8000cd2:	bf28      	it	cs
 8000cd4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000cd8:	4770      	bx	lr
 8000cda:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cde:	bf3c      	itt	cc
 8000ce0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ce4:	4770      	bxcc	lr
 8000ce6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cea:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cee:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cf2:	4770      	bx	lr
 8000cf4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf8:	bf16      	itet	ne
 8000cfa:	4608      	movne	r0, r1
 8000cfc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d00:	4601      	movne	r1, r0
 8000d02:	0242      	lsls	r2, r0, #9
 8000d04:	bf06      	itte	eq
 8000d06:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d0a:	ea90 0f01 	teqeq	r0, r1
 8000d0e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d12:	4770      	bx	lr

08000d14 <__aeabi_ui2f>:
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e004      	b.n	8000d24 <__aeabi_i2f+0x8>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_i2f>:
 8000d1c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d20:	bf48      	it	mi
 8000d22:	4240      	negmi	r0, r0
 8000d24:	ea5f 0c00 	movs.w	ip, r0
 8000d28:	bf08      	it	eq
 8000d2a:	4770      	bxeq	lr
 8000d2c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d30:	4601      	mov	r1, r0
 8000d32:	f04f 0000 	mov.w	r0, #0
 8000d36:	e01c      	b.n	8000d72 <__aeabi_l2f+0x2a>

08000d38 <__aeabi_ul2f>:
 8000d38:	ea50 0201 	orrs.w	r2, r0, r1
 8000d3c:	bf08      	it	eq
 8000d3e:	4770      	bxeq	lr
 8000d40:	f04f 0300 	mov.w	r3, #0
 8000d44:	e00a      	b.n	8000d5c <__aeabi_l2f+0x14>
 8000d46:	bf00      	nop

08000d48 <__aeabi_l2f>:
 8000d48:	ea50 0201 	orrs.w	r2, r0, r1
 8000d4c:	bf08      	it	eq
 8000d4e:	4770      	bxeq	lr
 8000d50:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d54:	d502      	bpl.n	8000d5c <__aeabi_l2f+0x14>
 8000d56:	4240      	negs	r0, r0
 8000d58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d5c:	ea5f 0c01 	movs.w	ip, r1
 8000d60:	bf02      	ittt	eq
 8000d62:	4684      	moveq	ip, r0
 8000d64:	4601      	moveq	r1, r0
 8000d66:	2000      	moveq	r0, #0
 8000d68:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d6c:	bf08      	it	eq
 8000d6e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d72:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d76:	fabc f28c 	clz	r2, ip
 8000d7a:	3a08      	subs	r2, #8
 8000d7c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d80:	db10      	blt.n	8000da4 <__aeabi_l2f+0x5c>
 8000d82:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d86:	4463      	add	r3, ip
 8000d88:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d8c:	f1c2 0220 	rsb	r2, r2, #32
 8000d90:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d94:	fa20 f202 	lsr.w	r2, r0, r2
 8000d98:	eb43 0002 	adc.w	r0, r3, r2
 8000d9c:	bf08      	it	eq
 8000d9e:	f020 0001 	biceq.w	r0, r0, #1
 8000da2:	4770      	bx	lr
 8000da4:	f102 0220 	add.w	r2, r2, #32
 8000da8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dac:	f1c2 0220 	rsb	r2, r2, #32
 8000db0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000db4:	fa21 f202 	lsr.w	r2, r1, r2
 8000db8:	eb43 0002 	adc.w	r0, r3, r2
 8000dbc:	bf08      	it	eq
 8000dbe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dc2:	4770      	bx	lr

08000dc4 <__aeabi_ldivmod>:
 8000dc4:	b97b      	cbnz	r3, 8000de6 <__aeabi_ldivmod+0x22>
 8000dc6:	b972      	cbnz	r2, 8000de6 <__aeabi_ldivmod+0x22>
 8000dc8:	2900      	cmp	r1, #0
 8000dca:	bfbe      	ittt	lt
 8000dcc:	2000      	movlt	r0, #0
 8000dce:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000dd2:	e006      	blt.n	8000de2 <__aeabi_ldivmod+0x1e>
 8000dd4:	bf08      	it	eq
 8000dd6:	2800      	cmpeq	r0, #0
 8000dd8:	bf1c      	itt	ne
 8000dda:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000dde:	f04f 30ff 	movne.w	r0, #4294967295
 8000de2:	f000 b9d3 	b.w	800118c <__aeabi_idiv0>
 8000de6:	f1ad 0c08 	sub.w	ip, sp, #8
 8000dea:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000dee:	2900      	cmp	r1, #0
 8000df0:	db09      	blt.n	8000e06 <__aeabi_ldivmod+0x42>
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	db1a      	blt.n	8000e2c <__aeabi_ldivmod+0x68>
 8000df6:	f000 f84d 	bl	8000e94 <__udivmoddi4>
 8000dfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e02:	b004      	add	sp, #16
 8000e04:	4770      	bx	lr
 8000e06:	4240      	negs	r0, r0
 8000e08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	db1b      	blt.n	8000e48 <__aeabi_ldivmod+0x84>
 8000e10:	f000 f840 	bl	8000e94 <__udivmoddi4>
 8000e14:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e1c:	b004      	add	sp, #16
 8000e1e:	4240      	negs	r0, r0
 8000e20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e24:	4252      	negs	r2, r2
 8000e26:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e2a:	4770      	bx	lr
 8000e2c:	4252      	negs	r2, r2
 8000e2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e32:	f000 f82f 	bl	8000e94 <__udivmoddi4>
 8000e36:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e3e:	b004      	add	sp, #16
 8000e40:	4240      	negs	r0, r0
 8000e42:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e46:	4770      	bx	lr
 8000e48:	4252      	negs	r2, r2
 8000e4a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e4e:	f000 f821 	bl	8000e94 <__udivmoddi4>
 8000e52:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e5a:	b004      	add	sp, #16
 8000e5c:	4252      	negs	r2, r2
 8000e5e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e62:	4770      	bx	lr

08000e64 <__aeabi_uldivmod>:
 8000e64:	b953      	cbnz	r3, 8000e7c <__aeabi_uldivmod+0x18>
 8000e66:	b94a      	cbnz	r2, 8000e7c <__aeabi_uldivmod+0x18>
 8000e68:	2900      	cmp	r1, #0
 8000e6a:	bf08      	it	eq
 8000e6c:	2800      	cmpeq	r0, #0
 8000e6e:	bf1c      	itt	ne
 8000e70:	f04f 31ff 	movne.w	r1, #4294967295
 8000e74:	f04f 30ff 	movne.w	r0, #4294967295
 8000e78:	f000 b988 	b.w	800118c <__aeabi_idiv0>
 8000e7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e84:	f000 f806 	bl	8000e94 <__udivmoddi4>
 8000e88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e90:	b004      	add	sp, #16
 8000e92:	4770      	bx	lr

08000e94 <__udivmoddi4>:
 8000e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e98:	9d08      	ldr	r5, [sp, #32]
 8000e9a:	468e      	mov	lr, r1
 8000e9c:	4604      	mov	r4, r0
 8000e9e:	4688      	mov	r8, r1
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d14a      	bne.n	8000f3a <__udivmoddi4+0xa6>
 8000ea4:	428a      	cmp	r2, r1
 8000ea6:	4617      	mov	r7, r2
 8000ea8:	d962      	bls.n	8000f70 <__udivmoddi4+0xdc>
 8000eaa:	fab2 f682 	clz	r6, r2
 8000eae:	b14e      	cbz	r6, 8000ec4 <__udivmoddi4+0x30>
 8000eb0:	f1c6 0320 	rsb	r3, r6, #32
 8000eb4:	fa01 f806 	lsl.w	r8, r1, r6
 8000eb8:	fa20 f303 	lsr.w	r3, r0, r3
 8000ebc:	40b7      	lsls	r7, r6
 8000ebe:	ea43 0808 	orr.w	r8, r3, r8
 8000ec2:	40b4      	lsls	r4, r6
 8000ec4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ec8:	fa1f fc87 	uxth.w	ip, r7
 8000ecc:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ed0:	0c23      	lsrs	r3, r4, #16
 8000ed2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000ed6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000eda:	fb01 f20c 	mul.w	r2, r1, ip
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d909      	bls.n	8000ef6 <__udivmoddi4+0x62>
 8000ee2:	18fb      	adds	r3, r7, r3
 8000ee4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ee8:	f080 80ea 	bcs.w	80010c0 <__udivmoddi4+0x22c>
 8000eec:	429a      	cmp	r2, r3
 8000eee:	f240 80e7 	bls.w	80010c0 <__udivmoddi4+0x22c>
 8000ef2:	3902      	subs	r1, #2
 8000ef4:	443b      	add	r3, r7
 8000ef6:	1a9a      	subs	r2, r3, r2
 8000ef8:	b2a3      	uxth	r3, r4
 8000efa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000efe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000f02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000f06:	fb00 fc0c 	mul.w	ip, r0, ip
 8000f0a:	459c      	cmp	ip, r3
 8000f0c:	d909      	bls.n	8000f22 <__udivmoddi4+0x8e>
 8000f0e:	18fb      	adds	r3, r7, r3
 8000f10:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f14:	f080 80d6 	bcs.w	80010c4 <__udivmoddi4+0x230>
 8000f18:	459c      	cmp	ip, r3
 8000f1a:	f240 80d3 	bls.w	80010c4 <__udivmoddi4+0x230>
 8000f1e:	443b      	add	r3, r7
 8000f20:	3802      	subs	r0, #2
 8000f22:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000f26:	eba3 030c 	sub.w	r3, r3, ip
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	b11d      	cbz	r5, 8000f36 <__udivmoddi4+0xa2>
 8000f2e:	40f3      	lsrs	r3, r6
 8000f30:	2200      	movs	r2, #0
 8000f32:	e9c5 3200 	strd	r3, r2, [r5]
 8000f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d905      	bls.n	8000f4a <__udivmoddi4+0xb6>
 8000f3e:	b10d      	cbz	r5, 8000f44 <__udivmoddi4+0xb0>
 8000f40:	e9c5 0100 	strd	r0, r1, [r5]
 8000f44:	2100      	movs	r1, #0
 8000f46:	4608      	mov	r0, r1
 8000f48:	e7f5      	b.n	8000f36 <__udivmoddi4+0xa2>
 8000f4a:	fab3 f183 	clz	r1, r3
 8000f4e:	2900      	cmp	r1, #0
 8000f50:	d146      	bne.n	8000fe0 <__udivmoddi4+0x14c>
 8000f52:	4573      	cmp	r3, lr
 8000f54:	d302      	bcc.n	8000f5c <__udivmoddi4+0xc8>
 8000f56:	4282      	cmp	r2, r0
 8000f58:	f200 8105 	bhi.w	8001166 <__udivmoddi4+0x2d2>
 8000f5c:	1a84      	subs	r4, r0, r2
 8000f5e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000f62:	2001      	movs	r0, #1
 8000f64:	4690      	mov	r8, r2
 8000f66:	2d00      	cmp	r5, #0
 8000f68:	d0e5      	beq.n	8000f36 <__udivmoddi4+0xa2>
 8000f6a:	e9c5 4800 	strd	r4, r8, [r5]
 8000f6e:	e7e2      	b.n	8000f36 <__udivmoddi4+0xa2>
 8000f70:	2a00      	cmp	r2, #0
 8000f72:	f000 8090 	beq.w	8001096 <__udivmoddi4+0x202>
 8000f76:	fab2 f682 	clz	r6, r2
 8000f7a:	2e00      	cmp	r6, #0
 8000f7c:	f040 80a4 	bne.w	80010c8 <__udivmoddi4+0x234>
 8000f80:	1a8a      	subs	r2, r1, r2
 8000f82:	0c03      	lsrs	r3, r0, #16
 8000f84:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f88:	b280      	uxth	r0, r0
 8000f8a:	b2bc      	uxth	r4, r7
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000f92:	fb0e 221c 	mls	r2, lr, ip, r2
 8000f96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000f9a:	fb04 f20c 	mul.w	r2, r4, ip
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	d907      	bls.n	8000fb2 <__udivmoddi4+0x11e>
 8000fa2:	18fb      	adds	r3, r7, r3
 8000fa4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000fa8:	d202      	bcs.n	8000fb0 <__udivmoddi4+0x11c>
 8000faa:	429a      	cmp	r2, r3
 8000fac:	f200 80e0 	bhi.w	8001170 <__udivmoddi4+0x2dc>
 8000fb0:	46c4      	mov	ip, r8
 8000fb2:	1a9b      	subs	r3, r3, r2
 8000fb4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000fb8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000fbc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000fc0:	fb02 f404 	mul.w	r4, r2, r4
 8000fc4:	429c      	cmp	r4, r3
 8000fc6:	d907      	bls.n	8000fd8 <__udivmoddi4+0x144>
 8000fc8:	18fb      	adds	r3, r7, r3
 8000fca:	f102 30ff 	add.w	r0, r2, #4294967295
 8000fce:	d202      	bcs.n	8000fd6 <__udivmoddi4+0x142>
 8000fd0:	429c      	cmp	r4, r3
 8000fd2:	f200 80ca 	bhi.w	800116a <__udivmoddi4+0x2d6>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	1b1b      	subs	r3, r3, r4
 8000fda:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000fde:	e7a5      	b.n	8000f2c <__udivmoddi4+0x98>
 8000fe0:	f1c1 0620 	rsb	r6, r1, #32
 8000fe4:	408b      	lsls	r3, r1
 8000fe6:	fa22 f706 	lsr.w	r7, r2, r6
 8000fea:	431f      	orrs	r7, r3
 8000fec:	fa0e f401 	lsl.w	r4, lr, r1
 8000ff0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ff4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ff8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ffc:	4323      	orrs	r3, r4
 8000ffe:	fa00 f801 	lsl.w	r8, r0, r1
 8001002:	fa1f fc87 	uxth.w	ip, r7
 8001006:	fbbe f0f9 	udiv	r0, lr, r9
 800100a:	0c1c      	lsrs	r4, r3, #16
 800100c:	fb09 ee10 	mls	lr, r9, r0, lr
 8001010:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8001014:	fb00 fe0c 	mul.w	lr, r0, ip
 8001018:	45a6      	cmp	lr, r4
 800101a:	fa02 f201 	lsl.w	r2, r2, r1
 800101e:	d909      	bls.n	8001034 <__udivmoddi4+0x1a0>
 8001020:	193c      	adds	r4, r7, r4
 8001022:	f100 3aff 	add.w	sl, r0, #4294967295
 8001026:	f080 809c 	bcs.w	8001162 <__udivmoddi4+0x2ce>
 800102a:	45a6      	cmp	lr, r4
 800102c:	f240 8099 	bls.w	8001162 <__udivmoddi4+0x2ce>
 8001030:	3802      	subs	r0, #2
 8001032:	443c      	add	r4, r7
 8001034:	eba4 040e 	sub.w	r4, r4, lr
 8001038:	fa1f fe83 	uxth.w	lr, r3
 800103c:	fbb4 f3f9 	udiv	r3, r4, r9
 8001040:	fb09 4413 	mls	r4, r9, r3, r4
 8001044:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8001048:	fb03 fc0c 	mul.w	ip, r3, ip
 800104c:	45a4      	cmp	ip, r4
 800104e:	d908      	bls.n	8001062 <__udivmoddi4+0x1ce>
 8001050:	193c      	adds	r4, r7, r4
 8001052:	f103 3eff 	add.w	lr, r3, #4294967295
 8001056:	f080 8082 	bcs.w	800115e <__udivmoddi4+0x2ca>
 800105a:	45a4      	cmp	ip, r4
 800105c:	d97f      	bls.n	800115e <__udivmoddi4+0x2ca>
 800105e:	3b02      	subs	r3, #2
 8001060:	443c      	add	r4, r7
 8001062:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001066:	eba4 040c 	sub.w	r4, r4, ip
 800106a:	fba0 ec02 	umull	lr, ip, r0, r2
 800106e:	4564      	cmp	r4, ip
 8001070:	4673      	mov	r3, lr
 8001072:	46e1      	mov	r9, ip
 8001074:	d362      	bcc.n	800113c <__udivmoddi4+0x2a8>
 8001076:	d05f      	beq.n	8001138 <__udivmoddi4+0x2a4>
 8001078:	b15d      	cbz	r5, 8001092 <__udivmoddi4+0x1fe>
 800107a:	ebb8 0203 	subs.w	r2, r8, r3
 800107e:	eb64 0409 	sbc.w	r4, r4, r9
 8001082:	fa04 f606 	lsl.w	r6, r4, r6
 8001086:	fa22 f301 	lsr.w	r3, r2, r1
 800108a:	431e      	orrs	r6, r3
 800108c:	40cc      	lsrs	r4, r1
 800108e:	e9c5 6400 	strd	r6, r4, [r5]
 8001092:	2100      	movs	r1, #0
 8001094:	e74f      	b.n	8000f36 <__udivmoddi4+0xa2>
 8001096:	fbb1 fcf2 	udiv	ip, r1, r2
 800109a:	0c01      	lsrs	r1, r0, #16
 800109c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80010a0:	b280      	uxth	r0, r0
 80010a2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80010a6:	463b      	mov	r3, r7
 80010a8:	4638      	mov	r0, r7
 80010aa:	463c      	mov	r4, r7
 80010ac:	46b8      	mov	r8, r7
 80010ae:	46be      	mov	lr, r7
 80010b0:	2620      	movs	r6, #32
 80010b2:	fbb1 f1f7 	udiv	r1, r1, r7
 80010b6:	eba2 0208 	sub.w	r2, r2, r8
 80010ba:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80010be:	e766      	b.n	8000f8e <__udivmoddi4+0xfa>
 80010c0:	4601      	mov	r1, r0
 80010c2:	e718      	b.n	8000ef6 <__udivmoddi4+0x62>
 80010c4:	4610      	mov	r0, r2
 80010c6:	e72c      	b.n	8000f22 <__udivmoddi4+0x8e>
 80010c8:	f1c6 0220 	rsb	r2, r6, #32
 80010cc:	fa2e f302 	lsr.w	r3, lr, r2
 80010d0:	40b7      	lsls	r7, r6
 80010d2:	40b1      	lsls	r1, r6
 80010d4:	fa20 f202 	lsr.w	r2, r0, r2
 80010d8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80010dc:	430a      	orrs	r2, r1
 80010de:	fbb3 f8fe 	udiv	r8, r3, lr
 80010e2:	b2bc      	uxth	r4, r7
 80010e4:	fb0e 3318 	mls	r3, lr, r8, r3
 80010e8:	0c11      	lsrs	r1, r2, #16
 80010ea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80010ee:	fb08 f904 	mul.w	r9, r8, r4
 80010f2:	40b0      	lsls	r0, r6
 80010f4:	4589      	cmp	r9, r1
 80010f6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80010fa:	b280      	uxth	r0, r0
 80010fc:	d93e      	bls.n	800117c <__udivmoddi4+0x2e8>
 80010fe:	1879      	adds	r1, r7, r1
 8001100:	f108 3cff 	add.w	ip, r8, #4294967295
 8001104:	d201      	bcs.n	800110a <__udivmoddi4+0x276>
 8001106:	4589      	cmp	r9, r1
 8001108:	d81f      	bhi.n	800114a <__udivmoddi4+0x2b6>
 800110a:	eba1 0109 	sub.w	r1, r1, r9
 800110e:	fbb1 f9fe 	udiv	r9, r1, lr
 8001112:	fb09 f804 	mul.w	r8, r9, r4
 8001116:	fb0e 1119 	mls	r1, lr, r9, r1
 800111a:	b292      	uxth	r2, r2
 800111c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001120:	4542      	cmp	r2, r8
 8001122:	d229      	bcs.n	8001178 <__udivmoddi4+0x2e4>
 8001124:	18ba      	adds	r2, r7, r2
 8001126:	f109 31ff 	add.w	r1, r9, #4294967295
 800112a:	d2c4      	bcs.n	80010b6 <__udivmoddi4+0x222>
 800112c:	4542      	cmp	r2, r8
 800112e:	d2c2      	bcs.n	80010b6 <__udivmoddi4+0x222>
 8001130:	f1a9 0102 	sub.w	r1, r9, #2
 8001134:	443a      	add	r2, r7
 8001136:	e7be      	b.n	80010b6 <__udivmoddi4+0x222>
 8001138:	45f0      	cmp	r8, lr
 800113a:	d29d      	bcs.n	8001078 <__udivmoddi4+0x1e4>
 800113c:	ebbe 0302 	subs.w	r3, lr, r2
 8001140:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001144:	3801      	subs	r0, #1
 8001146:	46e1      	mov	r9, ip
 8001148:	e796      	b.n	8001078 <__udivmoddi4+0x1e4>
 800114a:	eba7 0909 	sub.w	r9, r7, r9
 800114e:	4449      	add	r1, r9
 8001150:	f1a8 0c02 	sub.w	ip, r8, #2
 8001154:	fbb1 f9fe 	udiv	r9, r1, lr
 8001158:	fb09 f804 	mul.w	r8, r9, r4
 800115c:	e7db      	b.n	8001116 <__udivmoddi4+0x282>
 800115e:	4673      	mov	r3, lr
 8001160:	e77f      	b.n	8001062 <__udivmoddi4+0x1ce>
 8001162:	4650      	mov	r0, sl
 8001164:	e766      	b.n	8001034 <__udivmoddi4+0x1a0>
 8001166:	4608      	mov	r0, r1
 8001168:	e6fd      	b.n	8000f66 <__udivmoddi4+0xd2>
 800116a:	443b      	add	r3, r7
 800116c:	3a02      	subs	r2, #2
 800116e:	e733      	b.n	8000fd8 <__udivmoddi4+0x144>
 8001170:	f1ac 0c02 	sub.w	ip, ip, #2
 8001174:	443b      	add	r3, r7
 8001176:	e71c      	b.n	8000fb2 <__udivmoddi4+0x11e>
 8001178:	4649      	mov	r1, r9
 800117a:	e79c      	b.n	80010b6 <__udivmoddi4+0x222>
 800117c:	eba1 0109 	sub.w	r1, r1, r9
 8001180:	46c4      	mov	ip, r8
 8001182:	fbb1 f9fe 	udiv	r9, r1, lr
 8001186:	fb09 f804 	mul.w	r8, r9, r4
 800118a:	e7c4      	b.n	8001116 <__udivmoddi4+0x282>

0800118c <__aeabi_idiv0>:
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop

08001190 <bmp280_read_reg>:
int32_t dig_P7 = 15500;
int32_t dig_P8 = -14600;
int32_t dig_P9 = 6000;

// Function to read a BMP280 register
uint8_t bmp280_read_reg(uint8_t reg) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af02      	add	r7, sp, #8
 8001196:	4603      	mov	r3, r0
 8001198:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, &reg, 1, HAL_MAX_DELAY);
 800119a:	1dfa      	adds	r2, r7, #7
 800119c:	f04f 33ff 	mov.w	r3, #4294967295
 80011a0:	9300      	str	r3, [sp, #0]
 80011a2:	2301      	movs	r3, #1
 80011a4:	21ec      	movs	r1, #236	@ 0xec
 80011a6:	4809      	ldr	r0, [pc, #36]	@ (80011cc <bmp280_read_reg+0x3c>)
 80011a8:	f001 fa26 	bl	80025f8 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, &value, 1, HAL_MAX_DELAY);
 80011ac:	f107 020f 	add.w	r2, r7, #15
 80011b0:	f04f 33ff 	mov.w	r3, #4294967295
 80011b4:	9300      	str	r3, [sp, #0]
 80011b6:	2301      	movs	r3, #1
 80011b8:	21ec      	movs	r1, #236	@ 0xec
 80011ba:	4804      	ldr	r0, [pc, #16]	@ (80011cc <bmp280_read_reg+0x3c>)
 80011bc:	f001 fb1a 	bl	80027f4 <HAL_I2C_Master_Receive>
    return value;
 80011c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000220 	.word	0x20000220

080011d0 <bmp280_calculate_temperature>:

// Function to calculate temperature in Celsius
float bmp280_calculate_temperature(int32_t adc_temp) {
 80011d0:	b480      	push	{r7}
 80011d2:	b087      	sub	sp, #28
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
    int32_t var1 = ((((adc_temp >> 3) - ((int32_t)dig_T1 << 1))) * ((int32_t)dig_T2)) >> 11;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	10da      	asrs	r2, r3, #3
 80011dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001254 <bmp280_calculate_temperature+0x84>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	4a1c      	ldr	r2, [pc, #112]	@ (8001258 <bmp280_calculate_temperature+0x88>)
 80011e6:	6812      	ldr	r2, [r2, #0]
 80011e8:	fb02 f303 	mul.w	r3, r2, r3
 80011ec:	12db      	asrs	r3, r3, #11
 80011ee:	617b      	str	r3, [r7, #20]
    int32_t var2 = (((((adc_temp >> 4) - ((int32_t)dig_T1)) * ((adc_temp >> 4) - ((int32_t)dig_T1))) >> 12) * ((int32_t)dig_T3)) >> 14;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	111a      	asrs	r2, r3, #4
 80011f4:	4b17      	ldr	r3, [pc, #92]	@ (8001254 <bmp280_calculate_temperature+0x84>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	1111      	asrs	r1, r2, #4
 80011fe:	4a15      	ldr	r2, [pc, #84]	@ (8001254 <bmp280_calculate_temperature+0x84>)
 8001200:	6812      	ldr	r2, [r2, #0]
 8001202:	1a8a      	subs	r2, r1, r2
 8001204:	fb02 f303 	mul.w	r3, r2, r3
 8001208:	131b      	asrs	r3, r3, #12
 800120a:	4a14      	ldr	r2, [pc, #80]	@ (800125c <bmp280_calculate_temperature+0x8c>)
 800120c:	6812      	ldr	r2, [r2, #0]
 800120e:	fb02 f303 	mul.w	r3, r2, r3
 8001212:	139b      	asrs	r3, r3, #14
 8001214:	613b      	str	r3, [r7, #16]
    int32_t t_fine = var1 + var2;
 8001216:	697a      	ldr	r2, [r7, #20]
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	4413      	add	r3, r2
 800121c:	60fb      	str	r3, [r7, #12]
    float temperature = (t_fine * 5 + 128) >> 8;
 800121e:	68fa      	ldr	r2, [r7, #12]
 8001220:	4613      	mov	r3, r2
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	4413      	add	r3, r2
 8001226:	3380      	adds	r3, #128	@ 0x80
 8001228:	121b      	asrs	r3, r3, #8
 800122a:	ee07 3a90 	vmov	s15, r3
 800122e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001232:	edc7 7a02 	vstr	s15, [r7, #8]
    return temperature / 100.0; // Temperature in Celsius
 8001236:	edd7 7a02 	vldr	s15, [r7, #8]
 800123a:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8001260 <bmp280_calculate_temperature+0x90>
 800123e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001242:	eef0 7a66 	vmov.f32	s15, s13
}
 8001246:	eeb0 0a67 	vmov.f32	s0, s15
 800124a:	371c      	adds	r7, #28
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	20000000 	.word	0x20000000
 8001258:	20000004 	.word	0x20000004
 800125c:	20000008 	.word	0x20000008
 8001260:	42c80000 	.word	0x42c80000

08001264 <bmp280_calculate_pressure>:

// Function to calculate pressure in hPa
float bmp280_calculate_pressure(int32_t adc_press, int32_t t_fine) {
 8001264:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001268:	b0cc      	sub	sp, #304	@ 0x130
 800126a:	af00      	add	r7, sp, #0
 800126c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
 8001270:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
    int64_t var1 = ((int64_t)t_fine) - 128000;
 8001274:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001278:	17da      	asrs	r2, r3, #31
 800127a:	461c      	mov	r4, r3
 800127c:	4615      	mov	r5, r2
 800127e:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 8001282:	f145 3bff 	adc.w	fp, r5, #4294967295
 8001286:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	@ 0x128
    int64_t var2 = var1 * var1 * (int64_t)dig_P6;
 800128a:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800128e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001292:	fb03 f102 	mul.w	r1, r3, r2
 8001296:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800129a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800129e:	fb02 f303 	mul.w	r3, r2, r3
 80012a2:	18ca      	adds	r2, r1, r3
 80012a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80012a8:	fba3 8903 	umull	r8, r9, r3, r3
 80012ac:	eb02 0309 	add.w	r3, r2, r9
 80012b0:	4699      	mov	r9, r3
 80012b2:	4b9b      	ldr	r3, [pc, #620]	@ (8001520 <bmp280_calculate_pressure+0x2bc>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	17da      	asrs	r2, r3, #31
 80012b8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80012bc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80012c0:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 80012c4:	4603      	mov	r3, r0
 80012c6:	fb03 f209 	mul.w	r2, r3, r9
 80012ca:	460b      	mov	r3, r1
 80012cc:	fb08 f303 	mul.w	r3, r8, r3
 80012d0:	4413      	add	r3, r2
 80012d2:	4602      	mov	r2, r0
 80012d4:	fba8 1202 	umull	r1, r2, r8, r2
 80012d8:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80012dc:	460a      	mov	r2, r1
 80012de:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 80012e2:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80012e6:	4413      	add	r3, r2
 80012e8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80012ec:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	@ 0xc8
 80012f0:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
 80012f4:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
    var2 = var2 + ((var1 * (int64_t)dig_P5) << 17);
 80012f8:	4b8a      	ldr	r3, [pc, #552]	@ (8001524 <bmp280_calculate_pressure+0x2c0>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	17da      	asrs	r2, r3, #31
 80012fe:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001302:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001306:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800130a:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 800130e:	462a      	mov	r2, r5
 8001310:	fb02 f203 	mul.w	r2, r2, r3
 8001314:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001318:	4621      	mov	r1, r4
 800131a:	fb01 f303 	mul.w	r3, r1, r3
 800131e:	441a      	add	r2, r3
 8001320:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001324:	4621      	mov	r1, r4
 8001326:	fba3 1301 	umull	r1, r3, r3, r1
 800132a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800132e:	460b      	mov	r3, r1
 8001330:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8001334:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001338:	18d3      	adds	r3, r2, r3
 800133a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800133e:	f04f 0000 	mov.w	r0, #0
 8001342:	f04f 0100 	mov.w	r1, #0
 8001346:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 800134a:	462b      	mov	r3, r5
 800134c:	0459      	lsls	r1, r3, #17
 800134e:	4623      	mov	r3, r4
 8001350:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001354:	4623      	mov	r3, r4
 8001356:	0458      	lsls	r0, r3, #17
 8001358:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800135c:	1814      	adds	r4, r2, r0
 800135e:	643c      	str	r4, [r7, #64]	@ 0x40
 8001360:	414b      	adcs	r3, r1
 8001362:	647b      	str	r3, [r7, #68]	@ 0x44
 8001364:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001368:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
    var2 = var2 + (((int64_t)dig_P4) << 35);
 800136c:	4b6e      	ldr	r3, [pc, #440]	@ (8001528 <bmp280_calculate_pressure+0x2c4>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	17da      	asrs	r2, r3, #31
 8001372:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001376:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800137a:	f04f 0000 	mov.w	r0, #0
 800137e:	f04f 0100 	mov.w	r1, #0
 8001382:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001386:	00d9      	lsls	r1, r3, #3
 8001388:	2000      	movs	r0, #0
 800138a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800138e:	1814      	adds	r4, r2, r0
 8001390:	63bc      	str	r4, [r7, #56]	@ 0x38
 8001392:	414b      	adcs	r3, r1
 8001394:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001396:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 800139a:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
    var1 = ((var1 * var1 * (int64_t)dig_P3) >> 8) + ((var1 * (int64_t)dig_P2) << 12);
 800139e:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80013a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80013a6:	fb03 f102 	mul.w	r1, r3, r2
 80013aa:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80013ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80013b2:	fb02 f303 	mul.w	r3, r2, r3
 80013b6:	18ca      	adds	r2, r1, r3
 80013b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80013bc:	fba3 1303 	umull	r1, r3, r3, r3
 80013c0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80013c4:	460b      	mov	r3, r1
 80013c6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80013ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80013ce:	18d3      	adds	r3, r2, r3
 80013d0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80013d4:	4b55      	ldr	r3, [pc, #340]	@ (800152c <bmp280_calculate_pressure+0x2c8>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	17da      	asrs	r2, r3, #31
 80013da:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80013de:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80013e2:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 80013e6:	462b      	mov	r3, r5
 80013e8:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 80013ec:	4642      	mov	r2, r8
 80013ee:	fb02 f203 	mul.w	r2, r2, r3
 80013f2:	464b      	mov	r3, r9
 80013f4:	4621      	mov	r1, r4
 80013f6:	fb01 f303 	mul.w	r3, r1, r3
 80013fa:	4413      	add	r3, r2
 80013fc:	4622      	mov	r2, r4
 80013fe:	4641      	mov	r1, r8
 8001400:	fba2 1201 	umull	r1, r2, r2, r1
 8001404:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 8001408:	460a      	mov	r2, r1
 800140a:	f8c7 20f8 	str.w	r2, [r7, #248]	@ 0xf8
 800140e:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8001412:	4413      	add	r3, r2
 8001414:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001418:	f04f 0000 	mov.w	r0, #0
 800141c:	f04f 0100 	mov.w	r1, #0
 8001420:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8001424:	4623      	mov	r3, r4
 8001426:	0a18      	lsrs	r0, r3, #8
 8001428:	462b      	mov	r3, r5
 800142a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800142e:	462b      	mov	r3, r5
 8001430:	1219      	asrs	r1, r3, #8
 8001432:	4b3f      	ldr	r3, [pc, #252]	@ (8001530 <bmp280_calculate_pressure+0x2cc>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	17da      	asrs	r2, r3, #31
 8001438:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800143c:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001440:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001444:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001448:	464a      	mov	r2, r9
 800144a:	fb02 f203 	mul.w	r2, r2, r3
 800144e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001452:	4644      	mov	r4, r8
 8001454:	fb04 f303 	mul.w	r3, r4, r3
 8001458:	441a      	add	r2, r3
 800145a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800145e:	4644      	mov	r4, r8
 8001460:	fba3 4304 	umull	r4, r3, r3, r4
 8001464:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001468:	4623      	mov	r3, r4
 800146a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800146e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001472:	18d3      	adds	r3, r2, r3
 8001474:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001478:	f04f 0200 	mov.w	r2, #0
 800147c:	f04f 0300 	mov.w	r3, #0
 8001480:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 8001484:	464c      	mov	r4, r9
 8001486:	0323      	lsls	r3, r4, #12
 8001488:	4644      	mov	r4, r8
 800148a:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 800148e:	4644      	mov	r4, r8
 8001490:	0322      	lsls	r2, r4, #12
 8001492:	1884      	adds	r4, r0, r2
 8001494:	633c      	str	r4, [r7, #48]	@ 0x30
 8001496:	eb41 0303 	adc.w	r3, r1, r3
 800149a:	637b      	str	r3, [r7, #52]	@ 0x34
 800149c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80014a0:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
    var1 = (((((int64_t)1) << 47) + var1)) * ((int64_t)dig_P1) >> 33;
 80014a4:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 80014a8:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 80014ac:	f8c7 109c 	str.w	r1, [r7, #156]	@ 0x9c
 80014b0:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 80014b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001534 <bmp280_calculate_pressure+0x2d0>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	17da      	asrs	r2, r3, #31
 80014ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80014be:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80014c2:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 80014c6:	462b      	mov	r3, r5
 80014c8:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 80014cc:	4642      	mov	r2, r8
 80014ce:	fb02 f203 	mul.w	r2, r2, r3
 80014d2:	464b      	mov	r3, r9
 80014d4:	4621      	mov	r1, r4
 80014d6:	fb01 f303 	mul.w	r3, r1, r3
 80014da:	4413      	add	r3, r2
 80014dc:	4622      	mov	r2, r4
 80014de:	4641      	mov	r1, r8
 80014e0:	fba2 1201 	umull	r1, r2, r2, r1
 80014e4:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80014e8:	460a      	mov	r2, r1
 80014ea:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 80014ee:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80014f2:	4413      	add	r3, r2
 80014f4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80014f8:	f04f 0200 	mov.w	r2, #0
 80014fc:	f04f 0300 	mov.w	r3, #0
 8001500:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001504:	4629      	mov	r1, r5
 8001506:	104a      	asrs	r2, r1, #1
 8001508:	4629      	mov	r1, r5
 800150a:	17cb      	asrs	r3, r1, #31
 800150c:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128

    if (var1 == 0) {
 8001510:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001514:	4313      	orrs	r3, r2
 8001516:	d111      	bne.n	800153c <bmp280_calculate_pressure+0x2d8>
        return 0; // Avoid division by zero
 8001518:	eddf 7a07 	vldr	s15, [pc, #28]	@ 8001538 <bmp280_calculate_pressure+0x2d4>
 800151c:	e157      	b.n	80017ce <bmp280_calculate_pressure+0x56a>
 800151e:	bf00      	nop
 8001520:	20000020 	.word	0x20000020
 8001524:	2000001c 	.word	0x2000001c
 8001528:	20000018 	.word	0x20000018
 800152c:	20000014 	.word	0x20000014
 8001530:	20000010 	.word	0x20000010
 8001534:	2000000c 	.word	0x2000000c
 8001538:	00000000 	.word	0x00000000
    }

    int64_t p = 1048576 - adc_press;
 800153c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001540:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001544:	17da      	asrs	r2, r3, #31
 8001546:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001548:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800154a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800154e:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
    p = (((p << 31) - var2) * 3125) / var1;
 8001552:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001556:	105b      	asrs	r3, r3, #1
 8001558:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800155c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001560:	07db      	lsls	r3, r3, #31
 8001562:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001566:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800156a:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 800156e:	4621      	mov	r1, r4
 8001570:	1a89      	subs	r1, r1, r2
 8001572:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 8001576:	4629      	mov	r1, r5
 8001578:	eb61 0303 	sbc.w	r3, r1, r3
 800157c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001580:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8001584:	4622      	mov	r2, r4
 8001586:	462b      	mov	r3, r5
 8001588:	1891      	adds	r1, r2, r2
 800158a:	6239      	str	r1, [r7, #32]
 800158c:	415b      	adcs	r3, r3
 800158e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001590:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001594:	4621      	mov	r1, r4
 8001596:	1851      	adds	r1, r2, r1
 8001598:	61b9      	str	r1, [r7, #24]
 800159a:	4629      	mov	r1, r5
 800159c:	414b      	adcs	r3, r1
 800159e:	61fb      	str	r3, [r7, #28]
 80015a0:	f04f 0200 	mov.w	r2, #0
 80015a4:	f04f 0300 	mov.w	r3, #0
 80015a8:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80015ac:	4649      	mov	r1, r9
 80015ae:	018b      	lsls	r3, r1, #6
 80015b0:	4641      	mov	r1, r8
 80015b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015b6:	4641      	mov	r1, r8
 80015b8:	018a      	lsls	r2, r1, #6
 80015ba:	4641      	mov	r1, r8
 80015bc:	1889      	adds	r1, r1, r2
 80015be:	6139      	str	r1, [r7, #16]
 80015c0:	4649      	mov	r1, r9
 80015c2:	eb43 0101 	adc.w	r1, r3, r1
 80015c6:	6179      	str	r1, [r7, #20]
 80015c8:	f04f 0200 	mov.w	r2, #0
 80015cc:	f04f 0300 	mov.w	r3, #0
 80015d0:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80015d4:	4649      	mov	r1, r9
 80015d6:	008b      	lsls	r3, r1, #2
 80015d8:	4641      	mov	r1, r8
 80015da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80015de:	4641      	mov	r1, r8
 80015e0:	008a      	lsls	r2, r1, #2
 80015e2:	4610      	mov	r0, r2
 80015e4:	4619      	mov	r1, r3
 80015e6:	4603      	mov	r3, r0
 80015e8:	4622      	mov	r2, r4
 80015ea:	189b      	adds	r3, r3, r2
 80015ec:	60bb      	str	r3, [r7, #8]
 80015ee:	460b      	mov	r3, r1
 80015f0:	462a      	mov	r2, r5
 80015f2:	eb42 0303 	adc.w	r3, r2, r3
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	f04f 0200 	mov.w	r2, #0
 80015fc:	f04f 0300 	mov.w	r3, #0
 8001600:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001604:	4649      	mov	r1, r9
 8001606:	008b      	lsls	r3, r1, #2
 8001608:	4641      	mov	r1, r8
 800160a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800160e:	4641      	mov	r1, r8
 8001610:	008a      	lsls	r2, r1, #2
 8001612:	4610      	mov	r0, r2
 8001614:	4619      	mov	r1, r3
 8001616:	4603      	mov	r3, r0
 8001618:	4622      	mov	r2, r4
 800161a:	189b      	adds	r3, r3, r2
 800161c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800161e:	462b      	mov	r3, r5
 8001620:	460a      	mov	r2, r1
 8001622:	eb42 0303 	adc.w	r3, r2, r3
 8001626:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001628:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800162c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001630:	f7ff fbc8 	bl	8000dc4 <__aeabi_ldivmod>
 8001634:	4602      	mov	r2, r0
 8001636:	460b      	mov	r3, r1
 8001638:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
    var1 = (((int64_t)dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 800163c:	4b67      	ldr	r3, [pc, #412]	@ (80017dc <bmp280_calculate_pressure+0x578>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	17da      	asrs	r2, r3, #31
 8001642:	673b      	str	r3, [r7, #112]	@ 0x70
 8001644:	677a      	str	r2, [r7, #116]	@ 0x74
 8001646:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800164a:	f04f 0000 	mov.w	r0, #0
 800164e:	f04f 0100 	mov.w	r1, #0
 8001652:	0b50      	lsrs	r0, r2, #13
 8001654:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001658:	1359      	asrs	r1, r3, #13
 800165a:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 800165e:	462b      	mov	r3, r5
 8001660:	fb00 f203 	mul.w	r2, r0, r3
 8001664:	4623      	mov	r3, r4
 8001666:	fb03 f301 	mul.w	r3, r3, r1
 800166a:	4413      	add	r3, r2
 800166c:	4622      	mov	r2, r4
 800166e:	fba2 1200 	umull	r1, r2, r2, r0
 8001672:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8001676:	460a      	mov	r2, r1
 8001678:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 800167c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001680:	4413      	add	r3, r2
 8001682:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001686:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800168a:	f04f 0000 	mov.w	r0, #0
 800168e:	f04f 0100 	mov.w	r1, #0
 8001692:	0b50      	lsrs	r0, r2, #13
 8001694:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001698:	1359      	asrs	r1, r3, #13
 800169a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 800169e:	462b      	mov	r3, r5
 80016a0:	fb00 f203 	mul.w	r2, r0, r3
 80016a4:	4623      	mov	r3, r4
 80016a6:	fb03 f301 	mul.w	r3, r3, r1
 80016aa:	4413      	add	r3, r2
 80016ac:	4622      	mov	r2, r4
 80016ae:	fba2 1200 	umull	r1, r2, r2, r0
 80016b2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80016b6:	460a      	mov	r2, r1
 80016b8:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 80016bc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80016c0:	4413      	add	r3, r2
 80016c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80016c6:	f04f 0200 	mov.w	r2, #0
 80016ca:	f04f 0300 	mov.w	r3, #0
 80016ce:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 80016d2:	4621      	mov	r1, r4
 80016d4:	0e4a      	lsrs	r2, r1, #25
 80016d6:	4629      	mov	r1, r5
 80016d8:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80016dc:	4629      	mov	r1, r5
 80016de:	164b      	asrs	r3, r1, #25
 80016e0:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
    var2 = (((int64_t)dig_P8) * p) >> 19;
 80016e4:	4b3e      	ldr	r3, [pc, #248]	@ (80017e0 <bmp280_calculate_pressure+0x57c>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	17da      	asrs	r2, r3, #31
 80016ea:	66bb      	str	r3, [r7, #104]	@ 0x68
 80016ec:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80016ee:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80016f2:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 80016f6:	462a      	mov	r2, r5
 80016f8:	fb02 f203 	mul.w	r2, r2, r3
 80016fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001700:	4621      	mov	r1, r4
 8001702:	fb01 f303 	mul.w	r3, r1, r3
 8001706:	441a      	add	r2, r3
 8001708:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800170c:	4621      	mov	r1, r4
 800170e:	fba3 1301 	umull	r1, r3, r3, r1
 8001712:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001716:	460b      	mov	r3, r1
 8001718:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800171c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001720:	18d3      	adds	r3, r2, r3
 8001722:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001726:	f04f 0200 	mov.w	r2, #0
 800172a:	f04f 0300 	mov.w	r3, #0
 800172e:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8001732:	4621      	mov	r1, r4
 8001734:	0cca      	lsrs	r2, r1, #19
 8001736:	4629      	mov	r1, r5
 8001738:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800173c:	4629      	mov	r1, r5
 800173e:	14cb      	asrs	r3, r1, #19
 8001740:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

    p = ((p + var1 + var2) >> 8) + ((int64_t)dig_P7 << 4);
 8001744:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 8001748:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800174c:	1884      	adds	r4, r0, r2
 800174e:	663c      	str	r4, [r7, #96]	@ 0x60
 8001750:	eb41 0303 	adc.w	r3, r1, r3
 8001754:	667b      	str	r3, [r7, #100]	@ 0x64
 8001756:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800175a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800175e:	4621      	mov	r1, r4
 8001760:	1889      	adds	r1, r1, r2
 8001762:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001764:	4629      	mov	r1, r5
 8001766:	eb43 0101 	adc.w	r1, r3, r1
 800176a:	65f9      	str	r1, [r7, #92]	@ 0x5c
 800176c:	f04f 0200 	mov.w	r2, #0
 8001770:	f04f 0300 	mov.w	r3, #0
 8001774:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001778:	4621      	mov	r1, r4
 800177a:	0a0a      	lsrs	r2, r1, #8
 800177c:	4629      	mov	r1, r5
 800177e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001782:	4629      	mov	r1, r5
 8001784:	120b      	asrs	r3, r1, #8
 8001786:	4917      	ldr	r1, [pc, #92]	@ (80017e4 <bmp280_calculate_pressure+0x580>)
 8001788:	6809      	ldr	r1, [r1, #0]
 800178a:	17c8      	asrs	r0, r1, #31
 800178c:	6539      	str	r1, [r7, #80]	@ 0x50
 800178e:	6578      	str	r0, [r7, #84]	@ 0x54
 8001790:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8001794:	4621      	mov	r1, r4
 8001796:	1709      	asrs	r1, r1, #28
 8001798:	64f9      	str	r1, [r7, #76]	@ 0x4c
 800179a:	4621      	mov	r1, r4
 800179c:	0109      	lsls	r1, r1, #4
 800179e:	64b9      	str	r1, [r7, #72]	@ 0x48
 80017a0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80017a4:	4621      	mov	r1, r4
 80017a6:	1851      	adds	r1, r2, r1
 80017a8:	6039      	str	r1, [r7, #0]
 80017aa:	4629      	mov	r1, r5
 80017ac:	eb43 0101 	adc.w	r1, r3, r1
 80017b0:	6079      	str	r1, [r7, #4]
 80017b2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80017b6:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
    return (float)p / 256.0; // Pressure in hPa
 80017ba:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 80017be:	f7ff fac3 	bl	8000d48 <__aeabi_l2f>
 80017c2:	ee06 0a90 	vmov	s13, r0
 80017c6:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80017e8 <bmp280_calculate_pressure+0x584>
 80017ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
}
 80017ce:	eeb0 0a67 	vmov.f32	s0, s15
 80017d2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80017d6:	46bd      	mov	sp, r7
 80017d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017dc:	2000002c 	.word	0x2000002c
 80017e0:	20000028 	.word	0x20000028
 80017e4:	20000024 	.word	0x20000024
 80017e8:	43800000 	.word	0x43800000

080017ec <bmp280_read_data>:

// Read BMP280 temperature and pressure
void bmp280_read_data() {
 80017ec:	b5b0      	push	{r4, r5, r7, lr}
 80017ee:	b088      	sub	sp, #32
 80017f0:	af02      	add	r7, sp, #8
    uint8_t press_msb = bmp280_read_reg(0xF7);
 80017f2:	20f7      	movs	r0, #247	@ 0xf7
 80017f4:	f7ff fccc 	bl	8001190 <bmp280_read_reg>
 80017f8:	4603      	mov	r3, r0
 80017fa:	75fb      	strb	r3, [r7, #23]
    uint8_t press_lsb = bmp280_read_reg(0xF8);
 80017fc:	20f8      	movs	r0, #248	@ 0xf8
 80017fe:	f7ff fcc7 	bl	8001190 <bmp280_read_reg>
 8001802:	4603      	mov	r3, r0
 8001804:	75bb      	strb	r3, [r7, #22]
    uint8_t press_xlsb = bmp280_read_reg(0xF9);
 8001806:	20f9      	movs	r0, #249	@ 0xf9
 8001808:	f7ff fcc2 	bl	8001190 <bmp280_read_reg>
 800180c:	4603      	mov	r3, r0
 800180e:	757b      	strb	r3, [r7, #21]

    uint8_t temp_msb = bmp280_read_reg(0xFA);
 8001810:	20fa      	movs	r0, #250	@ 0xfa
 8001812:	f7ff fcbd 	bl	8001190 <bmp280_read_reg>
 8001816:	4603      	mov	r3, r0
 8001818:	753b      	strb	r3, [r7, #20]
    uint8_t temp_lsb = bmp280_read_reg(0xFB);
 800181a:	20fb      	movs	r0, #251	@ 0xfb
 800181c:	f7ff fcb8 	bl	8001190 <bmp280_read_reg>
 8001820:	4603      	mov	r3, r0
 8001822:	74fb      	strb	r3, [r7, #19]
    uint8_t temp_xlsb = bmp280_read_reg(0xFC);
 8001824:	20fc      	movs	r0, #252	@ 0xfc
 8001826:	f7ff fcb3 	bl	8001190 <bmp280_read_reg>
 800182a:	4603      	mov	r3, r0
 800182c:	74bb      	strb	r3, [r7, #18]

    int32_t adc_press = (press_msb << 12) | (press_lsb << 4) | (press_xlsb >> 4);
 800182e:	7dfb      	ldrb	r3, [r7, #23]
 8001830:	031a      	lsls	r2, r3, #12
 8001832:	7dbb      	ldrb	r3, [r7, #22]
 8001834:	011b      	lsls	r3, r3, #4
 8001836:	4313      	orrs	r3, r2
 8001838:	7d7a      	ldrb	r2, [r7, #21]
 800183a:	0912      	lsrs	r2, r2, #4
 800183c:	b2d2      	uxtb	r2, r2
 800183e:	4313      	orrs	r3, r2
 8001840:	60fb      	str	r3, [r7, #12]
    int32_t adc_temp = (temp_msb << 12) | (temp_lsb << 4) | (temp_xlsb >> 4);
 8001842:	7d3b      	ldrb	r3, [r7, #20]
 8001844:	031a      	lsls	r2, r3, #12
 8001846:	7cfb      	ldrb	r3, [r7, #19]
 8001848:	011b      	lsls	r3, r3, #4
 800184a:	4313      	orrs	r3, r2
 800184c:	7cba      	ldrb	r2, [r7, #18]
 800184e:	0912      	lsrs	r2, r2, #4
 8001850:	b2d2      	uxtb	r2, r2
 8001852:	4313      	orrs	r3, r2
 8001854:	60bb      	str	r3, [r7, #8]

    // Calculate temperature in Celsius
    float temperature = bmp280_calculate_temperature(adc_temp);
 8001856:	68b8      	ldr	r0, [r7, #8]
 8001858:	f7ff fcba 	bl	80011d0 <bmp280_calculate_temperature>
 800185c:	ed87 0a01 	vstr	s0, [r7, #4]
    // Calculate pressure in hPa
    float pressure = bmp280_calculate_pressure(adc_press, 0); // Pass t_fine (if used) for better accuracy
 8001860:	2100      	movs	r1, #0
 8001862:	68f8      	ldr	r0, [r7, #12]
 8001864:	f7ff fcfe 	bl	8001264 <bmp280_calculate_pressure>
 8001868:	ed87 0a00 	vstr	s0, [r7]

    // Print the temperature and pressure in human-readable units (float)
    printf("Temp: %.2f°C, Pressure: %.2f hPa\n", temperature, pressure);
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f7fe fe6b 	bl	8000548 <__aeabi_f2d>
 8001872:	4604      	mov	r4, r0
 8001874:	460d      	mov	r5, r1
 8001876:	6838      	ldr	r0, [r7, #0]
 8001878:	f7fe fe66 	bl	8000548 <__aeabi_f2d>
 800187c:	4602      	mov	r2, r0
 800187e:	460b      	mov	r3, r1
 8001880:	e9cd 2300 	strd	r2, r3, [sp]
 8001884:	4622      	mov	r2, r4
 8001886:	462b      	mov	r3, r5
 8001888:	4806      	ldr	r0, [pc, #24]	@ (80018a4 <bmp280_read_data+0xb8>)
 800188a:	f002 ff87 	bl	800479c <iprintf>
    fflush(stdout);
 800188e:	4b06      	ldr	r3, [pc, #24]	@ (80018a8 <bmp280_read_data+0xbc>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	4618      	mov	r0, r3
 8001896:	f002 feab 	bl	80045f0 <fflush>
}
 800189a:	bf00      	nop
 800189c:	3718      	adds	r7, #24
 800189e:	46bd      	mov	sp, r7
 80018a0:	bdb0      	pop	{r4, r5, r7, pc}
 80018a2:	bf00      	nop
 80018a4:	08006558 	.word	0x08006558
 80018a8:	20000048 	.word	0x20000048

080018ac <main>:

int main(void) {
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
    HAL_Init();
 80018b0:	f000 fa46 	bl	8001d40 <HAL_Init>
    SystemClock_Config();
 80018b4:	f000 f80c 	bl	80018d0 <SystemClock_Config>
    MX_GPIO_Init();
 80018b8:	f000 f852 	bl	8001960 <MX_GPIO_Init>
    MX_I2C1_Init();
 80018bc:	f000 f86a 	bl	8001994 <MX_I2C1_Init>

    while (1) {
        bmp280_read_data();
 80018c0:	f7ff ff94 	bl	80017ec <bmp280_read_data>
        HAL_Delay(1000); // Delay of 1 second
 80018c4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018c8:	f000 faac 	bl	8001e24 <HAL_Delay>
        bmp280_read_data();
 80018cc:	bf00      	nop
 80018ce:	e7f7      	b.n	80018c0 <main+0x14>

080018d0 <SystemClock_Config>:
    }
}

// System Clock Configuration
void SystemClock_Config(void) {
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b092      	sub	sp, #72	@ 0x48
 80018d4:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018d6:	f107 0318 	add.w	r3, r7, #24
 80018da:	2230      	movs	r2, #48	@ 0x30
 80018dc:	2100      	movs	r1, #0
 80018de:	4618      	mov	r0, r3
 80018e0:	f002 ffb1 	bl	8004846 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018e4:	1d3b      	adds	r3, r7, #4
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	605a      	str	r2, [r3, #4]
 80018ec:	609a      	str	r2, [r3, #8]
 80018ee:	60da      	str	r2, [r3, #12]
 80018f0:	611a      	str	r2, [r3, #16]

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018f2:	2301      	movs	r3, #1
 80018f4:	61bb      	str	r3, [r7, #24]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018f6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80018fa:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018fc:	2302      	movs	r3, #2
 80018fe:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001900:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001904:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLM = 8;
 8001906:	2308      	movs	r3, #8
 8001908:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLN = 336;
 800190a:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800190e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001910:	2302      	movs	r3, #2
 8001912:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLQ = 7;
 8001914:	2307      	movs	r3, #7
 8001916:	647b      	str	r3, [r7, #68]	@ 0x44

    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001918:	f107 0318 	add.w	r3, r7, #24
 800191c:	4618      	mov	r0, r3
 800191e:	f001 fd21 	bl	8003364 <HAL_RCC_OscConfig>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <SystemClock_Config+0x5c>
        while (1); // Error handler
 8001928:	bf00      	nop
 800192a:	e7fd      	b.n	8001928 <SystemClock_Config+0x58>
    }

    RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK |
 800192c:	230f      	movs	r3, #15
 800192e:	607b      	str	r3, [r7, #4]
                                   RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001930:	2302      	movs	r3, #2
 8001932:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001934:	2300      	movs	r3, #0
 8001936:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001938:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800193c:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800193e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001942:	617b      	str	r3, [r7, #20]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8001944:	1d3b      	adds	r3, r7, #4
 8001946:	2105      	movs	r1, #5
 8001948:	4618      	mov	r0, r3
 800194a:	f001 ff83 	bl	8003854 <HAL_RCC_ClockConfig>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <SystemClock_Config+0x88>
        while (1); // Error handler
 8001954:	bf00      	nop
 8001956:	e7fd      	b.n	8001954 <SystemClock_Config+0x84>
    }
}
 8001958:	bf00      	nop
 800195a:	3748      	adds	r7, #72	@ 0x48
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <MX_GPIO_Init>:

// GPIO Initialization
static void MX_GPIO_Init(void) {
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	607b      	str	r3, [r7, #4]
 800196a:	4b09      	ldr	r3, [pc, #36]	@ (8001990 <MX_GPIO_Init+0x30>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196e:	4a08      	ldr	r2, [pc, #32]	@ (8001990 <MX_GPIO_Init+0x30>)
 8001970:	f043 0302 	orr.w	r3, r3, #2
 8001974:	6313      	str	r3, [r2, #48]	@ 0x30
 8001976:	4b06      	ldr	r3, [pc, #24]	@ (8001990 <MX_GPIO_Init+0x30>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	607b      	str	r3, [r7, #4]
 8001980:	687b      	ldr	r3, [r7, #4]
}
 8001982:	bf00      	nop
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	40023800 	.word	0x40023800

08001994 <MX_I2C1_Init>:

// I2C1 Initialization
static void MX_I2C1_Init(void) {
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
    __HAL_RCC_I2C1_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	607b      	str	r3, [r7, #4]
 800199e:	4b18      	ldr	r3, [pc, #96]	@ (8001a00 <MX_I2C1_Init+0x6c>)
 80019a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a2:	4a17      	ldr	r2, [pc, #92]	@ (8001a00 <MX_I2C1_Init+0x6c>)
 80019a4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80019a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80019aa:	4b15      	ldr	r3, [pc, #84]	@ (8001a00 <MX_I2C1_Init+0x6c>)
 80019ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019b2:	607b      	str	r3, [r7, #4]
 80019b4:	687b      	ldr	r3, [r7, #4]

    hi2c1.Instance = I2C1;
 80019b6:	4b13      	ldr	r3, [pc, #76]	@ (8001a04 <MX_I2C1_Init+0x70>)
 80019b8:	4a13      	ldr	r2, [pc, #76]	@ (8001a08 <MX_I2C1_Init+0x74>)
 80019ba:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 100000;
 80019bc:	4b11      	ldr	r3, [pc, #68]	@ (8001a04 <MX_I2C1_Init+0x70>)
 80019be:	4a13      	ldr	r2, [pc, #76]	@ (8001a0c <MX_I2C1_Init+0x78>)
 80019c0:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019c2:	4b10      	ldr	r3, [pc, #64]	@ (8001a04 <MX_I2C1_Init+0x70>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 80019c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001a04 <MX_I2C1_Init+0x70>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001a04 <MX_I2C1_Init+0x70>)
 80019d0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80019d4:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001a04 <MX_I2C1_Init+0x70>)
 80019d8:	2200      	movs	r2, #0
 80019da:	615a      	str	r2, [r3, #20]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019dc:	4b09      	ldr	r3, [pc, #36]	@ (8001a04 <MX_I2C1_Init+0x70>)
 80019de:	2200      	movs	r2, #0
 80019e0:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019e2:	4b08      	ldr	r3, [pc, #32]	@ (8001a04 <MX_I2C1_Init+0x70>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	621a      	str	r2, [r3, #32]

    if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80019e8:	4806      	ldr	r0, [pc, #24]	@ (8001a04 <MX_I2C1_Init+0x70>)
 80019ea:	f000 fcc1 	bl	8002370 <HAL_I2C_Init>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_I2C1_Init+0x64>
        while (1); // Error handler
 80019f4:	bf00      	nop
 80019f6:	e7fd      	b.n	80019f4 <MX_I2C1_Init+0x60>
    }
}
 80019f8:	bf00      	nop
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40023800 	.word	0x40023800
 8001a04:	20000220 	.word	0x20000220
 8001a08:	40005400 	.word	0x40005400
 8001a0c:	000186a0 	.word	0x000186a0

08001a10 <_write>:

// Override _write() function for semihosting (redirect printf to Renode)
int _write(int file, char *ptr, int len) {
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	607a      	str	r2, [r7, #4]
    asm volatile("mov r0, #0"); // SYS_WRITE0
 8001a1c:	f04f 0000 	mov.w	r0, #0
    asm volatile("mov r1, %0" : : "r"(ptr));
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	4619      	mov	r1, r3
    asm volatile("bkpt #0xAB");
 8001a24:	beab      	bkpt	0x00ab
    return len;
 8001a26:	687b      	ldr	r3, [r7, #4]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	607b      	str	r3, [r7, #4]
 8001a3e:	4b10      	ldr	r3, [pc, #64]	@ (8001a80 <HAL_MspInit+0x4c>)
 8001a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a42:	4a0f      	ldr	r2, [pc, #60]	@ (8001a80 <HAL_MspInit+0x4c>)
 8001a44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a48:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8001a80 <HAL_MspInit+0x4c>)
 8001a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a52:	607b      	str	r3, [r7, #4]
 8001a54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	603b      	str	r3, [r7, #0]
 8001a5a:	4b09      	ldr	r3, [pc, #36]	@ (8001a80 <HAL_MspInit+0x4c>)
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5e:	4a08      	ldr	r2, [pc, #32]	@ (8001a80 <HAL_MspInit+0x4c>)
 8001a60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a64:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a66:	4b06      	ldr	r3, [pc, #24]	@ (8001a80 <HAL_MspInit+0x4c>)
 8001a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a6e:	603b      	str	r3, [r7, #0]
 8001a70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a72:	bf00      	nop
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	40023800 	.word	0x40023800

08001a84 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b08a      	sub	sp, #40	@ 0x28
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8c:	f107 0314 	add.w	r3, r7, #20
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	605a      	str	r2, [r3, #4]
 8001a96:	609a      	str	r2, [r3, #8]
 8001a98:	60da      	str	r2, [r3, #12]
 8001a9a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a19      	ldr	r2, [pc, #100]	@ (8001b08 <HAL_I2C_MspInit+0x84>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d12b      	bne.n	8001afe <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	613b      	str	r3, [r7, #16]
 8001aaa:	4b18      	ldr	r3, [pc, #96]	@ (8001b0c <HAL_I2C_MspInit+0x88>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aae:	4a17      	ldr	r2, [pc, #92]	@ (8001b0c <HAL_I2C_MspInit+0x88>)
 8001ab0:	f043 0302 	orr.w	r3, r3, #2
 8001ab4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ab6:	4b15      	ldr	r3, [pc, #84]	@ (8001b0c <HAL_I2C_MspInit+0x88>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	613b      	str	r3, [r7, #16]
 8001ac0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ac2:	23c0      	movs	r3, #192	@ 0xc0
 8001ac4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ac6:	2312      	movs	r3, #18
 8001ac8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aca:	2301      	movs	r3, #1
 8001acc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ad2:	2304      	movs	r3, #4
 8001ad4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad6:	f107 0314 	add.w	r3, r7, #20
 8001ada:	4619      	mov	r1, r3
 8001adc:	480c      	ldr	r0, [pc, #48]	@ (8001b10 <HAL_I2C_MspInit+0x8c>)
 8001ade:	f000 faab 	bl	8002038 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60fb      	str	r3, [r7, #12]
 8001ae6:	4b09      	ldr	r3, [pc, #36]	@ (8001b0c <HAL_I2C_MspInit+0x88>)
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aea:	4a08      	ldr	r2, [pc, #32]	@ (8001b0c <HAL_I2C_MspInit+0x88>)
 8001aec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001af0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001af2:	4b06      	ldr	r3, [pc, #24]	@ (8001b0c <HAL_I2C_MspInit+0x88>)
 8001af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001afe:	bf00      	nop
 8001b00:	3728      	adds	r7, #40	@ 0x28
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40005400 	.word	0x40005400
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	40020400 	.word	0x40020400

08001b14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b18:	bf00      	nop
 8001b1a:	e7fd      	b.n	8001b18 <NMI_Handler+0x4>

08001b1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b20:	bf00      	nop
 8001b22:	e7fd      	b.n	8001b20 <HardFault_Handler+0x4>

08001b24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b28:	bf00      	nop
 8001b2a:	e7fd      	b.n	8001b28 <MemManage_Handler+0x4>

08001b2c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b30:	bf00      	nop
 8001b32:	e7fd      	b.n	8001b30 <BusFault_Handler+0x4>

08001b34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b38:	bf00      	nop
 8001b3a:	e7fd      	b.n	8001b38 <UsageFault_Handler+0x4>

08001b3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b40:	bf00      	nop
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr

08001b4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b5c:	bf00      	nop
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr

08001b66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b6a:	f000 f93b 	bl	8001de4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b72:	b480      	push	{r7}
 8001b74:	af00      	add	r7, sp, #0
  return 1;
 8001b76:	2301      	movs	r3, #1
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr

08001b82 <_kill>:

int _kill(int pid, int sig)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b082      	sub	sp, #8
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
 8001b8a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b8c:	f002 feae 	bl	80048ec <__errno>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2216      	movs	r2, #22
 8001b94:	601a      	str	r2, [r3, #0]
  return -1;
 8001b96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <_exit>:

void _exit (int status)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b082      	sub	sp, #8
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001baa:	f04f 31ff 	mov.w	r1, #4294967295
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f7ff ffe7 	bl	8001b82 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bb4:	bf00      	nop
 8001bb6:	e7fd      	b.n	8001bb4 <_exit+0x12>

08001bb8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	617b      	str	r3, [r7, #20]
 8001bc8:	e00a      	b.n	8001be0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bca:	f3af 8000 	nop.w
 8001bce:	4601      	mov	r1, r0
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	1c5a      	adds	r2, r3, #1
 8001bd4:	60ba      	str	r2, [r7, #8]
 8001bd6:	b2ca      	uxtb	r2, r1
 8001bd8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	3301      	adds	r3, #1
 8001bde:	617b      	str	r3, [r7, #20]
 8001be0:	697a      	ldr	r2, [r7, #20]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	dbf0      	blt.n	8001bca <_read+0x12>
  }

  return len;
 8001be8:	687b      	ldr	r3, [r7, #4]
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3718      	adds	r7, #24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bfa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	b083      	sub	sp, #12
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
 8001c12:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c1a:	605a      	str	r2, [r3, #4]
  return 0;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr

08001c2a <_isatty>:

int _isatty(int file)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b083      	sub	sp, #12
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c32:	2301      	movs	r3, #1
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3714      	adds	r7, #20
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
	...

08001c5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c64:	4a14      	ldr	r2, [pc, #80]	@ (8001cb8 <_sbrk+0x5c>)
 8001c66:	4b15      	ldr	r3, [pc, #84]	@ (8001cbc <_sbrk+0x60>)
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c70:	4b13      	ldr	r3, [pc, #76]	@ (8001cc0 <_sbrk+0x64>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d102      	bne.n	8001c7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c78:	4b11      	ldr	r3, [pc, #68]	@ (8001cc0 <_sbrk+0x64>)
 8001c7a:	4a12      	ldr	r2, [pc, #72]	@ (8001cc4 <_sbrk+0x68>)
 8001c7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c7e:	4b10      	ldr	r3, [pc, #64]	@ (8001cc0 <_sbrk+0x64>)
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4413      	add	r3, r2
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d207      	bcs.n	8001c9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c8c:	f002 fe2e 	bl	80048ec <__errno>
 8001c90:	4603      	mov	r3, r0
 8001c92:	220c      	movs	r2, #12
 8001c94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c96:	f04f 33ff 	mov.w	r3, #4294967295
 8001c9a:	e009      	b.n	8001cb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c9c:	4b08      	ldr	r3, [pc, #32]	@ (8001cc0 <_sbrk+0x64>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ca2:	4b07      	ldr	r3, [pc, #28]	@ (8001cc0 <_sbrk+0x64>)
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4413      	add	r3, r2
 8001caa:	4a05      	ldr	r2, [pc, #20]	@ (8001cc0 <_sbrk+0x64>)
 8001cac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cae:	68fb      	ldr	r3, [r7, #12]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3718      	adds	r7, #24
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	20020000 	.word	0x20020000
 8001cbc:	00000400 	.word	0x00000400
 8001cc0:	20000274 	.word	0x20000274
 8001cc4:	200003c8 	.word	0x200003c8

08001cc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ccc:	4b06      	ldr	r3, [pc, #24]	@ (8001ce8 <SystemInit+0x20>)
 8001cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cd2:	4a05      	ldr	r2, [pc, #20]	@ (8001ce8 <SystemInit+0x20>)
 8001cd4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001cd8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cdc:	bf00      	nop
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	e000ed00 	.word	0xe000ed00

08001cec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001cec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d24 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001cf0:	f7ff ffea 	bl	8001cc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cf4:	480c      	ldr	r0, [pc, #48]	@ (8001d28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cf6:	490d      	ldr	r1, [pc, #52]	@ (8001d2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cf8:	4a0d      	ldr	r2, [pc, #52]	@ (8001d30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cfc:	e002      	b.n	8001d04 <LoopCopyDataInit>

08001cfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d02:	3304      	adds	r3, #4

08001d04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d08:	d3f9      	bcc.n	8001cfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d0c:	4c0a      	ldr	r4, [pc, #40]	@ (8001d38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d10:	e001      	b.n	8001d16 <LoopFillZerobss>

08001d12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d14:	3204      	adds	r2, #4

08001d16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d18:	d3fb      	bcc.n	8001d12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d1a:	f002 fded 	bl	80048f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d1e:	f7ff fdc5 	bl	80018ac <main>
  bx  lr    
 8001d22:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d2c:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8001d30:	0800691c 	.word	0x0800691c
  ldr r2, =_sbss
 8001d34:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 8001d38:	200003c8 	.word	0x200003c8

08001d3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d3c:	e7fe      	b.n	8001d3c <ADC_IRQHandler>
	...

08001d40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d44:	4b0e      	ldr	r3, [pc, #56]	@ (8001d80 <HAL_Init+0x40>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a0d      	ldr	r2, [pc, #52]	@ (8001d80 <HAL_Init+0x40>)
 8001d4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d50:	4b0b      	ldr	r3, [pc, #44]	@ (8001d80 <HAL_Init+0x40>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a0a      	ldr	r2, [pc, #40]	@ (8001d80 <HAL_Init+0x40>)
 8001d56:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d5c:	4b08      	ldr	r3, [pc, #32]	@ (8001d80 <HAL_Init+0x40>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a07      	ldr	r2, [pc, #28]	@ (8001d80 <HAL_Init+0x40>)
 8001d62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d68:	2003      	movs	r0, #3
 8001d6a:	f000 f931 	bl	8001fd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d6e:	200f      	movs	r0, #15
 8001d70:	f000 f808 	bl	8001d84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d74:	f7ff fe5e 	bl	8001a34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40023c00 	.word	0x40023c00

08001d84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d8c:	4b12      	ldr	r3, [pc, #72]	@ (8001dd8 <HAL_InitTick+0x54>)
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	4b12      	ldr	r3, [pc, #72]	@ (8001ddc <HAL_InitTick+0x58>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	4619      	mov	r1, r3
 8001d96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da2:	4618      	mov	r0, r3
 8001da4:	f000 f93b 	bl	800201e <HAL_SYSTICK_Config>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e00e      	b.n	8001dd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2b0f      	cmp	r3, #15
 8001db6:	d80a      	bhi.n	8001dce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001db8:	2200      	movs	r2, #0
 8001dba:	6879      	ldr	r1, [r7, #4]
 8001dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc0:	f000 f911 	bl	8001fe6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dc4:	4a06      	ldr	r2, [pc, #24]	@ (8001de0 <HAL_InitTick+0x5c>)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	e000      	b.n	8001dd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3708      	adds	r7, #8
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	20000030 	.word	0x20000030
 8001ddc:	20000038 	.word	0x20000038
 8001de0:	20000034 	.word	0x20000034

08001de4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001de8:	4b06      	ldr	r3, [pc, #24]	@ (8001e04 <HAL_IncTick+0x20>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	461a      	mov	r2, r3
 8001dee:	4b06      	ldr	r3, [pc, #24]	@ (8001e08 <HAL_IncTick+0x24>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4413      	add	r3, r2
 8001df4:	4a04      	ldr	r2, [pc, #16]	@ (8001e08 <HAL_IncTick+0x24>)
 8001df6:	6013      	str	r3, [r2, #0]
}
 8001df8:	bf00      	nop
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	20000038 	.word	0x20000038
 8001e08:	20000278 	.word	0x20000278

08001e0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e10:	4b03      	ldr	r3, [pc, #12]	@ (8001e20 <HAL_GetTick+0x14>)
 8001e12:	681b      	ldr	r3, [r3, #0]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	20000278 	.word	0x20000278

08001e24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e2c:	f7ff ffee 	bl	8001e0c <HAL_GetTick>
 8001e30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e3c:	d005      	beq.n	8001e4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e68 <HAL_Delay+0x44>)
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	461a      	mov	r2, r3
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	4413      	add	r3, r2
 8001e48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e4a:	bf00      	nop
 8001e4c:	f7ff ffde 	bl	8001e0c <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d8f7      	bhi.n	8001e4c <HAL_Delay+0x28>
  {
  }
}
 8001e5c:	bf00      	nop
 8001e5e:	bf00      	nop
 8001e60:	3710      	adds	r7, #16
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	20000038 	.word	0x20000038

08001e6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f003 0307 	and.w	r3, r3, #7
 8001e7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e82:	68ba      	ldr	r2, [r7, #8]
 8001e84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e88:	4013      	ands	r3, r2
 8001e8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e9e:	4a04      	ldr	r2, [pc, #16]	@ (8001eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	60d3      	str	r3, [r2, #12]
}
 8001ea4:	bf00      	nop
 8001ea6:	3714      	adds	r7, #20
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	e000ed00 	.word	0xe000ed00

08001eb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eb8:	4b04      	ldr	r3, [pc, #16]	@ (8001ecc <__NVIC_GetPriorityGrouping+0x18>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	0a1b      	lsrs	r3, r3, #8
 8001ebe:	f003 0307 	and.w	r3, r3, #7
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr
 8001ecc:	e000ed00 	.word	0xe000ed00

08001ed0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	6039      	str	r1, [r7, #0]
 8001eda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	db0a      	blt.n	8001efa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	b2da      	uxtb	r2, r3
 8001ee8:	490c      	ldr	r1, [pc, #48]	@ (8001f1c <__NVIC_SetPriority+0x4c>)
 8001eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eee:	0112      	lsls	r2, r2, #4
 8001ef0:	b2d2      	uxtb	r2, r2
 8001ef2:	440b      	add	r3, r1
 8001ef4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ef8:	e00a      	b.n	8001f10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	b2da      	uxtb	r2, r3
 8001efe:	4908      	ldr	r1, [pc, #32]	@ (8001f20 <__NVIC_SetPriority+0x50>)
 8001f00:	79fb      	ldrb	r3, [r7, #7]
 8001f02:	f003 030f 	and.w	r3, r3, #15
 8001f06:	3b04      	subs	r3, #4
 8001f08:	0112      	lsls	r2, r2, #4
 8001f0a:	b2d2      	uxtb	r2, r2
 8001f0c:	440b      	add	r3, r1
 8001f0e:	761a      	strb	r2, [r3, #24]
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	e000e100 	.word	0xe000e100
 8001f20:	e000ed00 	.word	0xe000ed00

08001f24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b089      	sub	sp, #36	@ 0x24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f003 0307 	and.w	r3, r3, #7
 8001f36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	f1c3 0307 	rsb	r3, r3, #7
 8001f3e:	2b04      	cmp	r3, #4
 8001f40:	bf28      	it	cs
 8001f42:	2304      	movcs	r3, #4
 8001f44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	3304      	adds	r3, #4
 8001f4a:	2b06      	cmp	r3, #6
 8001f4c:	d902      	bls.n	8001f54 <NVIC_EncodePriority+0x30>
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	3b03      	subs	r3, #3
 8001f52:	e000      	b.n	8001f56 <NVIC_EncodePriority+0x32>
 8001f54:	2300      	movs	r3, #0
 8001f56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f58:	f04f 32ff 	mov.w	r2, #4294967295
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	43da      	mvns	r2, r3
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	401a      	ands	r2, r3
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	fa01 f303 	lsl.w	r3, r1, r3
 8001f76:	43d9      	mvns	r1, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f7c:	4313      	orrs	r3, r2
         );
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3724      	adds	r7, #36	@ 0x24
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
	...

08001f8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3b01      	subs	r3, #1
 8001f98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f9c:	d301      	bcc.n	8001fa2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e00f      	b.n	8001fc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fa2:	4a0a      	ldr	r2, [pc, #40]	@ (8001fcc <SysTick_Config+0x40>)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001faa:	210f      	movs	r1, #15
 8001fac:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb0:	f7ff ff8e 	bl	8001ed0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fb4:	4b05      	ldr	r3, [pc, #20]	@ (8001fcc <SysTick_Config+0x40>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fba:	4b04      	ldr	r3, [pc, #16]	@ (8001fcc <SysTick_Config+0x40>)
 8001fbc:	2207      	movs	r2, #7
 8001fbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	e000e010 	.word	0xe000e010

08001fd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f7ff ff47 	bl	8001e6c <__NVIC_SetPriorityGrouping>
}
 8001fde:	bf00      	nop
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b086      	sub	sp, #24
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	4603      	mov	r3, r0
 8001fee:	60b9      	str	r1, [r7, #8]
 8001ff0:	607a      	str	r2, [r7, #4]
 8001ff2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ff8:	f7ff ff5c 	bl	8001eb4 <__NVIC_GetPriorityGrouping>
 8001ffc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	68b9      	ldr	r1, [r7, #8]
 8002002:	6978      	ldr	r0, [r7, #20]
 8002004:	f7ff ff8e 	bl	8001f24 <NVIC_EncodePriority>
 8002008:	4602      	mov	r2, r0
 800200a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800200e:	4611      	mov	r1, r2
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff ff5d 	bl	8001ed0 <__NVIC_SetPriority>
}
 8002016:	bf00      	nop
 8002018:	3718      	adds	r7, #24
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b082      	sub	sp, #8
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f7ff ffb0 	bl	8001f8c <SysTick_Config>
 800202c:	4603      	mov	r3, r0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
	...

08002038 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002038:	b480      	push	{r7}
 800203a:	b089      	sub	sp, #36	@ 0x24
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002042:	2300      	movs	r3, #0
 8002044:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002046:	2300      	movs	r3, #0
 8002048:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800204a:	2300      	movs	r3, #0
 800204c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800204e:	2300      	movs	r3, #0
 8002050:	61fb      	str	r3, [r7, #28]
 8002052:	e16b      	b.n	800232c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002054:	2201      	movs	r2, #1
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	697a      	ldr	r2, [r7, #20]
 8002064:	4013      	ands	r3, r2
 8002066:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002068:	693a      	ldr	r2, [r7, #16]
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	429a      	cmp	r2, r3
 800206e:	f040 815a 	bne.w	8002326 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f003 0303 	and.w	r3, r3, #3
 800207a:	2b01      	cmp	r3, #1
 800207c:	d005      	beq.n	800208a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002086:	2b02      	cmp	r3, #2
 8002088:	d130      	bne.n	80020ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	2203      	movs	r2, #3
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	43db      	mvns	r3, r3
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	4013      	ands	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	68da      	ldr	r2, [r3, #12]
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020c0:	2201      	movs	r2, #1
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	43db      	mvns	r3, r3
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	4013      	ands	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	091b      	lsrs	r3, r3, #4
 80020d6:	f003 0201 	and.w	r2, r3, #1
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f003 0303 	and.w	r3, r3, #3
 80020f4:	2b03      	cmp	r3, #3
 80020f6:	d017      	beq.n	8002128 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	2203      	movs	r2, #3
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	43db      	mvns	r3, r3
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	4013      	ands	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	689a      	ldr	r2, [r3, #8]
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4313      	orrs	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f003 0303 	and.w	r3, r3, #3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d123      	bne.n	800217c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	08da      	lsrs	r2, r3, #3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	3208      	adds	r2, #8
 800213c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002140:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	f003 0307 	and.w	r3, r3, #7
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	220f      	movs	r2, #15
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	43db      	mvns	r3, r3
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	4013      	ands	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	691a      	ldr	r2, [r3, #16]
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	f003 0307 	and.w	r3, r3, #7
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	4313      	orrs	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	08da      	lsrs	r2, r3, #3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	3208      	adds	r2, #8
 8002176:	69b9      	ldr	r1, [r7, #24]
 8002178:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	2203      	movs	r2, #3
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	43db      	mvns	r3, r3
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	4013      	ands	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f003 0203 	and.w	r2, r3, #3
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f000 80b4 	beq.w	8002326 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	60fb      	str	r3, [r7, #12]
 80021c2:	4b60      	ldr	r3, [pc, #384]	@ (8002344 <HAL_GPIO_Init+0x30c>)
 80021c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021c6:	4a5f      	ldr	r2, [pc, #380]	@ (8002344 <HAL_GPIO_Init+0x30c>)
 80021c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80021ce:	4b5d      	ldr	r3, [pc, #372]	@ (8002344 <HAL_GPIO_Init+0x30c>)
 80021d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021da:	4a5b      	ldr	r2, [pc, #364]	@ (8002348 <HAL_GPIO_Init+0x310>)
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	089b      	lsrs	r3, r3, #2
 80021e0:	3302      	adds	r3, #2
 80021e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	f003 0303 	and.w	r3, r3, #3
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	220f      	movs	r2, #15
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	43db      	mvns	r3, r3
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4013      	ands	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a52      	ldr	r2, [pc, #328]	@ (800234c <HAL_GPIO_Init+0x314>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d02b      	beq.n	800225e <HAL_GPIO_Init+0x226>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a51      	ldr	r2, [pc, #324]	@ (8002350 <HAL_GPIO_Init+0x318>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d025      	beq.n	800225a <HAL_GPIO_Init+0x222>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a50      	ldr	r2, [pc, #320]	@ (8002354 <HAL_GPIO_Init+0x31c>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d01f      	beq.n	8002256 <HAL_GPIO_Init+0x21e>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a4f      	ldr	r2, [pc, #316]	@ (8002358 <HAL_GPIO_Init+0x320>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d019      	beq.n	8002252 <HAL_GPIO_Init+0x21a>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a4e      	ldr	r2, [pc, #312]	@ (800235c <HAL_GPIO_Init+0x324>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d013      	beq.n	800224e <HAL_GPIO_Init+0x216>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a4d      	ldr	r2, [pc, #308]	@ (8002360 <HAL_GPIO_Init+0x328>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d00d      	beq.n	800224a <HAL_GPIO_Init+0x212>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a4c      	ldr	r2, [pc, #304]	@ (8002364 <HAL_GPIO_Init+0x32c>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d007      	beq.n	8002246 <HAL_GPIO_Init+0x20e>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a4b      	ldr	r2, [pc, #300]	@ (8002368 <HAL_GPIO_Init+0x330>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d101      	bne.n	8002242 <HAL_GPIO_Init+0x20a>
 800223e:	2307      	movs	r3, #7
 8002240:	e00e      	b.n	8002260 <HAL_GPIO_Init+0x228>
 8002242:	2308      	movs	r3, #8
 8002244:	e00c      	b.n	8002260 <HAL_GPIO_Init+0x228>
 8002246:	2306      	movs	r3, #6
 8002248:	e00a      	b.n	8002260 <HAL_GPIO_Init+0x228>
 800224a:	2305      	movs	r3, #5
 800224c:	e008      	b.n	8002260 <HAL_GPIO_Init+0x228>
 800224e:	2304      	movs	r3, #4
 8002250:	e006      	b.n	8002260 <HAL_GPIO_Init+0x228>
 8002252:	2303      	movs	r3, #3
 8002254:	e004      	b.n	8002260 <HAL_GPIO_Init+0x228>
 8002256:	2302      	movs	r3, #2
 8002258:	e002      	b.n	8002260 <HAL_GPIO_Init+0x228>
 800225a:	2301      	movs	r3, #1
 800225c:	e000      	b.n	8002260 <HAL_GPIO_Init+0x228>
 800225e:	2300      	movs	r3, #0
 8002260:	69fa      	ldr	r2, [r7, #28]
 8002262:	f002 0203 	and.w	r2, r2, #3
 8002266:	0092      	lsls	r2, r2, #2
 8002268:	4093      	lsls	r3, r2
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4313      	orrs	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002270:	4935      	ldr	r1, [pc, #212]	@ (8002348 <HAL_GPIO_Init+0x310>)
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	089b      	lsrs	r3, r3, #2
 8002276:	3302      	adds	r3, #2
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800227e:	4b3b      	ldr	r3, [pc, #236]	@ (800236c <HAL_GPIO_Init+0x334>)
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	43db      	mvns	r3, r3
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	4013      	ands	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d003      	beq.n	80022a2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	4313      	orrs	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022a2:	4a32      	ldr	r2, [pc, #200]	@ (800236c <HAL_GPIO_Init+0x334>)
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022a8:	4b30      	ldr	r3, [pc, #192]	@ (800236c <HAL_GPIO_Init+0x334>)
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	43db      	mvns	r3, r3
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	4013      	ands	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d003      	beq.n	80022cc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022cc:	4a27      	ldr	r2, [pc, #156]	@ (800236c <HAL_GPIO_Init+0x334>)
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022d2:	4b26      	ldr	r3, [pc, #152]	@ (800236c <HAL_GPIO_Init+0x334>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	43db      	mvns	r3, r3
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	4013      	ands	r3, r2
 80022e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d003      	beq.n	80022f6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022f6:	4a1d      	ldr	r2, [pc, #116]	@ (800236c <HAL_GPIO_Init+0x334>)
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022fc:	4b1b      	ldr	r3, [pc, #108]	@ (800236c <HAL_GPIO_Init+0x334>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	43db      	mvns	r3, r3
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	4013      	ands	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d003      	beq.n	8002320 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	4313      	orrs	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002320:	4a12      	ldr	r2, [pc, #72]	@ (800236c <HAL_GPIO_Init+0x334>)
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	3301      	adds	r3, #1
 800232a:	61fb      	str	r3, [r7, #28]
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	2b0f      	cmp	r3, #15
 8002330:	f67f ae90 	bls.w	8002054 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002334:	bf00      	nop
 8002336:	bf00      	nop
 8002338:	3724      	adds	r7, #36	@ 0x24
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	40023800 	.word	0x40023800
 8002348:	40013800 	.word	0x40013800
 800234c:	40020000 	.word	0x40020000
 8002350:	40020400 	.word	0x40020400
 8002354:	40020800 	.word	0x40020800
 8002358:	40020c00 	.word	0x40020c00
 800235c:	40021000 	.word	0x40021000
 8002360:	40021400 	.word	0x40021400
 8002364:	40021800 	.word	0x40021800
 8002368:	40021c00 	.word	0x40021c00
 800236c:	40013c00 	.word	0x40013c00

08002370 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d101      	bne.n	8002382 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e12b      	b.n	80025da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b00      	cmp	r3, #0
 800238c:	d106      	bne.n	800239c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f7ff fb74 	bl	8001a84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2224      	movs	r2, #36	@ 0x24
 80023a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f022 0201 	bic.w	r2, r2, #1
 80023b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80023c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80023d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80023d4:	f001 fbf6 	bl	8003bc4 <HAL_RCC_GetPCLK1Freq>
 80023d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	4a81      	ldr	r2, [pc, #516]	@ (80025e4 <HAL_I2C_Init+0x274>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d807      	bhi.n	80023f4 <HAL_I2C_Init+0x84>
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	4a80      	ldr	r2, [pc, #512]	@ (80025e8 <HAL_I2C_Init+0x278>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	bf94      	ite	ls
 80023ec:	2301      	movls	r3, #1
 80023ee:	2300      	movhi	r3, #0
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	e006      	b.n	8002402 <HAL_I2C_Init+0x92>
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	4a7d      	ldr	r2, [pc, #500]	@ (80025ec <HAL_I2C_Init+0x27c>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	bf94      	ite	ls
 80023fc:	2301      	movls	r3, #1
 80023fe:	2300      	movhi	r3, #0
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e0e7      	b.n	80025da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	4a78      	ldr	r2, [pc, #480]	@ (80025f0 <HAL_I2C_Init+0x280>)
 800240e:	fba2 2303 	umull	r2, r3, r2, r3
 8002412:	0c9b      	lsrs	r3, r3, #18
 8002414:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	68ba      	ldr	r2, [r7, #8]
 8002426:	430a      	orrs	r2, r1
 8002428:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	6a1b      	ldr	r3, [r3, #32]
 8002430:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	4a6a      	ldr	r2, [pc, #424]	@ (80025e4 <HAL_I2C_Init+0x274>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d802      	bhi.n	8002444 <HAL_I2C_Init+0xd4>
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	3301      	adds	r3, #1
 8002442:	e009      	b.n	8002458 <HAL_I2C_Init+0xe8>
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800244a:	fb02 f303 	mul.w	r3, r2, r3
 800244e:	4a69      	ldr	r2, [pc, #420]	@ (80025f4 <HAL_I2C_Init+0x284>)
 8002450:	fba2 2303 	umull	r2, r3, r2, r3
 8002454:	099b      	lsrs	r3, r3, #6
 8002456:	3301      	adds	r3, #1
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	6812      	ldr	r2, [r2, #0]
 800245c:	430b      	orrs	r3, r1
 800245e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	69db      	ldr	r3, [r3, #28]
 8002466:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800246a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	495c      	ldr	r1, [pc, #368]	@ (80025e4 <HAL_I2C_Init+0x274>)
 8002474:	428b      	cmp	r3, r1
 8002476:	d819      	bhi.n	80024ac <HAL_I2C_Init+0x13c>
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	1e59      	subs	r1, r3, #1
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	fbb1 f3f3 	udiv	r3, r1, r3
 8002486:	1c59      	adds	r1, r3, #1
 8002488:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800248c:	400b      	ands	r3, r1
 800248e:	2b00      	cmp	r3, #0
 8002490:	d00a      	beq.n	80024a8 <HAL_I2C_Init+0x138>
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	1e59      	subs	r1, r3, #1
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	fbb1 f3f3 	udiv	r3, r1, r3
 80024a0:	3301      	adds	r3, #1
 80024a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024a6:	e051      	b.n	800254c <HAL_I2C_Init+0x1dc>
 80024a8:	2304      	movs	r3, #4
 80024aa:	e04f      	b.n	800254c <HAL_I2C_Init+0x1dc>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d111      	bne.n	80024d8 <HAL_I2C_Init+0x168>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	1e58      	subs	r0, r3, #1
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6859      	ldr	r1, [r3, #4]
 80024bc:	460b      	mov	r3, r1
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	440b      	add	r3, r1
 80024c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80024c6:	3301      	adds	r3, #1
 80024c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	bf0c      	ite	eq
 80024d0:	2301      	moveq	r3, #1
 80024d2:	2300      	movne	r3, #0
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	e012      	b.n	80024fe <HAL_I2C_Init+0x18e>
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	1e58      	subs	r0, r3, #1
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6859      	ldr	r1, [r3, #4]
 80024e0:	460b      	mov	r3, r1
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	440b      	add	r3, r1
 80024e6:	0099      	lsls	r1, r3, #2
 80024e8:	440b      	add	r3, r1
 80024ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80024ee:	3301      	adds	r3, #1
 80024f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	bf0c      	ite	eq
 80024f8:	2301      	moveq	r3, #1
 80024fa:	2300      	movne	r3, #0
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <HAL_I2C_Init+0x196>
 8002502:	2301      	movs	r3, #1
 8002504:	e022      	b.n	800254c <HAL_I2C_Init+0x1dc>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d10e      	bne.n	800252c <HAL_I2C_Init+0x1bc>
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	1e58      	subs	r0, r3, #1
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6859      	ldr	r1, [r3, #4]
 8002516:	460b      	mov	r3, r1
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	440b      	add	r3, r1
 800251c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002520:	3301      	adds	r3, #1
 8002522:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002526:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800252a:	e00f      	b.n	800254c <HAL_I2C_Init+0x1dc>
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	1e58      	subs	r0, r3, #1
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6859      	ldr	r1, [r3, #4]
 8002534:	460b      	mov	r3, r1
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	440b      	add	r3, r1
 800253a:	0099      	lsls	r1, r3, #2
 800253c:	440b      	add	r3, r1
 800253e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002542:	3301      	adds	r3, #1
 8002544:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002548:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800254c:	6879      	ldr	r1, [r7, #4]
 800254e:	6809      	ldr	r1, [r1, #0]
 8002550:	4313      	orrs	r3, r2
 8002552:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	69da      	ldr	r2, [r3, #28]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a1b      	ldr	r3, [r3, #32]
 8002566:	431a      	orrs	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	430a      	orrs	r2, r1
 800256e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800257a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	6911      	ldr	r1, [r2, #16]
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	68d2      	ldr	r2, [r2, #12]
 8002586:	4311      	orrs	r1, r2
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	6812      	ldr	r2, [r2, #0]
 800258c:	430b      	orrs	r3, r1
 800258e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	695a      	ldr	r2, [r3, #20]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	431a      	orrs	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	430a      	orrs	r2, r1
 80025aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f042 0201 	orr.w	r2, r2, #1
 80025ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2220      	movs	r2, #32
 80025c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	000186a0 	.word	0x000186a0
 80025e8:	001e847f 	.word	0x001e847f
 80025ec:	003d08ff 	.word	0x003d08ff
 80025f0:	431bde83 	.word	0x431bde83
 80025f4:	10624dd3 	.word	0x10624dd3

080025f8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b088      	sub	sp, #32
 80025fc:	af02      	add	r7, sp, #8
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	607a      	str	r2, [r7, #4]
 8002602:	461a      	mov	r2, r3
 8002604:	460b      	mov	r3, r1
 8002606:	817b      	strh	r3, [r7, #10]
 8002608:	4613      	mov	r3, r2
 800260a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800260c:	f7ff fbfe 	bl	8001e0c <HAL_GetTick>
 8002610:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b20      	cmp	r3, #32
 800261c:	f040 80e0 	bne.w	80027e0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	9300      	str	r3, [sp, #0]
 8002624:	2319      	movs	r3, #25
 8002626:	2201      	movs	r2, #1
 8002628:	4970      	ldr	r1, [pc, #448]	@ (80027ec <HAL_I2C_Master_Transmit+0x1f4>)
 800262a:	68f8      	ldr	r0, [r7, #12]
 800262c:	f000 fc64 	bl	8002ef8 <I2C_WaitOnFlagUntilTimeout>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002636:	2302      	movs	r3, #2
 8002638:	e0d3      	b.n	80027e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002640:	2b01      	cmp	r3, #1
 8002642:	d101      	bne.n	8002648 <HAL_I2C_Master_Transmit+0x50>
 8002644:	2302      	movs	r3, #2
 8002646:	e0cc      	b.n	80027e2 <HAL_I2C_Master_Transmit+0x1ea>
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	2b01      	cmp	r3, #1
 800265c:	d007      	beq.n	800266e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f042 0201 	orr.w	r2, r2, #1
 800266c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800267c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2221      	movs	r2, #33	@ 0x21
 8002682:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2210      	movs	r2, #16
 800268a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2200      	movs	r2, #0
 8002692:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	893a      	ldrh	r2, [r7, #8]
 800269e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	4a50      	ldr	r2, [pc, #320]	@ (80027f0 <HAL_I2C_Master_Transmit+0x1f8>)
 80026ae:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80026b0:	8979      	ldrh	r1, [r7, #10]
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	6a3a      	ldr	r2, [r7, #32]
 80026b6:	68f8      	ldr	r0, [r7, #12]
 80026b8:	f000 face 	bl	8002c58 <I2C_MasterRequestWrite>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e08d      	b.n	80027e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026c6:	2300      	movs	r3, #0
 80026c8:	613b      	str	r3, [r7, #16]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	695b      	ldr	r3, [r3, #20]
 80026d0:	613b      	str	r3, [r7, #16]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	613b      	str	r3, [r7, #16]
 80026da:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80026dc:	e066      	b.n	80027ac <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026de:	697a      	ldr	r2, [r7, #20]
 80026e0:	6a39      	ldr	r1, [r7, #32]
 80026e2:	68f8      	ldr	r0, [r7, #12]
 80026e4:	f000 fd22 	bl	800312c <I2C_WaitOnTXEFlagUntilTimeout>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00d      	beq.n	800270a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f2:	2b04      	cmp	r3, #4
 80026f4:	d107      	bne.n	8002706 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002704:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e06b      	b.n	80027e2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800270e:	781a      	ldrb	r2, [r3, #0]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800271a:	1c5a      	adds	r2, r3, #1
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002724:	b29b      	uxth	r3, r3
 8002726:	3b01      	subs	r3, #1
 8002728:	b29a      	uxth	r2, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002732:	3b01      	subs	r3, #1
 8002734:	b29a      	uxth	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	695b      	ldr	r3, [r3, #20]
 8002740:	f003 0304 	and.w	r3, r3, #4
 8002744:	2b04      	cmp	r3, #4
 8002746:	d11b      	bne.n	8002780 <HAL_I2C_Master_Transmit+0x188>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800274c:	2b00      	cmp	r3, #0
 800274e:	d017      	beq.n	8002780 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002754:	781a      	ldrb	r2, [r3, #0]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002760:	1c5a      	adds	r2, r3, #1
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800276a:	b29b      	uxth	r3, r3
 800276c:	3b01      	subs	r3, #1
 800276e:	b29a      	uxth	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002778:	3b01      	subs	r3, #1
 800277a:	b29a      	uxth	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002780:	697a      	ldr	r2, [r7, #20]
 8002782:	6a39      	ldr	r1, [r7, #32]
 8002784:	68f8      	ldr	r0, [r7, #12]
 8002786:	f000 fd19 	bl	80031bc <I2C_WaitOnBTFFlagUntilTimeout>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d00d      	beq.n	80027ac <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002794:	2b04      	cmp	r3, #4
 8002796:	d107      	bne.n	80027a8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027a6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e01a      	b.n	80027e2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d194      	bne.n	80026de <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2220      	movs	r2, #32
 80027c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80027dc:	2300      	movs	r3, #0
 80027de:	e000      	b.n	80027e2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80027e0:	2302      	movs	r3, #2
  }
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3718      	adds	r7, #24
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	00100002 	.word	0x00100002
 80027f0:	ffff0000 	.word	0xffff0000

080027f4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b08c      	sub	sp, #48	@ 0x30
 80027f8:	af02      	add	r7, sp, #8
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	607a      	str	r2, [r7, #4]
 80027fe:	461a      	mov	r2, r3
 8002800:	460b      	mov	r3, r1
 8002802:	817b      	strh	r3, [r7, #10]
 8002804:	4613      	mov	r3, r2
 8002806:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002808:	f7ff fb00 	bl	8001e0c <HAL_GetTick>
 800280c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b20      	cmp	r3, #32
 8002818:	f040 8217 	bne.w	8002c4a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800281c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800281e:	9300      	str	r3, [sp, #0]
 8002820:	2319      	movs	r3, #25
 8002822:	2201      	movs	r2, #1
 8002824:	497c      	ldr	r1, [pc, #496]	@ (8002a18 <HAL_I2C_Master_Receive+0x224>)
 8002826:	68f8      	ldr	r0, [r7, #12]
 8002828:	f000 fb66 	bl	8002ef8 <I2C_WaitOnFlagUntilTimeout>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002832:	2302      	movs	r3, #2
 8002834:	e20a      	b.n	8002c4c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800283c:	2b01      	cmp	r3, #1
 800283e:	d101      	bne.n	8002844 <HAL_I2C_Master_Receive+0x50>
 8002840:	2302      	movs	r3, #2
 8002842:	e203      	b.n	8002c4c <HAL_I2C_Master_Receive+0x458>
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	2b01      	cmp	r3, #1
 8002858:	d007      	beq.n	800286a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f042 0201 	orr.w	r2, r2, #1
 8002868:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002878:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2222      	movs	r2, #34	@ 0x22
 800287e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2210      	movs	r2, #16
 8002886:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2200      	movs	r2, #0
 800288e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	893a      	ldrh	r2, [r7, #8]
 800289a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	4a5c      	ldr	r2, [pc, #368]	@ (8002a1c <HAL_I2C_Master_Receive+0x228>)
 80028aa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80028ac:	8979      	ldrh	r1, [r7, #10]
 80028ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80028b2:	68f8      	ldr	r0, [r7, #12]
 80028b4:	f000 fa52 	bl	8002d5c <I2C_MasterRequestRead>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e1c4      	b.n	8002c4c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d113      	bne.n	80028f2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028ca:	2300      	movs	r3, #0
 80028cc:	623b      	str	r3, [r7, #32]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	695b      	ldr	r3, [r3, #20]
 80028d4:	623b      	str	r3, [r7, #32]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	623b      	str	r3, [r7, #32]
 80028de:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028ee:	601a      	str	r2, [r3, #0]
 80028f0:	e198      	b.n	8002c24 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d11b      	bne.n	8002932 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002908:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800290a:	2300      	movs	r3, #0
 800290c:	61fb      	str	r3, [r7, #28]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	695b      	ldr	r3, [r3, #20]
 8002914:	61fb      	str	r3, [r7, #28]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	61fb      	str	r3, [r7, #28]
 800291e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	e178      	b.n	8002c24 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002936:	2b02      	cmp	r3, #2
 8002938:	d11b      	bne.n	8002972 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002948:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002958:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800295a:	2300      	movs	r3, #0
 800295c:	61bb      	str	r3, [r7, #24]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	695b      	ldr	r3, [r3, #20]
 8002964:	61bb      	str	r3, [r7, #24]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	699b      	ldr	r3, [r3, #24]
 800296c:	61bb      	str	r3, [r7, #24]
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	e158      	b.n	8002c24 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002980:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002982:	2300      	movs	r3, #0
 8002984:	617b      	str	r3, [r7, #20]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	695b      	ldr	r3, [r3, #20]
 800298c:	617b      	str	r3, [r7, #20]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	617b      	str	r3, [r7, #20]
 8002996:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002998:	e144      	b.n	8002c24 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800299e:	2b03      	cmp	r3, #3
 80029a0:	f200 80f1 	bhi.w	8002b86 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d123      	bne.n	80029f4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029ae:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80029b0:	68f8      	ldr	r0, [r7, #12]
 80029b2:	f000 fc4b 	bl	800324c <I2C_WaitOnRXNEFlagUntilTimeout>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e145      	b.n	8002c4c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	691a      	ldr	r2, [r3, #16]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ca:	b2d2      	uxtb	r2, r2
 80029cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d2:	1c5a      	adds	r2, r3, #1
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029dc:	3b01      	subs	r3, #1
 80029de:	b29a      	uxth	r2, r3
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	3b01      	subs	r3, #1
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80029f2:	e117      	b.n	8002c24 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d14e      	bne.n	8002a9a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029fe:	9300      	str	r3, [sp, #0]
 8002a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a02:	2200      	movs	r2, #0
 8002a04:	4906      	ldr	r1, [pc, #24]	@ (8002a20 <HAL_I2C_Master_Receive+0x22c>)
 8002a06:	68f8      	ldr	r0, [r7, #12]
 8002a08:	f000 fa76 	bl	8002ef8 <I2C_WaitOnFlagUntilTimeout>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d008      	beq.n	8002a24 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e11a      	b.n	8002c4c <HAL_I2C_Master_Receive+0x458>
 8002a16:	bf00      	nop
 8002a18:	00100002 	.word	0x00100002
 8002a1c:	ffff0000 	.word	0xffff0000
 8002a20:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	691a      	ldr	r2, [r3, #16]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a3e:	b2d2      	uxtb	r2, r2
 8002a40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a46:	1c5a      	adds	r2, r3, #1
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a50:	3b01      	subs	r3, #1
 8002a52:	b29a      	uxth	r2, r3
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	691a      	ldr	r2, [r3, #16]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a70:	b2d2      	uxtb	r2, r2
 8002a72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a78:	1c5a      	adds	r2, r3, #1
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a82:	3b01      	subs	r3, #1
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	3b01      	subs	r3, #1
 8002a92:	b29a      	uxth	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002a98:	e0c4      	b.n	8002c24 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a9c:	9300      	str	r3, [sp, #0]
 8002a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	496c      	ldr	r1, [pc, #432]	@ (8002c54 <HAL_I2C_Master_Receive+0x460>)
 8002aa4:	68f8      	ldr	r0, [r7, #12]
 8002aa6:	f000 fa27 	bl	8002ef8 <I2C_WaitOnFlagUntilTimeout>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e0cb      	b.n	8002c4c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ac2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	691a      	ldr	r2, [r3, #16]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ace:	b2d2      	uxtb	r2, r2
 8002ad0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad6:	1c5a      	adds	r2, r3, #1
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ae0:	3b01      	subs	r3, #1
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	3b01      	subs	r3, #1
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af8:	9300      	str	r3, [sp, #0]
 8002afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002afc:	2200      	movs	r2, #0
 8002afe:	4955      	ldr	r1, [pc, #340]	@ (8002c54 <HAL_I2C_Master_Receive+0x460>)
 8002b00:	68f8      	ldr	r0, [r7, #12]
 8002b02:	f000 f9f9 	bl	8002ef8 <I2C_WaitOnFlagUntilTimeout>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e09d      	b.n	8002c4c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	691a      	ldr	r2, [r3, #16]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b2a:	b2d2      	uxtb	r2, r2
 8002b2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b32:	1c5a      	adds	r2, r3, #1
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	b29a      	uxth	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	b29a      	uxth	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	691a      	ldr	r2, [r3, #16]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b5c:	b2d2      	uxtb	r2, r2
 8002b5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b64:	1c5a      	adds	r2, r3, #1
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	b29a      	uxth	r2, r3
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002b84:	e04e      	b.n	8002c24 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b88:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f000 fb5e 	bl	800324c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e058      	b.n	8002c4c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	691a      	ldr	r2, [r3, #16]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba4:	b2d2      	uxtb	r2, r2
 8002ba6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bac:	1c5a      	adds	r2, r3, #1
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	f003 0304 	and.w	r3, r3, #4
 8002bd6:	2b04      	cmp	r3, #4
 8002bd8:	d124      	bne.n	8002c24 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bde:	2b03      	cmp	r3, #3
 8002be0:	d107      	bne.n	8002bf2 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bf0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	691a      	ldr	r2, [r3, #16]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bfc:	b2d2      	uxtb	r2, r2
 8002bfe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c04:	1c5a      	adds	r2, r3, #1
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	b29a      	uxth	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	3b01      	subs	r3, #1
 8002c1e:	b29a      	uxth	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f47f aeb6 	bne.w	800299a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2220      	movs	r2, #32
 8002c32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002c46:	2300      	movs	r3, #0
 8002c48:	e000      	b.n	8002c4c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002c4a:	2302      	movs	r3, #2
  }
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3728      	adds	r7, #40	@ 0x28
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	00010004 	.word	0x00010004

08002c58 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b088      	sub	sp, #32
 8002c5c:	af02      	add	r7, sp, #8
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	607a      	str	r2, [r7, #4]
 8002c62:	603b      	str	r3, [r7, #0]
 8002c64:	460b      	mov	r3, r1
 8002c66:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c6c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	2b08      	cmp	r3, #8
 8002c72:	d006      	beq.n	8002c82 <I2C_MasterRequestWrite+0x2a>
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d003      	beq.n	8002c82 <I2C_MasterRequestWrite+0x2a>
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002c80:	d108      	bne.n	8002c94 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c90:	601a      	str	r2, [r3, #0]
 8002c92:	e00b      	b.n	8002cac <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c98:	2b12      	cmp	r3, #18
 8002c9a:	d107      	bne.n	8002cac <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002caa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	9300      	str	r3, [sp, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f000 f91d 	bl	8002ef8 <I2C_WaitOnFlagUntilTimeout>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00d      	beq.n	8002ce0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002cd2:	d103      	bne.n	8002cdc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cda:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e035      	b.n	8002d4c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ce8:	d108      	bne.n	8002cfc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002cea:	897b      	ldrh	r3, [r7, #10]
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	461a      	mov	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002cf8:	611a      	str	r2, [r3, #16]
 8002cfa:	e01b      	b.n	8002d34 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002cfc:	897b      	ldrh	r3, [r7, #10]
 8002cfe:	11db      	asrs	r3, r3, #7
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	f003 0306 	and.w	r3, r3, #6
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	f063 030f 	orn	r3, r3, #15
 8002d0c:	b2da      	uxtb	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	490e      	ldr	r1, [pc, #56]	@ (8002d54 <I2C_MasterRequestWrite+0xfc>)
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f000 f966 	bl	8002fec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e010      	b.n	8002d4c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d2a:	897b      	ldrh	r3, [r7, #10]
 8002d2c:	b2da      	uxtb	r2, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	4907      	ldr	r1, [pc, #28]	@ (8002d58 <I2C_MasterRequestWrite+0x100>)
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	f000 f956 	bl	8002fec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e000      	b.n	8002d4c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3718      	adds	r7, #24
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	00010008 	.word	0x00010008
 8002d58:	00010002 	.word	0x00010002

08002d5c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b088      	sub	sp, #32
 8002d60:	af02      	add	r7, sp, #8
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	607a      	str	r2, [r7, #4]
 8002d66:	603b      	str	r3, [r7, #0]
 8002d68:	460b      	mov	r3, r1
 8002d6a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d70:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002d80:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	2b08      	cmp	r3, #8
 8002d86:	d006      	beq.n	8002d96 <I2C_MasterRequestRead+0x3a>
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d003      	beq.n	8002d96 <I2C_MasterRequestRead+0x3a>
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002d94:	d108      	bne.n	8002da8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002da4:	601a      	str	r2, [r3, #0]
 8002da6:	e00b      	b.n	8002dc0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dac:	2b11      	cmp	r3, #17
 8002dae:	d107      	bne.n	8002dc0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002dbe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	9300      	str	r3, [sp, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002dcc:	68f8      	ldr	r0, [r7, #12]
 8002dce:	f000 f893 	bl	8002ef8 <I2C_WaitOnFlagUntilTimeout>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d00d      	beq.n	8002df4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002de2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002de6:	d103      	bne.n	8002df0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002dee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e079      	b.n	8002ee8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	691b      	ldr	r3, [r3, #16]
 8002df8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002dfc:	d108      	bne.n	8002e10 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002dfe:	897b      	ldrh	r3, [r7, #10]
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	f043 0301 	orr.w	r3, r3, #1
 8002e06:	b2da      	uxtb	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	611a      	str	r2, [r3, #16]
 8002e0e:	e05f      	b.n	8002ed0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002e10:	897b      	ldrh	r3, [r7, #10]
 8002e12:	11db      	asrs	r3, r3, #7
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	f003 0306 	and.w	r3, r3, #6
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	f063 030f 	orn	r3, r3, #15
 8002e20:	b2da      	uxtb	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	4930      	ldr	r1, [pc, #192]	@ (8002ef0 <I2C_MasterRequestRead+0x194>)
 8002e2e:	68f8      	ldr	r0, [r7, #12]
 8002e30:	f000 f8dc 	bl	8002fec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e054      	b.n	8002ee8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002e3e:	897b      	ldrh	r3, [r7, #10]
 8002e40:	b2da      	uxtb	r2, r3
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	4929      	ldr	r1, [pc, #164]	@ (8002ef4 <I2C_MasterRequestRead+0x198>)
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f000 f8cc 	bl	8002fec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e044      	b.n	8002ee8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e5e:	2300      	movs	r3, #0
 8002e60:	613b      	str	r3, [r7, #16]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	695b      	ldr	r3, [r3, #20]
 8002e68:	613b      	str	r3, [r7, #16]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	613b      	str	r3, [r7, #16]
 8002e72:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e82:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	9300      	str	r3, [sp, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e90:	68f8      	ldr	r0, [r7, #12]
 8002e92:	f000 f831 	bl	8002ef8 <I2C_WaitOnFlagUntilTimeout>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d00d      	beq.n	8002eb8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ea6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002eaa:	d103      	bne.n	8002eb4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002eb2:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e017      	b.n	8002ee8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002eb8:	897b      	ldrh	r3, [r7, #10]
 8002eba:	11db      	asrs	r3, r3, #7
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	f003 0306 	and.w	r3, r3, #6
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	f063 030e 	orn	r3, r3, #14
 8002ec8:	b2da      	uxtb	r2, r3
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	4907      	ldr	r1, [pc, #28]	@ (8002ef4 <I2C_MasterRequestRead+0x198>)
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f000 f888 	bl	8002fec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e000      	b.n	8002ee8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3718      	adds	r7, #24
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	00010008 	.word	0x00010008
 8002ef4:	00010002 	.word	0x00010002

08002ef8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	603b      	str	r3, [r7, #0]
 8002f04:	4613      	mov	r3, r2
 8002f06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f08:	e048      	b.n	8002f9c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f10:	d044      	beq.n	8002f9c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f12:	f7fe ff7b 	bl	8001e0c <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	683a      	ldr	r2, [r7, #0]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d302      	bcc.n	8002f28 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d139      	bne.n	8002f9c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	0c1b      	lsrs	r3, r3, #16
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d10d      	bne.n	8002f4e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	695b      	ldr	r3, [r3, #20]
 8002f38:	43da      	mvns	r2, r3
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	bf0c      	ite	eq
 8002f44:	2301      	moveq	r3, #1
 8002f46:	2300      	movne	r3, #0
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	e00c      	b.n	8002f68 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	43da      	mvns	r2, r3
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	bf0c      	ite	eq
 8002f60:	2301      	moveq	r3, #1
 8002f62:	2300      	movne	r3, #0
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	461a      	mov	r2, r3
 8002f68:	79fb      	ldrb	r3, [r7, #7]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d116      	bne.n	8002f9c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2200      	movs	r2, #0
 8002f72:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2220      	movs	r2, #32
 8002f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f88:	f043 0220 	orr.w	r2, r3, #32
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e023      	b.n	8002fe4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	0c1b      	lsrs	r3, r3, #16
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d10d      	bne.n	8002fc2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	695b      	ldr	r3, [r3, #20]
 8002fac:	43da      	mvns	r2, r3
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	bf0c      	ite	eq
 8002fb8:	2301      	moveq	r3, #1
 8002fba:	2300      	movne	r3, #0
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	e00c      	b.n	8002fdc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	43da      	mvns	r2, r3
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	bf0c      	ite	eq
 8002fd4:	2301      	moveq	r3, #1
 8002fd6:	2300      	movne	r3, #0
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	461a      	mov	r2, r3
 8002fdc:	79fb      	ldrb	r3, [r7, #7]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d093      	beq.n	8002f0a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3710      	adds	r7, #16
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607a      	str	r2, [r7, #4]
 8002ff8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ffa:	e071      	b.n	80030e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003006:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800300a:	d123      	bne.n	8003054 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800301a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003024:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2200      	movs	r2, #0
 800302a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2220      	movs	r2, #32
 8003030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003040:	f043 0204 	orr.w	r2, r3, #4
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e067      	b.n	8003124 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800305a:	d041      	beq.n	80030e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800305c:	f7fe fed6 	bl	8001e0c <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	429a      	cmp	r2, r3
 800306a:	d302      	bcc.n	8003072 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d136      	bne.n	80030e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	0c1b      	lsrs	r3, r3, #16
 8003076:	b2db      	uxtb	r3, r3
 8003078:	2b01      	cmp	r3, #1
 800307a:	d10c      	bne.n	8003096 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	43da      	mvns	r2, r3
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	4013      	ands	r3, r2
 8003088:	b29b      	uxth	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	bf14      	ite	ne
 800308e:	2301      	movne	r3, #1
 8003090:	2300      	moveq	r3, #0
 8003092:	b2db      	uxtb	r3, r3
 8003094:	e00b      	b.n	80030ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	43da      	mvns	r2, r3
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	4013      	ands	r3, r2
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	bf14      	ite	ne
 80030a8:	2301      	movne	r3, #1
 80030aa:	2300      	moveq	r3, #0
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d016      	beq.n	80030e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2220      	movs	r2, #32
 80030bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030cc:	f043 0220 	orr.w	r2, r3, #32
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e021      	b.n	8003124 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	0c1b      	lsrs	r3, r3, #16
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d10c      	bne.n	8003104 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	695b      	ldr	r3, [r3, #20]
 80030f0:	43da      	mvns	r2, r3
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	4013      	ands	r3, r2
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	bf14      	ite	ne
 80030fc:	2301      	movne	r3, #1
 80030fe:	2300      	moveq	r3, #0
 8003100:	b2db      	uxtb	r3, r3
 8003102:	e00b      	b.n	800311c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	43da      	mvns	r2, r3
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	4013      	ands	r3, r2
 8003110:	b29b      	uxth	r3, r3
 8003112:	2b00      	cmp	r3, #0
 8003114:	bf14      	ite	ne
 8003116:	2301      	movne	r3, #1
 8003118:	2300      	moveq	r3, #0
 800311a:	b2db      	uxtb	r3, r3
 800311c:	2b00      	cmp	r3, #0
 800311e:	f47f af6d 	bne.w	8002ffc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003138:	e034      	b.n	80031a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f000 f8e3 	bl	8003306 <I2C_IsAcknowledgeFailed>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e034      	b.n	80031b4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003150:	d028      	beq.n	80031a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003152:	f7fe fe5b 	bl	8001e0c <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	68ba      	ldr	r2, [r7, #8]
 800315e:	429a      	cmp	r2, r3
 8003160:	d302      	bcc.n	8003168 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d11d      	bne.n	80031a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003172:	2b80      	cmp	r3, #128	@ 0x80
 8003174:	d016      	beq.n	80031a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2220      	movs	r2, #32
 8003180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003190:	f043 0220 	orr.w	r2, r3, #32
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e007      	b.n	80031b4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031ae:	2b80      	cmp	r3, #128	@ 0x80
 80031b0:	d1c3      	bne.n	800313a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3710      	adds	r7, #16
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031c8:	e034      	b.n	8003234 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031ca:	68f8      	ldr	r0, [r7, #12]
 80031cc:	f000 f89b 	bl	8003306 <I2C_IsAcknowledgeFailed>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e034      	b.n	8003244 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e0:	d028      	beq.n	8003234 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031e2:	f7fe fe13 	bl	8001e0c <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	68ba      	ldr	r2, [r7, #8]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d302      	bcc.n	80031f8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d11d      	bne.n	8003234 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	f003 0304 	and.w	r3, r3, #4
 8003202:	2b04      	cmp	r3, #4
 8003204:	d016      	beq.n	8003234 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2200      	movs	r2, #0
 800320a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2220      	movs	r2, #32
 8003210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003220:	f043 0220 	orr.w	r2, r3, #32
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e007      	b.n	8003244 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	695b      	ldr	r3, [r3, #20]
 800323a:	f003 0304 	and.w	r3, r3, #4
 800323e:	2b04      	cmp	r3, #4
 8003240:	d1c3      	bne.n	80031ca <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003242:	2300      	movs	r3, #0
}
 8003244:	4618      	mov	r0, r3
 8003246:	3710      	adds	r7, #16
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003258:	e049      	b.n	80032ee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	695b      	ldr	r3, [r3, #20]
 8003260:	f003 0310 	and.w	r3, r3, #16
 8003264:	2b10      	cmp	r3, #16
 8003266:	d119      	bne.n	800329c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f06f 0210 	mvn.w	r2, #16
 8003270:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2200      	movs	r2, #0
 8003276:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2220      	movs	r2, #32
 800327c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e030      	b.n	80032fe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800329c:	f7fe fdb6 	bl	8001e0c <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	68ba      	ldr	r2, [r7, #8]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d302      	bcc.n	80032b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d11d      	bne.n	80032ee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	695b      	ldr	r3, [r3, #20]
 80032b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032bc:	2b40      	cmp	r3, #64	@ 0x40
 80032be:	d016      	beq.n	80032ee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2220      	movs	r2, #32
 80032ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032da:	f043 0220 	orr.w	r2, r3, #32
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e007      	b.n	80032fe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	695b      	ldr	r3, [r3, #20]
 80032f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032f8:	2b40      	cmp	r3, #64	@ 0x40
 80032fa:	d1ae      	bne.n	800325a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003306:	b480      	push	{r7}
 8003308:	b083      	sub	sp, #12
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	695b      	ldr	r3, [r3, #20]
 8003314:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003318:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800331c:	d11b      	bne.n	8003356 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003326:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2220      	movs	r2, #32
 8003332:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003342:	f043 0204 	orr.w	r2, r3, #4
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e000      	b.n	8003358 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003356:	2300      	movs	r3, #0
}
 8003358:	4618      	mov	r0, r3
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b086      	sub	sp, #24
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e267      	b.n	8003846 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0301 	and.w	r3, r3, #1
 800337e:	2b00      	cmp	r3, #0
 8003380:	d075      	beq.n	800346e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003382:	4b88      	ldr	r3, [pc, #544]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f003 030c 	and.w	r3, r3, #12
 800338a:	2b04      	cmp	r3, #4
 800338c:	d00c      	beq.n	80033a8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800338e:	4b85      	ldr	r3, [pc, #532]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003396:	2b08      	cmp	r3, #8
 8003398:	d112      	bne.n	80033c0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800339a:	4b82      	ldr	r3, [pc, #520]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033a6:	d10b      	bne.n	80033c0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033a8:	4b7e      	ldr	r3, [pc, #504]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d05b      	beq.n	800346c <HAL_RCC_OscConfig+0x108>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d157      	bne.n	800346c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e242      	b.n	8003846 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033c8:	d106      	bne.n	80033d8 <HAL_RCC_OscConfig+0x74>
 80033ca:	4b76      	ldr	r3, [pc, #472]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a75      	ldr	r2, [pc, #468]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 80033d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033d4:	6013      	str	r3, [r2, #0]
 80033d6:	e01d      	b.n	8003414 <HAL_RCC_OscConfig+0xb0>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033e0:	d10c      	bne.n	80033fc <HAL_RCC_OscConfig+0x98>
 80033e2:	4b70      	ldr	r3, [pc, #448]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a6f      	ldr	r2, [pc, #444]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 80033e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033ec:	6013      	str	r3, [r2, #0]
 80033ee:	4b6d      	ldr	r3, [pc, #436]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a6c      	ldr	r2, [pc, #432]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 80033f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033f8:	6013      	str	r3, [r2, #0]
 80033fa:	e00b      	b.n	8003414 <HAL_RCC_OscConfig+0xb0>
 80033fc:	4b69      	ldr	r3, [pc, #420]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a68      	ldr	r2, [pc, #416]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 8003402:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003406:	6013      	str	r3, [r2, #0]
 8003408:	4b66      	ldr	r3, [pc, #408]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a65      	ldr	r2, [pc, #404]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 800340e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003412:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d013      	beq.n	8003444 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800341c:	f7fe fcf6 	bl	8001e0c <HAL_GetTick>
 8003420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003422:	e008      	b.n	8003436 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003424:	f7fe fcf2 	bl	8001e0c <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b64      	cmp	r3, #100	@ 0x64
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e207      	b.n	8003846 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003436:	4b5b      	ldr	r3, [pc, #364]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d0f0      	beq.n	8003424 <HAL_RCC_OscConfig+0xc0>
 8003442:	e014      	b.n	800346e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003444:	f7fe fce2 	bl	8001e0c <HAL_GetTick>
 8003448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800344a:	e008      	b.n	800345e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800344c:	f7fe fcde 	bl	8001e0c <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b64      	cmp	r3, #100	@ 0x64
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e1f3      	b.n	8003846 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800345e:	4b51      	ldr	r3, [pc, #324]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1f0      	bne.n	800344c <HAL_RCC_OscConfig+0xe8>
 800346a:	e000      	b.n	800346e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800346c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d063      	beq.n	8003542 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800347a:	4b4a      	ldr	r3, [pc, #296]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f003 030c 	and.w	r3, r3, #12
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00b      	beq.n	800349e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003486:	4b47      	ldr	r3, [pc, #284]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800348e:	2b08      	cmp	r3, #8
 8003490:	d11c      	bne.n	80034cc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003492:	4b44      	ldr	r3, [pc, #272]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d116      	bne.n	80034cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800349e:	4b41      	ldr	r3, [pc, #260]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d005      	beq.n	80034b6 <HAL_RCC_OscConfig+0x152>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d001      	beq.n	80034b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e1c7      	b.n	8003846 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034b6:	4b3b      	ldr	r3, [pc, #236]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	00db      	lsls	r3, r3, #3
 80034c4:	4937      	ldr	r1, [pc, #220]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ca:	e03a      	b.n	8003542 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d020      	beq.n	8003516 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034d4:	4b34      	ldr	r3, [pc, #208]	@ (80035a8 <HAL_RCC_OscConfig+0x244>)
 80034d6:	2201      	movs	r2, #1
 80034d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034da:	f7fe fc97 	bl	8001e0c <HAL_GetTick>
 80034de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034e0:	e008      	b.n	80034f4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034e2:	f7fe fc93 	bl	8001e0c <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d901      	bls.n	80034f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e1a8      	b.n	8003846 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034f4:	4b2b      	ldr	r3, [pc, #172]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d0f0      	beq.n	80034e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003500:	4b28      	ldr	r3, [pc, #160]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	00db      	lsls	r3, r3, #3
 800350e:	4925      	ldr	r1, [pc, #148]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 8003510:	4313      	orrs	r3, r2
 8003512:	600b      	str	r3, [r1, #0]
 8003514:	e015      	b.n	8003542 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003516:	4b24      	ldr	r3, [pc, #144]	@ (80035a8 <HAL_RCC_OscConfig+0x244>)
 8003518:	2200      	movs	r2, #0
 800351a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800351c:	f7fe fc76 	bl	8001e0c <HAL_GetTick>
 8003520:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003522:	e008      	b.n	8003536 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003524:	f7fe fc72 	bl	8001e0c <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b02      	cmp	r3, #2
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e187      	b.n	8003846 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003536:	4b1b      	ldr	r3, [pc, #108]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1f0      	bne.n	8003524 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0308 	and.w	r3, r3, #8
 800354a:	2b00      	cmp	r3, #0
 800354c:	d036      	beq.n	80035bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	695b      	ldr	r3, [r3, #20]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d016      	beq.n	8003584 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003556:	4b15      	ldr	r3, [pc, #84]	@ (80035ac <HAL_RCC_OscConfig+0x248>)
 8003558:	2201      	movs	r2, #1
 800355a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800355c:	f7fe fc56 	bl	8001e0c <HAL_GetTick>
 8003560:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003562:	e008      	b.n	8003576 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003564:	f7fe fc52 	bl	8001e0c <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b02      	cmp	r3, #2
 8003570:	d901      	bls.n	8003576 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e167      	b.n	8003846 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003576:	4b0b      	ldr	r3, [pc, #44]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 8003578:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800357a:	f003 0302 	and.w	r3, r3, #2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d0f0      	beq.n	8003564 <HAL_RCC_OscConfig+0x200>
 8003582:	e01b      	b.n	80035bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003584:	4b09      	ldr	r3, [pc, #36]	@ (80035ac <HAL_RCC_OscConfig+0x248>)
 8003586:	2200      	movs	r2, #0
 8003588:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800358a:	f7fe fc3f 	bl	8001e0c <HAL_GetTick>
 800358e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003590:	e00e      	b.n	80035b0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003592:	f7fe fc3b 	bl	8001e0c <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	2b02      	cmp	r3, #2
 800359e:	d907      	bls.n	80035b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e150      	b.n	8003846 <HAL_RCC_OscConfig+0x4e2>
 80035a4:	40023800 	.word	0x40023800
 80035a8:	42470000 	.word	0x42470000
 80035ac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035b0:	4b88      	ldr	r3, [pc, #544]	@ (80037d4 <HAL_RCC_OscConfig+0x470>)
 80035b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035b4:	f003 0302 	and.w	r3, r3, #2
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d1ea      	bne.n	8003592 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0304 	and.w	r3, r3, #4
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f000 8097 	beq.w	80036f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035ca:	2300      	movs	r3, #0
 80035cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035ce:	4b81      	ldr	r3, [pc, #516]	@ (80037d4 <HAL_RCC_OscConfig+0x470>)
 80035d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d10f      	bne.n	80035fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035da:	2300      	movs	r3, #0
 80035dc:	60bb      	str	r3, [r7, #8]
 80035de:	4b7d      	ldr	r3, [pc, #500]	@ (80037d4 <HAL_RCC_OscConfig+0x470>)
 80035e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e2:	4a7c      	ldr	r2, [pc, #496]	@ (80037d4 <HAL_RCC_OscConfig+0x470>)
 80035e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80035ea:	4b7a      	ldr	r3, [pc, #488]	@ (80037d4 <HAL_RCC_OscConfig+0x470>)
 80035ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035f2:	60bb      	str	r3, [r7, #8]
 80035f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035f6:	2301      	movs	r3, #1
 80035f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035fa:	4b77      	ldr	r3, [pc, #476]	@ (80037d8 <HAL_RCC_OscConfig+0x474>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003602:	2b00      	cmp	r3, #0
 8003604:	d118      	bne.n	8003638 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003606:	4b74      	ldr	r3, [pc, #464]	@ (80037d8 <HAL_RCC_OscConfig+0x474>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a73      	ldr	r2, [pc, #460]	@ (80037d8 <HAL_RCC_OscConfig+0x474>)
 800360c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003610:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003612:	f7fe fbfb 	bl	8001e0c <HAL_GetTick>
 8003616:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003618:	e008      	b.n	800362c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800361a:	f7fe fbf7 	bl	8001e0c <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	2b02      	cmp	r3, #2
 8003626:	d901      	bls.n	800362c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e10c      	b.n	8003846 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800362c:	4b6a      	ldr	r3, [pc, #424]	@ (80037d8 <HAL_RCC_OscConfig+0x474>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003634:	2b00      	cmp	r3, #0
 8003636:	d0f0      	beq.n	800361a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d106      	bne.n	800364e <HAL_RCC_OscConfig+0x2ea>
 8003640:	4b64      	ldr	r3, [pc, #400]	@ (80037d4 <HAL_RCC_OscConfig+0x470>)
 8003642:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003644:	4a63      	ldr	r2, [pc, #396]	@ (80037d4 <HAL_RCC_OscConfig+0x470>)
 8003646:	f043 0301 	orr.w	r3, r3, #1
 800364a:	6713      	str	r3, [r2, #112]	@ 0x70
 800364c:	e01c      	b.n	8003688 <HAL_RCC_OscConfig+0x324>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	2b05      	cmp	r3, #5
 8003654:	d10c      	bne.n	8003670 <HAL_RCC_OscConfig+0x30c>
 8003656:	4b5f      	ldr	r3, [pc, #380]	@ (80037d4 <HAL_RCC_OscConfig+0x470>)
 8003658:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800365a:	4a5e      	ldr	r2, [pc, #376]	@ (80037d4 <HAL_RCC_OscConfig+0x470>)
 800365c:	f043 0304 	orr.w	r3, r3, #4
 8003660:	6713      	str	r3, [r2, #112]	@ 0x70
 8003662:	4b5c      	ldr	r3, [pc, #368]	@ (80037d4 <HAL_RCC_OscConfig+0x470>)
 8003664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003666:	4a5b      	ldr	r2, [pc, #364]	@ (80037d4 <HAL_RCC_OscConfig+0x470>)
 8003668:	f043 0301 	orr.w	r3, r3, #1
 800366c:	6713      	str	r3, [r2, #112]	@ 0x70
 800366e:	e00b      	b.n	8003688 <HAL_RCC_OscConfig+0x324>
 8003670:	4b58      	ldr	r3, [pc, #352]	@ (80037d4 <HAL_RCC_OscConfig+0x470>)
 8003672:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003674:	4a57      	ldr	r2, [pc, #348]	@ (80037d4 <HAL_RCC_OscConfig+0x470>)
 8003676:	f023 0301 	bic.w	r3, r3, #1
 800367a:	6713      	str	r3, [r2, #112]	@ 0x70
 800367c:	4b55      	ldr	r3, [pc, #340]	@ (80037d4 <HAL_RCC_OscConfig+0x470>)
 800367e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003680:	4a54      	ldr	r2, [pc, #336]	@ (80037d4 <HAL_RCC_OscConfig+0x470>)
 8003682:	f023 0304 	bic.w	r3, r3, #4
 8003686:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d015      	beq.n	80036bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003690:	f7fe fbbc 	bl	8001e0c <HAL_GetTick>
 8003694:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003696:	e00a      	b.n	80036ae <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003698:	f7fe fbb8 	bl	8001e0c <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e0cb      	b.n	8003846 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ae:	4b49      	ldr	r3, [pc, #292]	@ (80037d4 <HAL_RCC_OscConfig+0x470>)
 80036b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d0ee      	beq.n	8003698 <HAL_RCC_OscConfig+0x334>
 80036ba:	e014      	b.n	80036e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036bc:	f7fe fba6 	bl	8001e0c <HAL_GetTick>
 80036c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036c2:	e00a      	b.n	80036da <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036c4:	f7fe fba2 	bl	8001e0c <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e0b5      	b.n	8003846 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036da:	4b3e      	ldr	r3, [pc, #248]	@ (80037d4 <HAL_RCC_OscConfig+0x470>)
 80036dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1ee      	bne.n	80036c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80036e6:	7dfb      	ldrb	r3, [r7, #23]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d105      	bne.n	80036f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036ec:	4b39      	ldr	r3, [pc, #228]	@ (80037d4 <HAL_RCC_OscConfig+0x470>)
 80036ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f0:	4a38      	ldr	r2, [pc, #224]	@ (80037d4 <HAL_RCC_OscConfig+0x470>)
 80036f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036f6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	f000 80a1 	beq.w	8003844 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003702:	4b34      	ldr	r3, [pc, #208]	@ (80037d4 <HAL_RCC_OscConfig+0x470>)
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f003 030c 	and.w	r3, r3, #12
 800370a:	2b08      	cmp	r3, #8
 800370c:	d05c      	beq.n	80037c8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	2b02      	cmp	r3, #2
 8003714:	d141      	bne.n	800379a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003716:	4b31      	ldr	r3, [pc, #196]	@ (80037dc <HAL_RCC_OscConfig+0x478>)
 8003718:	2200      	movs	r2, #0
 800371a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800371c:	f7fe fb76 	bl	8001e0c <HAL_GetTick>
 8003720:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003722:	e008      	b.n	8003736 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003724:	f7fe fb72 	bl	8001e0c <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b02      	cmp	r3, #2
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e087      	b.n	8003846 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003736:	4b27      	ldr	r3, [pc, #156]	@ (80037d4 <HAL_RCC_OscConfig+0x470>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1f0      	bne.n	8003724 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	69da      	ldr	r2, [r3, #28]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a1b      	ldr	r3, [r3, #32]
 800374a:	431a      	orrs	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003750:	019b      	lsls	r3, r3, #6
 8003752:	431a      	orrs	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003758:	085b      	lsrs	r3, r3, #1
 800375a:	3b01      	subs	r3, #1
 800375c:	041b      	lsls	r3, r3, #16
 800375e:	431a      	orrs	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003764:	061b      	lsls	r3, r3, #24
 8003766:	491b      	ldr	r1, [pc, #108]	@ (80037d4 <HAL_RCC_OscConfig+0x470>)
 8003768:	4313      	orrs	r3, r2
 800376a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800376c:	4b1b      	ldr	r3, [pc, #108]	@ (80037dc <HAL_RCC_OscConfig+0x478>)
 800376e:	2201      	movs	r2, #1
 8003770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003772:	f7fe fb4b 	bl	8001e0c <HAL_GetTick>
 8003776:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003778:	e008      	b.n	800378c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800377a:	f7fe fb47 	bl	8001e0c <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	2b02      	cmp	r3, #2
 8003786:	d901      	bls.n	800378c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e05c      	b.n	8003846 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800378c:	4b11      	ldr	r3, [pc, #68]	@ (80037d4 <HAL_RCC_OscConfig+0x470>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d0f0      	beq.n	800377a <HAL_RCC_OscConfig+0x416>
 8003798:	e054      	b.n	8003844 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800379a:	4b10      	ldr	r3, [pc, #64]	@ (80037dc <HAL_RCC_OscConfig+0x478>)
 800379c:	2200      	movs	r2, #0
 800379e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a0:	f7fe fb34 	bl	8001e0c <HAL_GetTick>
 80037a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037a6:	e008      	b.n	80037ba <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037a8:	f7fe fb30 	bl	8001e0c <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e045      	b.n	8003846 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ba:	4b06      	ldr	r3, [pc, #24]	@ (80037d4 <HAL_RCC_OscConfig+0x470>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1f0      	bne.n	80037a8 <HAL_RCC_OscConfig+0x444>
 80037c6:	e03d      	b.n	8003844 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	699b      	ldr	r3, [r3, #24]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d107      	bne.n	80037e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e038      	b.n	8003846 <HAL_RCC_OscConfig+0x4e2>
 80037d4:	40023800 	.word	0x40023800
 80037d8:	40007000 	.word	0x40007000
 80037dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037e0:	4b1b      	ldr	r3, [pc, #108]	@ (8003850 <HAL_RCC_OscConfig+0x4ec>)
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d028      	beq.n	8003840 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d121      	bne.n	8003840 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003806:	429a      	cmp	r2, r3
 8003808:	d11a      	bne.n	8003840 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003810:	4013      	ands	r3, r2
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003816:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003818:	4293      	cmp	r3, r2
 800381a:	d111      	bne.n	8003840 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003826:	085b      	lsrs	r3, r3, #1
 8003828:	3b01      	subs	r3, #1
 800382a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800382c:	429a      	cmp	r2, r3
 800382e:	d107      	bne.n	8003840 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800383a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800383c:	429a      	cmp	r2, r3
 800383e:	d001      	beq.n	8003844 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e000      	b.n	8003846 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3718      	adds	r7, #24
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	40023800 	.word	0x40023800

08003854 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d101      	bne.n	8003868 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e0cc      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003868:	4b68      	ldr	r3, [pc, #416]	@ (8003a0c <HAL_RCC_ClockConfig+0x1b8>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0307 	and.w	r3, r3, #7
 8003870:	683a      	ldr	r2, [r7, #0]
 8003872:	429a      	cmp	r2, r3
 8003874:	d90c      	bls.n	8003890 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003876:	4b65      	ldr	r3, [pc, #404]	@ (8003a0c <HAL_RCC_ClockConfig+0x1b8>)
 8003878:	683a      	ldr	r2, [r7, #0]
 800387a:	b2d2      	uxtb	r2, r2
 800387c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800387e:	4b63      	ldr	r3, [pc, #396]	@ (8003a0c <HAL_RCC_ClockConfig+0x1b8>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0307 	and.w	r3, r3, #7
 8003886:	683a      	ldr	r2, [r7, #0]
 8003888:	429a      	cmp	r2, r3
 800388a:	d001      	beq.n	8003890 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e0b8      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0302 	and.w	r3, r3, #2
 8003898:	2b00      	cmp	r3, #0
 800389a:	d020      	beq.n	80038de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0304 	and.w	r3, r3, #4
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d005      	beq.n	80038b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038a8:	4b59      	ldr	r3, [pc, #356]	@ (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	4a58      	ldr	r2, [pc, #352]	@ (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80038ae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80038b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0308 	and.w	r3, r3, #8
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d005      	beq.n	80038cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038c0:	4b53      	ldr	r3, [pc, #332]	@ (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	4a52      	ldr	r2, [pc, #328]	@ (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80038c6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80038ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038cc:	4b50      	ldr	r3, [pc, #320]	@ (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	494d      	ldr	r1, [pc, #308]	@ (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d044      	beq.n	8003974 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d107      	bne.n	8003902 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038f2:	4b47      	ldr	r3, [pc, #284]	@ (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d119      	bne.n	8003932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e07f      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	2b02      	cmp	r3, #2
 8003908:	d003      	beq.n	8003912 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800390e:	2b03      	cmp	r3, #3
 8003910:	d107      	bne.n	8003922 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003912:	4b3f      	ldr	r3, [pc, #252]	@ (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d109      	bne.n	8003932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e06f      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003922:	4b3b      	ldr	r3, [pc, #236]	@ (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d101      	bne.n	8003932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e067      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003932:	4b37      	ldr	r3, [pc, #220]	@ (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f023 0203 	bic.w	r2, r3, #3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	4934      	ldr	r1, [pc, #208]	@ (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 8003940:	4313      	orrs	r3, r2
 8003942:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003944:	f7fe fa62 	bl	8001e0c <HAL_GetTick>
 8003948:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800394a:	e00a      	b.n	8003962 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800394c:	f7fe fa5e 	bl	8001e0c <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	f241 3288 	movw	r2, #5000	@ 0x1388
 800395a:	4293      	cmp	r3, r2
 800395c:	d901      	bls.n	8003962 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e04f      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003962:	4b2b      	ldr	r3, [pc, #172]	@ (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f003 020c 	and.w	r2, r3, #12
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	429a      	cmp	r2, r3
 8003972:	d1eb      	bne.n	800394c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003974:	4b25      	ldr	r3, [pc, #148]	@ (8003a0c <HAL_RCC_ClockConfig+0x1b8>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0307 	and.w	r3, r3, #7
 800397c:	683a      	ldr	r2, [r7, #0]
 800397e:	429a      	cmp	r2, r3
 8003980:	d20c      	bcs.n	800399c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003982:	4b22      	ldr	r3, [pc, #136]	@ (8003a0c <HAL_RCC_ClockConfig+0x1b8>)
 8003984:	683a      	ldr	r2, [r7, #0]
 8003986:	b2d2      	uxtb	r2, r2
 8003988:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800398a:	4b20      	ldr	r3, [pc, #128]	@ (8003a0c <HAL_RCC_ClockConfig+0x1b8>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0307 	and.w	r3, r3, #7
 8003992:	683a      	ldr	r2, [r7, #0]
 8003994:	429a      	cmp	r2, r3
 8003996:	d001      	beq.n	800399c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e032      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0304 	and.w	r3, r3, #4
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d008      	beq.n	80039ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039a8:	4b19      	ldr	r3, [pc, #100]	@ (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	4916      	ldr	r1, [pc, #88]	@ (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0308 	and.w	r3, r3, #8
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d009      	beq.n	80039da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039c6:	4b12      	ldr	r3, [pc, #72]	@ (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	00db      	lsls	r3, r3, #3
 80039d4:	490e      	ldr	r1, [pc, #56]	@ (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039da:	f000 f821 	bl	8003a20 <HAL_RCC_GetSysClockFreq>
 80039de:	4602      	mov	r2, r0
 80039e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	091b      	lsrs	r3, r3, #4
 80039e6:	f003 030f 	and.w	r3, r3, #15
 80039ea:	490a      	ldr	r1, [pc, #40]	@ (8003a14 <HAL_RCC_ClockConfig+0x1c0>)
 80039ec:	5ccb      	ldrb	r3, [r1, r3]
 80039ee:	fa22 f303 	lsr.w	r3, r2, r3
 80039f2:	4a09      	ldr	r2, [pc, #36]	@ (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 80039f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80039f6:	4b09      	ldr	r3, [pc, #36]	@ (8003a1c <HAL_RCC_ClockConfig+0x1c8>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7fe f9c2 	bl	8001d84 <HAL_InitTick>

  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	40023c00 	.word	0x40023c00
 8003a10:	40023800 	.word	0x40023800
 8003a14:	0800657c 	.word	0x0800657c
 8003a18:	20000030 	.word	0x20000030
 8003a1c:	20000034 	.word	0x20000034

08003a20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a24:	b090      	sub	sp, #64	@ 0x40
 8003a26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003a30:	2300      	movs	r3, #0
 8003a32:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003a34:	2300      	movs	r3, #0
 8003a36:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a38:	4b59      	ldr	r3, [pc, #356]	@ (8003ba0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f003 030c 	and.w	r3, r3, #12
 8003a40:	2b08      	cmp	r3, #8
 8003a42:	d00d      	beq.n	8003a60 <HAL_RCC_GetSysClockFreq+0x40>
 8003a44:	2b08      	cmp	r3, #8
 8003a46:	f200 80a1 	bhi.w	8003b8c <HAL_RCC_GetSysClockFreq+0x16c>
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d002      	beq.n	8003a54 <HAL_RCC_GetSysClockFreq+0x34>
 8003a4e:	2b04      	cmp	r3, #4
 8003a50:	d003      	beq.n	8003a5a <HAL_RCC_GetSysClockFreq+0x3a>
 8003a52:	e09b      	b.n	8003b8c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a54:	4b53      	ldr	r3, [pc, #332]	@ (8003ba4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003a56:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003a58:	e09b      	b.n	8003b92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a5a:	4b53      	ldr	r3, [pc, #332]	@ (8003ba8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a5c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003a5e:	e098      	b.n	8003b92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a60:	4b4f      	ldr	r3, [pc, #316]	@ (8003ba0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a68:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a6a:	4b4d      	ldr	r3, [pc, #308]	@ (8003ba0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d028      	beq.n	8003ac8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a76:	4b4a      	ldr	r3, [pc, #296]	@ (8003ba0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	099b      	lsrs	r3, r3, #6
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	623b      	str	r3, [r7, #32]
 8003a80:	627a      	str	r2, [r7, #36]	@ 0x24
 8003a82:	6a3b      	ldr	r3, [r7, #32]
 8003a84:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003a88:	2100      	movs	r1, #0
 8003a8a:	4b47      	ldr	r3, [pc, #284]	@ (8003ba8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a8c:	fb03 f201 	mul.w	r2, r3, r1
 8003a90:	2300      	movs	r3, #0
 8003a92:	fb00 f303 	mul.w	r3, r0, r3
 8003a96:	4413      	add	r3, r2
 8003a98:	4a43      	ldr	r2, [pc, #268]	@ (8003ba8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a9a:	fba0 1202 	umull	r1, r2, r0, r2
 8003a9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003aa0:	460a      	mov	r2, r1
 8003aa2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003aa4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003aa6:	4413      	add	r3, r2
 8003aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003aaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003aac:	2200      	movs	r2, #0
 8003aae:	61bb      	str	r3, [r7, #24]
 8003ab0:	61fa      	str	r2, [r7, #28]
 8003ab2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ab6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003aba:	f7fd f9d3 	bl	8000e64 <__aeabi_uldivmod>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ac6:	e053      	b.n	8003b70 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ac8:	4b35      	ldr	r3, [pc, #212]	@ (8003ba0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	099b      	lsrs	r3, r3, #6
 8003ace:	2200      	movs	r2, #0
 8003ad0:	613b      	str	r3, [r7, #16]
 8003ad2:	617a      	str	r2, [r7, #20]
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003ada:	f04f 0b00 	mov.w	fp, #0
 8003ade:	4652      	mov	r2, sl
 8003ae0:	465b      	mov	r3, fp
 8003ae2:	f04f 0000 	mov.w	r0, #0
 8003ae6:	f04f 0100 	mov.w	r1, #0
 8003aea:	0159      	lsls	r1, r3, #5
 8003aec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003af0:	0150      	lsls	r0, r2, #5
 8003af2:	4602      	mov	r2, r0
 8003af4:	460b      	mov	r3, r1
 8003af6:	ebb2 080a 	subs.w	r8, r2, sl
 8003afa:	eb63 090b 	sbc.w	r9, r3, fp
 8003afe:	f04f 0200 	mov.w	r2, #0
 8003b02:	f04f 0300 	mov.w	r3, #0
 8003b06:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003b0a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003b0e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003b12:	ebb2 0408 	subs.w	r4, r2, r8
 8003b16:	eb63 0509 	sbc.w	r5, r3, r9
 8003b1a:	f04f 0200 	mov.w	r2, #0
 8003b1e:	f04f 0300 	mov.w	r3, #0
 8003b22:	00eb      	lsls	r3, r5, #3
 8003b24:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b28:	00e2      	lsls	r2, r4, #3
 8003b2a:	4614      	mov	r4, r2
 8003b2c:	461d      	mov	r5, r3
 8003b2e:	eb14 030a 	adds.w	r3, r4, sl
 8003b32:	603b      	str	r3, [r7, #0]
 8003b34:	eb45 030b 	adc.w	r3, r5, fp
 8003b38:	607b      	str	r3, [r7, #4]
 8003b3a:	f04f 0200 	mov.w	r2, #0
 8003b3e:	f04f 0300 	mov.w	r3, #0
 8003b42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b46:	4629      	mov	r1, r5
 8003b48:	028b      	lsls	r3, r1, #10
 8003b4a:	4621      	mov	r1, r4
 8003b4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b50:	4621      	mov	r1, r4
 8003b52:	028a      	lsls	r2, r1, #10
 8003b54:	4610      	mov	r0, r2
 8003b56:	4619      	mov	r1, r3
 8003b58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	60bb      	str	r3, [r7, #8]
 8003b5e:	60fa      	str	r2, [r7, #12]
 8003b60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b64:	f7fd f97e 	bl	8000e64 <__aeabi_uldivmod>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003b70:	4b0b      	ldr	r3, [pc, #44]	@ (8003ba0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	0c1b      	lsrs	r3, r3, #16
 8003b76:	f003 0303 	and.w	r3, r3, #3
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	005b      	lsls	r3, r3, #1
 8003b7e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003b80:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b88:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003b8a:	e002      	b.n	8003b92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b8c:	4b05      	ldr	r3, [pc, #20]	@ (8003ba4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003b8e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003b90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3740      	adds	r7, #64	@ 0x40
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b9e:	bf00      	nop
 8003ba0:	40023800 	.word	0x40023800
 8003ba4:	00f42400 	.word	0x00f42400
 8003ba8:	017d7840 	.word	0x017d7840

08003bac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bac:	b480      	push	{r7}
 8003bae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bb0:	4b03      	ldr	r3, [pc, #12]	@ (8003bc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	20000030 	.word	0x20000030

08003bc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003bc8:	f7ff fff0 	bl	8003bac <HAL_RCC_GetHCLKFreq>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	4b05      	ldr	r3, [pc, #20]	@ (8003be4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	0a9b      	lsrs	r3, r3, #10
 8003bd4:	f003 0307 	and.w	r3, r3, #7
 8003bd8:	4903      	ldr	r1, [pc, #12]	@ (8003be8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bda:	5ccb      	ldrb	r3, [r1, r3]
 8003bdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	40023800 	.word	0x40023800
 8003be8:	0800658c 	.word	0x0800658c

08003bec <__cvt>:
 8003bec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003bf0:	ec57 6b10 	vmov	r6, r7, d0
 8003bf4:	2f00      	cmp	r7, #0
 8003bf6:	460c      	mov	r4, r1
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	463b      	mov	r3, r7
 8003bfc:	bfbb      	ittet	lt
 8003bfe:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8003c02:	461f      	movlt	r7, r3
 8003c04:	2300      	movge	r3, #0
 8003c06:	232d      	movlt	r3, #45	@ 0x2d
 8003c08:	700b      	strb	r3, [r1, #0]
 8003c0a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003c0c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8003c10:	4691      	mov	r9, r2
 8003c12:	f023 0820 	bic.w	r8, r3, #32
 8003c16:	bfbc      	itt	lt
 8003c18:	4632      	movlt	r2, r6
 8003c1a:	4616      	movlt	r6, r2
 8003c1c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003c20:	d005      	beq.n	8003c2e <__cvt+0x42>
 8003c22:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003c26:	d100      	bne.n	8003c2a <__cvt+0x3e>
 8003c28:	3401      	adds	r4, #1
 8003c2a:	2102      	movs	r1, #2
 8003c2c:	e000      	b.n	8003c30 <__cvt+0x44>
 8003c2e:	2103      	movs	r1, #3
 8003c30:	ab03      	add	r3, sp, #12
 8003c32:	9301      	str	r3, [sp, #4]
 8003c34:	ab02      	add	r3, sp, #8
 8003c36:	9300      	str	r3, [sp, #0]
 8003c38:	ec47 6b10 	vmov	d0, r6, r7
 8003c3c:	4653      	mov	r3, sl
 8003c3e:	4622      	mov	r2, r4
 8003c40:	f000 ff0a 	bl	8004a58 <_dtoa_r>
 8003c44:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003c48:	4605      	mov	r5, r0
 8003c4a:	d119      	bne.n	8003c80 <__cvt+0x94>
 8003c4c:	f019 0f01 	tst.w	r9, #1
 8003c50:	d00e      	beq.n	8003c70 <__cvt+0x84>
 8003c52:	eb00 0904 	add.w	r9, r0, r4
 8003c56:	2200      	movs	r2, #0
 8003c58:	2300      	movs	r3, #0
 8003c5a:	4630      	mov	r0, r6
 8003c5c:	4639      	mov	r1, r7
 8003c5e:	f7fc ff33 	bl	8000ac8 <__aeabi_dcmpeq>
 8003c62:	b108      	cbz	r0, 8003c68 <__cvt+0x7c>
 8003c64:	f8cd 900c 	str.w	r9, [sp, #12]
 8003c68:	2230      	movs	r2, #48	@ 0x30
 8003c6a:	9b03      	ldr	r3, [sp, #12]
 8003c6c:	454b      	cmp	r3, r9
 8003c6e:	d31e      	bcc.n	8003cae <__cvt+0xc2>
 8003c70:	9b03      	ldr	r3, [sp, #12]
 8003c72:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003c74:	1b5b      	subs	r3, r3, r5
 8003c76:	4628      	mov	r0, r5
 8003c78:	6013      	str	r3, [r2, #0]
 8003c7a:	b004      	add	sp, #16
 8003c7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c80:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003c84:	eb00 0904 	add.w	r9, r0, r4
 8003c88:	d1e5      	bne.n	8003c56 <__cvt+0x6a>
 8003c8a:	7803      	ldrb	r3, [r0, #0]
 8003c8c:	2b30      	cmp	r3, #48	@ 0x30
 8003c8e:	d10a      	bne.n	8003ca6 <__cvt+0xba>
 8003c90:	2200      	movs	r2, #0
 8003c92:	2300      	movs	r3, #0
 8003c94:	4630      	mov	r0, r6
 8003c96:	4639      	mov	r1, r7
 8003c98:	f7fc ff16 	bl	8000ac8 <__aeabi_dcmpeq>
 8003c9c:	b918      	cbnz	r0, 8003ca6 <__cvt+0xba>
 8003c9e:	f1c4 0401 	rsb	r4, r4, #1
 8003ca2:	f8ca 4000 	str.w	r4, [sl]
 8003ca6:	f8da 3000 	ldr.w	r3, [sl]
 8003caa:	4499      	add	r9, r3
 8003cac:	e7d3      	b.n	8003c56 <__cvt+0x6a>
 8003cae:	1c59      	adds	r1, r3, #1
 8003cb0:	9103      	str	r1, [sp, #12]
 8003cb2:	701a      	strb	r2, [r3, #0]
 8003cb4:	e7d9      	b.n	8003c6a <__cvt+0x7e>

08003cb6 <__exponent>:
 8003cb6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003cb8:	2900      	cmp	r1, #0
 8003cba:	bfba      	itte	lt
 8003cbc:	4249      	neglt	r1, r1
 8003cbe:	232d      	movlt	r3, #45	@ 0x2d
 8003cc0:	232b      	movge	r3, #43	@ 0x2b
 8003cc2:	2909      	cmp	r1, #9
 8003cc4:	7002      	strb	r2, [r0, #0]
 8003cc6:	7043      	strb	r3, [r0, #1]
 8003cc8:	dd29      	ble.n	8003d1e <__exponent+0x68>
 8003cca:	f10d 0307 	add.w	r3, sp, #7
 8003cce:	461d      	mov	r5, r3
 8003cd0:	270a      	movs	r7, #10
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	fbb1 f6f7 	udiv	r6, r1, r7
 8003cd8:	fb07 1416 	mls	r4, r7, r6, r1
 8003cdc:	3430      	adds	r4, #48	@ 0x30
 8003cde:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003ce2:	460c      	mov	r4, r1
 8003ce4:	2c63      	cmp	r4, #99	@ 0x63
 8003ce6:	f103 33ff 	add.w	r3, r3, #4294967295
 8003cea:	4631      	mov	r1, r6
 8003cec:	dcf1      	bgt.n	8003cd2 <__exponent+0x1c>
 8003cee:	3130      	adds	r1, #48	@ 0x30
 8003cf0:	1e94      	subs	r4, r2, #2
 8003cf2:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003cf6:	1c41      	adds	r1, r0, #1
 8003cf8:	4623      	mov	r3, r4
 8003cfa:	42ab      	cmp	r3, r5
 8003cfc:	d30a      	bcc.n	8003d14 <__exponent+0x5e>
 8003cfe:	f10d 0309 	add.w	r3, sp, #9
 8003d02:	1a9b      	subs	r3, r3, r2
 8003d04:	42ac      	cmp	r4, r5
 8003d06:	bf88      	it	hi
 8003d08:	2300      	movhi	r3, #0
 8003d0a:	3302      	adds	r3, #2
 8003d0c:	4403      	add	r3, r0
 8003d0e:	1a18      	subs	r0, r3, r0
 8003d10:	b003      	add	sp, #12
 8003d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d14:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003d18:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003d1c:	e7ed      	b.n	8003cfa <__exponent+0x44>
 8003d1e:	2330      	movs	r3, #48	@ 0x30
 8003d20:	3130      	adds	r1, #48	@ 0x30
 8003d22:	7083      	strb	r3, [r0, #2]
 8003d24:	70c1      	strb	r1, [r0, #3]
 8003d26:	1d03      	adds	r3, r0, #4
 8003d28:	e7f1      	b.n	8003d0e <__exponent+0x58>
	...

08003d2c <_printf_float>:
 8003d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d30:	b08d      	sub	sp, #52	@ 0x34
 8003d32:	460c      	mov	r4, r1
 8003d34:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8003d38:	4616      	mov	r6, r2
 8003d3a:	461f      	mov	r7, r3
 8003d3c:	4605      	mov	r5, r0
 8003d3e:	f000 fd8b 	bl	8004858 <_localeconv_r>
 8003d42:	6803      	ldr	r3, [r0, #0]
 8003d44:	9304      	str	r3, [sp, #16]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7fc fa92 	bl	8000270 <strlen>
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	930a      	str	r3, [sp, #40]	@ 0x28
 8003d50:	f8d8 3000 	ldr.w	r3, [r8]
 8003d54:	9005      	str	r0, [sp, #20]
 8003d56:	3307      	adds	r3, #7
 8003d58:	f023 0307 	bic.w	r3, r3, #7
 8003d5c:	f103 0208 	add.w	r2, r3, #8
 8003d60:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003d64:	f8d4 b000 	ldr.w	fp, [r4]
 8003d68:	f8c8 2000 	str.w	r2, [r8]
 8003d6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003d70:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003d74:	9307      	str	r3, [sp, #28]
 8003d76:	f8cd 8018 	str.w	r8, [sp, #24]
 8003d7a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003d7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003d82:	4b9c      	ldr	r3, [pc, #624]	@ (8003ff4 <_printf_float+0x2c8>)
 8003d84:	f04f 32ff 	mov.w	r2, #4294967295
 8003d88:	f7fc fed0 	bl	8000b2c <__aeabi_dcmpun>
 8003d8c:	bb70      	cbnz	r0, 8003dec <_printf_float+0xc0>
 8003d8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003d92:	4b98      	ldr	r3, [pc, #608]	@ (8003ff4 <_printf_float+0x2c8>)
 8003d94:	f04f 32ff 	mov.w	r2, #4294967295
 8003d98:	f7fc feaa 	bl	8000af0 <__aeabi_dcmple>
 8003d9c:	bb30      	cbnz	r0, 8003dec <_printf_float+0xc0>
 8003d9e:	2200      	movs	r2, #0
 8003da0:	2300      	movs	r3, #0
 8003da2:	4640      	mov	r0, r8
 8003da4:	4649      	mov	r1, r9
 8003da6:	f7fc fe99 	bl	8000adc <__aeabi_dcmplt>
 8003daa:	b110      	cbz	r0, 8003db2 <_printf_float+0x86>
 8003dac:	232d      	movs	r3, #45	@ 0x2d
 8003dae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003db2:	4a91      	ldr	r2, [pc, #580]	@ (8003ff8 <_printf_float+0x2cc>)
 8003db4:	4b91      	ldr	r3, [pc, #580]	@ (8003ffc <_printf_float+0x2d0>)
 8003db6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003dba:	bf8c      	ite	hi
 8003dbc:	4690      	movhi	r8, r2
 8003dbe:	4698      	movls	r8, r3
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	6123      	str	r3, [r4, #16]
 8003dc4:	f02b 0304 	bic.w	r3, fp, #4
 8003dc8:	6023      	str	r3, [r4, #0]
 8003dca:	f04f 0900 	mov.w	r9, #0
 8003dce:	9700      	str	r7, [sp, #0]
 8003dd0:	4633      	mov	r3, r6
 8003dd2:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003dd4:	4621      	mov	r1, r4
 8003dd6:	4628      	mov	r0, r5
 8003dd8:	f000 f9d2 	bl	8004180 <_printf_common>
 8003ddc:	3001      	adds	r0, #1
 8003dde:	f040 808d 	bne.w	8003efc <_printf_float+0x1d0>
 8003de2:	f04f 30ff 	mov.w	r0, #4294967295
 8003de6:	b00d      	add	sp, #52	@ 0x34
 8003de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dec:	4642      	mov	r2, r8
 8003dee:	464b      	mov	r3, r9
 8003df0:	4640      	mov	r0, r8
 8003df2:	4649      	mov	r1, r9
 8003df4:	f7fc fe9a 	bl	8000b2c <__aeabi_dcmpun>
 8003df8:	b140      	cbz	r0, 8003e0c <_printf_float+0xe0>
 8003dfa:	464b      	mov	r3, r9
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	bfbc      	itt	lt
 8003e00:	232d      	movlt	r3, #45	@ 0x2d
 8003e02:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003e06:	4a7e      	ldr	r2, [pc, #504]	@ (8004000 <_printf_float+0x2d4>)
 8003e08:	4b7e      	ldr	r3, [pc, #504]	@ (8004004 <_printf_float+0x2d8>)
 8003e0a:	e7d4      	b.n	8003db6 <_printf_float+0x8a>
 8003e0c:	6863      	ldr	r3, [r4, #4]
 8003e0e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8003e12:	9206      	str	r2, [sp, #24]
 8003e14:	1c5a      	adds	r2, r3, #1
 8003e16:	d13b      	bne.n	8003e90 <_printf_float+0x164>
 8003e18:	2306      	movs	r3, #6
 8003e1a:	6063      	str	r3, [r4, #4]
 8003e1c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8003e20:	2300      	movs	r3, #0
 8003e22:	6022      	str	r2, [r4, #0]
 8003e24:	9303      	str	r3, [sp, #12]
 8003e26:	ab0a      	add	r3, sp, #40	@ 0x28
 8003e28:	e9cd a301 	strd	sl, r3, [sp, #4]
 8003e2c:	ab09      	add	r3, sp, #36	@ 0x24
 8003e2e:	9300      	str	r3, [sp, #0]
 8003e30:	6861      	ldr	r1, [r4, #4]
 8003e32:	ec49 8b10 	vmov	d0, r8, r9
 8003e36:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8003e3a:	4628      	mov	r0, r5
 8003e3c:	f7ff fed6 	bl	8003bec <__cvt>
 8003e40:	9b06      	ldr	r3, [sp, #24]
 8003e42:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003e44:	2b47      	cmp	r3, #71	@ 0x47
 8003e46:	4680      	mov	r8, r0
 8003e48:	d129      	bne.n	8003e9e <_printf_float+0x172>
 8003e4a:	1cc8      	adds	r0, r1, #3
 8003e4c:	db02      	blt.n	8003e54 <_printf_float+0x128>
 8003e4e:	6863      	ldr	r3, [r4, #4]
 8003e50:	4299      	cmp	r1, r3
 8003e52:	dd41      	ble.n	8003ed8 <_printf_float+0x1ac>
 8003e54:	f1aa 0a02 	sub.w	sl, sl, #2
 8003e58:	fa5f fa8a 	uxtb.w	sl, sl
 8003e5c:	3901      	subs	r1, #1
 8003e5e:	4652      	mov	r2, sl
 8003e60:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003e64:	9109      	str	r1, [sp, #36]	@ 0x24
 8003e66:	f7ff ff26 	bl	8003cb6 <__exponent>
 8003e6a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003e6c:	1813      	adds	r3, r2, r0
 8003e6e:	2a01      	cmp	r2, #1
 8003e70:	4681      	mov	r9, r0
 8003e72:	6123      	str	r3, [r4, #16]
 8003e74:	dc02      	bgt.n	8003e7c <_printf_float+0x150>
 8003e76:	6822      	ldr	r2, [r4, #0]
 8003e78:	07d2      	lsls	r2, r2, #31
 8003e7a:	d501      	bpl.n	8003e80 <_printf_float+0x154>
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	6123      	str	r3, [r4, #16]
 8003e80:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d0a2      	beq.n	8003dce <_printf_float+0xa2>
 8003e88:	232d      	movs	r3, #45	@ 0x2d
 8003e8a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e8e:	e79e      	b.n	8003dce <_printf_float+0xa2>
 8003e90:	9a06      	ldr	r2, [sp, #24]
 8003e92:	2a47      	cmp	r2, #71	@ 0x47
 8003e94:	d1c2      	bne.n	8003e1c <_printf_float+0xf0>
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1c0      	bne.n	8003e1c <_printf_float+0xf0>
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e7bd      	b.n	8003e1a <_printf_float+0xee>
 8003e9e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003ea2:	d9db      	bls.n	8003e5c <_printf_float+0x130>
 8003ea4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003ea8:	d118      	bne.n	8003edc <_printf_float+0x1b0>
 8003eaa:	2900      	cmp	r1, #0
 8003eac:	6863      	ldr	r3, [r4, #4]
 8003eae:	dd0b      	ble.n	8003ec8 <_printf_float+0x19c>
 8003eb0:	6121      	str	r1, [r4, #16]
 8003eb2:	b913      	cbnz	r3, 8003eba <_printf_float+0x18e>
 8003eb4:	6822      	ldr	r2, [r4, #0]
 8003eb6:	07d0      	lsls	r0, r2, #31
 8003eb8:	d502      	bpl.n	8003ec0 <_printf_float+0x194>
 8003eba:	3301      	adds	r3, #1
 8003ebc:	440b      	add	r3, r1
 8003ebe:	6123      	str	r3, [r4, #16]
 8003ec0:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003ec2:	f04f 0900 	mov.w	r9, #0
 8003ec6:	e7db      	b.n	8003e80 <_printf_float+0x154>
 8003ec8:	b913      	cbnz	r3, 8003ed0 <_printf_float+0x1a4>
 8003eca:	6822      	ldr	r2, [r4, #0]
 8003ecc:	07d2      	lsls	r2, r2, #31
 8003ece:	d501      	bpl.n	8003ed4 <_printf_float+0x1a8>
 8003ed0:	3302      	adds	r3, #2
 8003ed2:	e7f4      	b.n	8003ebe <_printf_float+0x192>
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e7f2      	b.n	8003ebe <_printf_float+0x192>
 8003ed8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003edc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003ede:	4299      	cmp	r1, r3
 8003ee0:	db05      	blt.n	8003eee <_printf_float+0x1c2>
 8003ee2:	6823      	ldr	r3, [r4, #0]
 8003ee4:	6121      	str	r1, [r4, #16]
 8003ee6:	07d8      	lsls	r0, r3, #31
 8003ee8:	d5ea      	bpl.n	8003ec0 <_printf_float+0x194>
 8003eea:	1c4b      	adds	r3, r1, #1
 8003eec:	e7e7      	b.n	8003ebe <_printf_float+0x192>
 8003eee:	2900      	cmp	r1, #0
 8003ef0:	bfd4      	ite	le
 8003ef2:	f1c1 0202 	rsble	r2, r1, #2
 8003ef6:	2201      	movgt	r2, #1
 8003ef8:	4413      	add	r3, r2
 8003efa:	e7e0      	b.n	8003ebe <_printf_float+0x192>
 8003efc:	6823      	ldr	r3, [r4, #0]
 8003efe:	055a      	lsls	r2, r3, #21
 8003f00:	d407      	bmi.n	8003f12 <_printf_float+0x1e6>
 8003f02:	6923      	ldr	r3, [r4, #16]
 8003f04:	4642      	mov	r2, r8
 8003f06:	4631      	mov	r1, r6
 8003f08:	4628      	mov	r0, r5
 8003f0a:	47b8      	blx	r7
 8003f0c:	3001      	adds	r0, #1
 8003f0e:	d12b      	bne.n	8003f68 <_printf_float+0x23c>
 8003f10:	e767      	b.n	8003de2 <_printf_float+0xb6>
 8003f12:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003f16:	f240 80dd 	bls.w	80040d4 <_printf_float+0x3a8>
 8003f1a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003f1e:	2200      	movs	r2, #0
 8003f20:	2300      	movs	r3, #0
 8003f22:	f7fc fdd1 	bl	8000ac8 <__aeabi_dcmpeq>
 8003f26:	2800      	cmp	r0, #0
 8003f28:	d033      	beq.n	8003f92 <_printf_float+0x266>
 8003f2a:	4a37      	ldr	r2, [pc, #220]	@ (8004008 <_printf_float+0x2dc>)
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	4631      	mov	r1, r6
 8003f30:	4628      	mov	r0, r5
 8003f32:	47b8      	blx	r7
 8003f34:	3001      	adds	r0, #1
 8003f36:	f43f af54 	beq.w	8003de2 <_printf_float+0xb6>
 8003f3a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8003f3e:	4543      	cmp	r3, r8
 8003f40:	db02      	blt.n	8003f48 <_printf_float+0x21c>
 8003f42:	6823      	ldr	r3, [r4, #0]
 8003f44:	07d8      	lsls	r0, r3, #31
 8003f46:	d50f      	bpl.n	8003f68 <_printf_float+0x23c>
 8003f48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003f4c:	4631      	mov	r1, r6
 8003f4e:	4628      	mov	r0, r5
 8003f50:	47b8      	blx	r7
 8003f52:	3001      	adds	r0, #1
 8003f54:	f43f af45 	beq.w	8003de2 <_printf_float+0xb6>
 8003f58:	f04f 0900 	mov.w	r9, #0
 8003f5c:	f108 38ff 	add.w	r8, r8, #4294967295
 8003f60:	f104 0a1a 	add.w	sl, r4, #26
 8003f64:	45c8      	cmp	r8, r9
 8003f66:	dc09      	bgt.n	8003f7c <_printf_float+0x250>
 8003f68:	6823      	ldr	r3, [r4, #0]
 8003f6a:	079b      	lsls	r3, r3, #30
 8003f6c:	f100 8103 	bmi.w	8004176 <_printf_float+0x44a>
 8003f70:	68e0      	ldr	r0, [r4, #12]
 8003f72:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003f74:	4298      	cmp	r0, r3
 8003f76:	bfb8      	it	lt
 8003f78:	4618      	movlt	r0, r3
 8003f7a:	e734      	b.n	8003de6 <_printf_float+0xba>
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	4652      	mov	r2, sl
 8003f80:	4631      	mov	r1, r6
 8003f82:	4628      	mov	r0, r5
 8003f84:	47b8      	blx	r7
 8003f86:	3001      	adds	r0, #1
 8003f88:	f43f af2b 	beq.w	8003de2 <_printf_float+0xb6>
 8003f8c:	f109 0901 	add.w	r9, r9, #1
 8003f90:	e7e8      	b.n	8003f64 <_printf_float+0x238>
 8003f92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	dc39      	bgt.n	800400c <_printf_float+0x2e0>
 8003f98:	4a1b      	ldr	r2, [pc, #108]	@ (8004008 <_printf_float+0x2dc>)
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	4631      	mov	r1, r6
 8003f9e:	4628      	mov	r0, r5
 8003fa0:	47b8      	blx	r7
 8003fa2:	3001      	adds	r0, #1
 8003fa4:	f43f af1d 	beq.w	8003de2 <_printf_float+0xb6>
 8003fa8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8003fac:	ea59 0303 	orrs.w	r3, r9, r3
 8003fb0:	d102      	bne.n	8003fb8 <_printf_float+0x28c>
 8003fb2:	6823      	ldr	r3, [r4, #0]
 8003fb4:	07d9      	lsls	r1, r3, #31
 8003fb6:	d5d7      	bpl.n	8003f68 <_printf_float+0x23c>
 8003fb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003fbc:	4631      	mov	r1, r6
 8003fbe:	4628      	mov	r0, r5
 8003fc0:	47b8      	blx	r7
 8003fc2:	3001      	adds	r0, #1
 8003fc4:	f43f af0d 	beq.w	8003de2 <_printf_float+0xb6>
 8003fc8:	f04f 0a00 	mov.w	sl, #0
 8003fcc:	f104 0b1a 	add.w	fp, r4, #26
 8003fd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003fd2:	425b      	negs	r3, r3
 8003fd4:	4553      	cmp	r3, sl
 8003fd6:	dc01      	bgt.n	8003fdc <_printf_float+0x2b0>
 8003fd8:	464b      	mov	r3, r9
 8003fda:	e793      	b.n	8003f04 <_printf_float+0x1d8>
 8003fdc:	2301      	movs	r3, #1
 8003fde:	465a      	mov	r2, fp
 8003fe0:	4631      	mov	r1, r6
 8003fe2:	4628      	mov	r0, r5
 8003fe4:	47b8      	blx	r7
 8003fe6:	3001      	adds	r0, #1
 8003fe8:	f43f aefb 	beq.w	8003de2 <_printf_float+0xb6>
 8003fec:	f10a 0a01 	add.w	sl, sl, #1
 8003ff0:	e7ee      	b.n	8003fd0 <_printf_float+0x2a4>
 8003ff2:	bf00      	nop
 8003ff4:	7fefffff 	.word	0x7fefffff
 8003ff8:	08006598 	.word	0x08006598
 8003ffc:	08006594 	.word	0x08006594
 8004000:	080065a0 	.word	0x080065a0
 8004004:	0800659c 	.word	0x0800659c
 8004008:	080065a4 	.word	0x080065a4
 800400c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800400e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004012:	4553      	cmp	r3, sl
 8004014:	bfa8      	it	ge
 8004016:	4653      	movge	r3, sl
 8004018:	2b00      	cmp	r3, #0
 800401a:	4699      	mov	r9, r3
 800401c:	dc36      	bgt.n	800408c <_printf_float+0x360>
 800401e:	f04f 0b00 	mov.w	fp, #0
 8004022:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004026:	f104 021a 	add.w	r2, r4, #26
 800402a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800402c:	9306      	str	r3, [sp, #24]
 800402e:	eba3 0309 	sub.w	r3, r3, r9
 8004032:	455b      	cmp	r3, fp
 8004034:	dc31      	bgt.n	800409a <_printf_float+0x36e>
 8004036:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004038:	459a      	cmp	sl, r3
 800403a:	dc3a      	bgt.n	80040b2 <_printf_float+0x386>
 800403c:	6823      	ldr	r3, [r4, #0]
 800403e:	07da      	lsls	r2, r3, #31
 8004040:	d437      	bmi.n	80040b2 <_printf_float+0x386>
 8004042:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004044:	ebaa 0903 	sub.w	r9, sl, r3
 8004048:	9b06      	ldr	r3, [sp, #24]
 800404a:	ebaa 0303 	sub.w	r3, sl, r3
 800404e:	4599      	cmp	r9, r3
 8004050:	bfa8      	it	ge
 8004052:	4699      	movge	r9, r3
 8004054:	f1b9 0f00 	cmp.w	r9, #0
 8004058:	dc33      	bgt.n	80040c2 <_printf_float+0x396>
 800405a:	f04f 0800 	mov.w	r8, #0
 800405e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004062:	f104 0b1a 	add.w	fp, r4, #26
 8004066:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004068:	ebaa 0303 	sub.w	r3, sl, r3
 800406c:	eba3 0309 	sub.w	r3, r3, r9
 8004070:	4543      	cmp	r3, r8
 8004072:	f77f af79 	ble.w	8003f68 <_printf_float+0x23c>
 8004076:	2301      	movs	r3, #1
 8004078:	465a      	mov	r2, fp
 800407a:	4631      	mov	r1, r6
 800407c:	4628      	mov	r0, r5
 800407e:	47b8      	blx	r7
 8004080:	3001      	adds	r0, #1
 8004082:	f43f aeae 	beq.w	8003de2 <_printf_float+0xb6>
 8004086:	f108 0801 	add.w	r8, r8, #1
 800408a:	e7ec      	b.n	8004066 <_printf_float+0x33a>
 800408c:	4642      	mov	r2, r8
 800408e:	4631      	mov	r1, r6
 8004090:	4628      	mov	r0, r5
 8004092:	47b8      	blx	r7
 8004094:	3001      	adds	r0, #1
 8004096:	d1c2      	bne.n	800401e <_printf_float+0x2f2>
 8004098:	e6a3      	b.n	8003de2 <_printf_float+0xb6>
 800409a:	2301      	movs	r3, #1
 800409c:	4631      	mov	r1, r6
 800409e:	4628      	mov	r0, r5
 80040a0:	9206      	str	r2, [sp, #24]
 80040a2:	47b8      	blx	r7
 80040a4:	3001      	adds	r0, #1
 80040a6:	f43f ae9c 	beq.w	8003de2 <_printf_float+0xb6>
 80040aa:	9a06      	ldr	r2, [sp, #24]
 80040ac:	f10b 0b01 	add.w	fp, fp, #1
 80040b0:	e7bb      	b.n	800402a <_printf_float+0x2fe>
 80040b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80040b6:	4631      	mov	r1, r6
 80040b8:	4628      	mov	r0, r5
 80040ba:	47b8      	blx	r7
 80040bc:	3001      	adds	r0, #1
 80040be:	d1c0      	bne.n	8004042 <_printf_float+0x316>
 80040c0:	e68f      	b.n	8003de2 <_printf_float+0xb6>
 80040c2:	9a06      	ldr	r2, [sp, #24]
 80040c4:	464b      	mov	r3, r9
 80040c6:	4442      	add	r2, r8
 80040c8:	4631      	mov	r1, r6
 80040ca:	4628      	mov	r0, r5
 80040cc:	47b8      	blx	r7
 80040ce:	3001      	adds	r0, #1
 80040d0:	d1c3      	bne.n	800405a <_printf_float+0x32e>
 80040d2:	e686      	b.n	8003de2 <_printf_float+0xb6>
 80040d4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80040d8:	f1ba 0f01 	cmp.w	sl, #1
 80040dc:	dc01      	bgt.n	80040e2 <_printf_float+0x3b6>
 80040de:	07db      	lsls	r3, r3, #31
 80040e0:	d536      	bpl.n	8004150 <_printf_float+0x424>
 80040e2:	2301      	movs	r3, #1
 80040e4:	4642      	mov	r2, r8
 80040e6:	4631      	mov	r1, r6
 80040e8:	4628      	mov	r0, r5
 80040ea:	47b8      	blx	r7
 80040ec:	3001      	adds	r0, #1
 80040ee:	f43f ae78 	beq.w	8003de2 <_printf_float+0xb6>
 80040f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80040f6:	4631      	mov	r1, r6
 80040f8:	4628      	mov	r0, r5
 80040fa:	47b8      	blx	r7
 80040fc:	3001      	adds	r0, #1
 80040fe:	f43f ae70 	beq.w	8003de2 <_printf_float+0xb6>
 8004102:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004106:	2200      	movs	r2, #0
 8004108:	2300      	movs	r3, #0
 800410a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800410e:	f7fc fcdb 	bl	8000ac8 <__aeabi_dcmpeq>
 8004112:	b9c0      	cbnz	r0, 8004146 <_printf_float+0x41a>
 8004114:	4653      	mov	r3, sl
 8004116:	f108 0201 	add.w	r2, r8, #1
 800411a:	4631      	mov	r1, r6
 800411c:	4628      	mov	r0, r5
 800411e:	47b8      	blx	r7
 8004120:	3001      	adds	r0, #1
 8004122:	d10c      	bne.n	800413e <_printf_float+0x412>
 8004124:	e65d      	b.n	8003de2 <_printf_float+0xb6>
 8004126:	2301      	movs	r3, #1
 8004128:	465a      	mov	r2, fp
 800412a:	4631      	mov	r1, r6
 800412c:	4628      	mov	r0, r5
 800412e:	47b8      	blx	r7
 8004130:	3001      	adds	r0, #1
 8004132:	f43f ae56 	beq.w	8003de2 <_printf_float+0xb6>
 8004136:	f108 0801 	add.w	r8, r8, #1
 800413a:	45d0      	cmp	r8, sl
 800413c:	dbf3      	blt.n	8004126 <_printf_float+0x3fa>
 800413e:	464b      	mov	r3, r9
 8004140:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004144:	e6df      	b.n	8003f06 <_printf_float+0x1da>
 8004146:	f04f 0800 	mov.w	r8, #0
 800414a:	f104 0b1a 	add.w	fp, r4, #26
 800414e:	e7f4      	b.n	800413a <_printf_float+0x40e>
 8004150:	2301      	movs	r3, #1
 8004152:	4642      	mov	r2, r8
 8004154:	e7e1      	b.n	800411a <_printf_float+0x3ee>
 8004156:	2301      	movs	r3, #1
 8004158:	464a      	mov	r2, r9
 800415a:	4631      	mov	r1, r6
 800415c:	4628      	mov	r0, r5
 800415e:	47b8      	blx	r7
 8004160:	3001      	adds	r0, #1
 8004162:	f43f ae3e 	beq.w	8003de2 <_printf_float+0xb6>
 8004166:	f108 0801 	add.w	r8, r8, #1
 800416a:	68e3      	ldr	r3, [r4, #12]
 800416c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800416e:	1a5b      	subs	r3, r3, r1
 8004170:	4543      	cmp	r3, r8
 8004172:	dcf0      	bgt.n	8004156 <_printf_float+0x42a>
 8004174:	e6fc      	b.n	8003f70 <_printf_float+0x244>
 8004176:	f04f 0800 	mov.w	r8, #0
 800417a:	f104 0919 	add.w	r9, r4, #25
 800417e:	e7f4      	b.n	800416a <_printf_float+0x43e>

08004180 <_printf_common>:
 8004180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004184:	4616      	mov	r6, r2
 8004186:	4698      	mov	r8, r3
 8004188:	688a      	ldr	r2, [r1, #8]
 800418a:	690b      	ldr	r3, [r1, #16]
 800418c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004190:	4293      	cmp	r3, r2
 8004192:	bfb8      	it	lt
 8004194:	4613      	movlt	r3, r2
 8004196:	6033      	str	r3, [r6, #0]
 8004198:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800419c:	4607      	mov	r7, r0
 800419e:	460c      	mov	r4, r1
 80041a0:	b10a      	cbz	r2, 80041a6 <_printf_common+0x26>
 80041a2:	3301      	adds	r3, #1
 80041a4:	6033      	str	r3, [r6, #0]
 80041a6:	6823      	ldr	r3, [r4, #0]
 80041a8:	0699      	lsls	r1, r3, #26
 80041aa:	bf42      	ittt	mi
 80041ac:	6833      	ldrmi	r3, [r6, #0]
 80041ae:	3302      	addmi	r3, #2
 80041b0:	6033      	strmi	r3, [r6, #0]
 80041b2:	6825      	ldr	r5, [r4, #0]
 80041b4:	f015 0506 	ands.w	r5, r5, #6
 80041b8:	d106      	bne.n	80041c8 <_printf_common+0x48>
 80041ba:	f104 0a19 	add.w	sl, r4, #25
 80041be:	68e3      	ldr	r3, [r4, #12]
 80041c0:	6832      	ldr	r2, [r6, #0]
 80041c2:	1a9b      	subs	r3, r3, r2
 80041c4:	42ab      	cmp	r3, r5
 80041c6:	dc26      	bgt.n	8004216 <_printf_common+0x96>
 80041c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80041cc:	6822      	ldr	r2, [r4, #0]
 80041ce:	3b00      	subs	r3, #0
 80041d0:	bf18      	it	ne
 80041d2:	2301      	movne	r3, #1
 80041d4:	0692      	lsls	r2, r2, #26
 80041d6:	d42b      	bmi.n	8004230 <_printf_common+0xb0>
 80041d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80041dc:	4641      	mov	r1, r8
 80041de:	4638      	mov	r0, r7
 80041e0:	47c8      	blx	r9
 80041e2:	3001      	adds	r0, #1
 80041e4:	d01e      	beq.n	8004224 <_printf_common+0xa4>
 80041e6:	6823      	ldr	r3, [r4, #0]
 80041e8:	6922      	ldr	r2, [r4, #16]
 80041ea:	f003 0306 	and.w	r3, r3, #6
 80041ee:	2b04      	cmp	r3, #4
 80041f0:	bf02      	ittt	eq
 80041f2:	68e5      	ldreq	r5, [r4, #12]
 80041f4:	6833      	ldreq	r3, [r6, #0]
 80041f6:	1aed      	subeq	r5, r5, r3
 80041f8:	68a3      	ldr	r3, [r4, #8]
 80041fa:	bf0c      	ite	eq
 80041fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004200:	2500      	movne	r5, #0
 8004202:	4293      	cmp	r3, r2
 8004204:	bfc4      	itt	gt
 8004206:	1a9b      	subgt	r3, r3, r2
 8004208:	18ed      	addgt	r5, r5, r3
 800420a:	2600      	movs	r6, #0
 800420c:	341a      	adds	r4, #26
 800420e:	42b5      	cmp	r5, r6
 8004210:	d11a      	bne.n	8004248 <_printf_common+0xc8>
 8004212:	2000      	movs	r0, #0
 8004214:	e008      	b.n	8004228 <_printf_common+0xa8>
 8004216:	2301      	movs	r3, #1
 8004218:	4652      	mov	r2, sl
 800421a:	4641      	mov	r1, r8
 800421c:	4638      	mov	r0, r7
 800421e:	47c8      	blx	r9
 8004220:	3001      	adds	r0, #1
 8004222:	d103      	bne.n	800422c <_printf_common+0xac>
 8004224:	f04f 30ff 	mov.w	r0, #4294967295
 8004228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800422c:	3501      	adds	r5, #1
 800422e:	e7c6      	b.n	80041be <_printf_common+0x3e>
 8004230:	18e1      	adds	r1, r4, r3
 8004232:	1c5a      	adds	r2, r3, #1
 8004234:	2030      	movs	r0, #48	@ 0x30
 8004236:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800423a:	4422      	add	r2, r4
 800423c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004240:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004244:	3302      	adds	r3, #2
 8004246:	e7c7      	b.n	80041d8 <_printf_common+0x58>
 8004248:	2301      	movs	r3, #1
 800424a:	4622      	mov	r2, r4
 800424c:	4641      	mov	r1, r8
 800424e:	4638      	mov	r0, r7
 8004250:	47c8      	blx	r9
 8004252:	3001      	adds	r0, #1
 8004254:	d0e6      	beq.n	8004224 <_printf_common+0xa4>
 8004256:	3601      	adds	r6, #1
 8004258:	e7d9      	b.n	800420e <_printf_common+0x8e>
	...

0800425c <_printf_i>:
 800425c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004260:	7e0f      	ldrb	r7, [r1, #24]
 8004262:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004264:	2f78      	cmp	r7, #120	@ 0x78
 8004266:	4691      	mov	r9, r2
 8004268:	4680      	mov	r8, r0
 800426a:	460c      	mov	r4, r1
 800426c:	469a      	mov	sl, r3
 800426e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004272:	d807      	bhi.n	8004284 <_printf_i+0x28>
 8004274:	2f62      	cmp	r7, #98	@ 0x62
 8004276:	d80a      	bhi.n	800428e <_printf_i+0x32>
 8004278:	2f00      	cmp	r7, #0
 800427a:	f000 80d1 	beq.w	8004420 <_printf_i+0x1c4>
 800427e:	2f58      	cmp	r7, #88	@ 0x58
 8004280:	f000 80b8 	beq.w	80043f4 <_printf_i+0x198>
 8004284:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004288:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800428c:	e03a      	b.n	8004304 <_printf_i+0xa8>
 800428e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004292:	2b15      	cmp	r3, #21
 8004294:	d8f6      	bhi.n	8004284 <_printf_i+0x28>
 8004296:	a101      	add	r1, pc, #4	@ (adr r1, 800429c <_printf_i+0x40>)
 8004298:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800429c:	080042f5 	.word	0x080042f5
 80042a0:	08004309 	.word	0x08004309
 80042a4:	08004285 	.word	0x08004285
 80042a8:	08004285 	.word	0x08004285
 80042ac:	08004285 	.word	0x08004285
 80042b0:	08004285 	.word	0x08004285
 80042b4:	08004309 	.word	0x08004309
 80042b8:	08004285 	.word	0x08004285
 80042bc:	08004285 	.word	0x08004285
 80042c0:	08004285 	.word	0x08004285
 80042c4:	08004285 	.word	0x08004285
 80042c8:	08004407 	.word	0x08004407
 80042cc:	08004333 	.word	0x08004333
 80042d0:	080043c1 	.word	0x080043c1
 80042d4:	08004285 	.word	0x08004285
 80042d8:	08004285 	.word	0x08004285
 80042dc:	08004429 	.word	0x08004429
 80042e0:	08004285 	.word	0x08004285
 80042e4:	08004333 	.word	0x08004333
 80042e8:	08004285 	.word	0x08004285
 80042ec:	08004285 	.word	0x08004285
 80042f0:	080043c9 	.word	0x080043c9
 80042f4:	6833      	ldr	r3, [r6, #0]
 80042f6:	1d1a      	adds	r2, r3, #4
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	6032      	str	r2, [r6, #0]
 80042fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004300:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004304:	2301      	movs	r3, #1
 8004306:	e09c      	b.n	8004442 <_printf_i+0x1e6>
 8004308:	6833      	ldr	r3, [r6, #0]
 800430a:	6820      	ldr	r0, [r4, #0]
 800430c:	1d19      	adds	r1, r3, #4
 800430e:	6031      	str	r1, [r6, #0]
 8004310:	0606      	lsls	r6, r0, #24
 8004312:	d501      	bpl.n	8004318 <_printf_i+0xbc>
 8004314:	681d      	ldr	r5, [r3, #0]
 8004316:	e003      	b.n	8004320 <_printf_i+0xc4>
 8004318:	0645      	lsls	r5, r0, #25
 800431a:	d5fb      	bpl.n	8004314 <_printf_i+0xb8>
 800431c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004320:	2d00      	cmp	r5, #0
 8004322:	da03      	bge.n	800432c <_printf_i+0xd0>
 8004324:	232d      	movs	r3, #45	@ 0x2d
 8004326:	426d      	negs	r5, r5
 8004328:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800432c:	4858      	ldr	r0, [pc, #352]	@ (8004490 <_printf_i+0x234>)
 800432e:	230a      	movs	r3, #10
 8004330:	e011      	b.n	8004356 <_printf_i+0xfa>
 8004332:	6821      	ldr	r1, [r4, #0]
 8004334:	6833      	ldr	r3, [r6, #0]
 8004336:	0608      	lsls	r0, r1, #24
 8004338:	f853 5b04 	ldr.w	r5, [r3], #4
 800433c:	d402      	bmi.n	8004344 <_printf_i+0xe8>
 800433e:	0649      	lsls	r1, r1, #25
 8004340:	bf48      	it	mi
 8004342:	b2ad      	uxthmi	r5, r5
 8004344:	2f6f      	cmp	r7, #111	@ 0x6f
 8004346:	4852      	ldr	r0, [pc, #328]	@ (8004490 <_printf_i+0x234>)
 8004348:	6033      	str	r3, [r6, #0]
 800434a:	bf14      	ite	ne
 800434c:	230a      	movne	r3, #10
 800434e:	2308      	moveq	r3, #8
 8004350:	2100      	movs	r1, #0
 8004352:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004356:	6866      	ldr	r6, [r4, #4]
 8004358:	60a6      	str	r6, [r4, #8]
 800435a:	2e00      	cmp	r6, #0
 800435c:	db05      	blt.n	800436a <_printf_i+0x10e>
 800435e:	6821      	ldr	r1, [r4, #0]
 8004360:	432e      	orrs	r6, r5
 8004362:	f021 0104 	bic.w	r1, r1, #4
 8004366:	6021      	str	r1, [r4, #0]
 8004368:	d04b      	beq.n	8004402 <_printf_i+0x1a6>
 800436a:	4616      	mov	r6, r2
 800436c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004370:	fb03 5711 	mls	r7, r3, r1, r5
 8004374:	5dc7      	ldrb	r7, [r0, r7]
 8004376:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800437a:	462f      	mov	r7, r5
 800437c:	42bb      	cmp	r3, r7
 800437e:	460d      	mov	r5, r1
 8004380:	d9f4      	bls.n	800436c <_printf_i+0x110>
 8004382:	2b08      	cmp	r3, #8
 8004384:	d10b      	bne.n	800439e <_printf_i+0x142>
 8004386:	6823      	ldr	r3, [r4, #0]
 8004388:	07df      	lsls	r7, r3, #31
 800438a:	d508      	bpl.n	800439e <_printf_i+0x142>
 800438c:	6923      	ldr	r3, [r4, #16]
 800438e:	6861      	ldr	r1, [r4, #4]
 8004390:	4299      	cmp	r1, r3
 8004392:	bfde      	ittt	le
 8004394:	2330      	movle	r3, #48	@ 0x30
 8004396:	f806 3c01 	strble.w	r3, [r6, #-1]
 800439a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800439e:	1b92      	subs	r2, r2, r6
 80043a0:	6122      	str	r2, [r4, #16]
 80043a2:	f8cd a000 	str.w	sl, [sp]
 80043a6:	464b      	mov	r3, r9
 80043a8:	aa03      	add	r2, sp, #12
 80043aa:	4621      	mov	r1, r4
 80043ac:	4640      	mov	r0, r8
 80043ae:	f7ff fee7 	bl	8004180 <_printf_common>
 80043b2:	3001      	adds	r0, #1
 80043b4:	d14a      	bne.n	800444c <_printf_i+0x1f0>
 80043b6:	f04f 30ff 	mov.w	r0, #4294967295
 80043ba:	b004      	add	sp, #16
 80043bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043c0:	6823      	ldr	r3, [r4, #0]
 80043c2:	f043 0320 	orr.w	r3, r3, #32
 80043c6:	6023      	str	r3, [r4, #0]
 80043c8:	4832      	ldr	r0, [pc, #200]	@ (8004494 <_printf_i+0x238>)
 80043ca:	2778      	movs	r7, #120	@ 0x78
 80043cc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80043d0:	6823      	ldr	r3, [r4, #0]
 80043d2:	6831      	ldr	r1, [r6, #0]
 80043d4:	061f      	lsls	r7, r3, #24
 80043d6:	f851 5b04 	ldr.w	r5, [r1], #4
 80043da:	d402      	bmi.n	80043e2 <_printf_i+0x186>
 80043dc:	065f      	lsls	r7, r3, #25
 80043de:	bf48      	it	mi
 80043e0:	b2ad      	uxthmi	r5, r5
 80043e2:	6031      	str	r1, [r6, #0]
 80043e4:	07d9      	lsls	r1, r3, #31
 80043e6:	bf44      	itt	mi
 80043e8:	f043 0320 	orrmi.w	r3, r3, #32
 80043ec:	6023      	strmi	r3, [r4, #0]
 80043ee:	b11d      	cbz	r5, 80043f8 <_printf_i+0x19c>
 80043f0:	2310      	movs	r3, #16
 80043f2:	e7ad      	b.n	8004350 <_printf_i+0xf4>
 80043f4:	4826      	ldr	r0, [pc, #152]	@ (8004490 <_printf_i+0x234>)
 80043f6:	e7e9      	b.n	80043cc <_printf_i+0x170>
 80043f8:	6823      	ldr	r3, [r4, #0]
 80043fa:	f023 0320 	bic.w	r3, r3, #32
 80043fe:	6023      	str	r3, [r4, #0]
 8004400:	e7f6      	b.n	80043f0 <_printf_i+0x194>
 8004402:	4616      	mov	r6, r2
 8004404:	e7bd      	b.n	8004382 <_printf_i+0x126>
 8004406:	6833      	ldr	r3, [r6, #0]
 8004408:	6825      	ldr	r5, [r4, #0]
 800440a:	6961      	ldr	r1, [r4, #20]
 800440c:	1d18      	adds	r0, r3, #4
 800440e:	6030      	str	r0, [r6, #0]
 8004410:	062e      	lsls	r6, r5, #24
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	d501      	bpl.n	800441a <_printf_i+0x1be>
 8004416:	6019      	str	r1, [r3, #0]
 8004418:	e002      	b.n	8004420 <_printf_i+0x1c4>
 800441a:	0668      	lsls	r0, r5, #25
 800441c:	d5fb      	bpl.n	8004416 <_printf_i+0x1ba>
 800441e:	8019      	strh	r1, [r3, #0]
 8004420:	2300      	movs	r3, #0
 8004422:	6123      	str	r3, [r4, #16]
 8004424:	4616      	mov	r6, r2
 8004426:	e7bc      	b.n	80043a2 <_printf_i+0x146>
 8004428:	6833      	ldr	r3, [r6, #0]
 800442a:	1d1a      	adds	r2, r3, #4
 800442c:	6032      	str	r2, [r6, #0]
 800442e:	681e      	ldr	r6, [r3, #0]
 8004430:	6862      	ldr	r2, [r4, #4]
 8004432:	2100      	movs	r1, #0
 8004434:	4630      	mov	r0, r6
 8004436:	f7fb fecb 	bl	80001d0 <memchr>
 800443a:	b108      	cbz	r0, 8004440 <_printf_i+0x1e4>
 800443c:	1b80      	subs	r0, r0, r6
 800443e:	6060      	str	r0, [r4, #4]
 8004440:	6863      	ldr	r3, [r4, #4]
 8004442:	6123      	str	r3, [r4, #16]
 8004444:	2300      	movs	r3, #0
 8004446:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800444a:	e7aa      	b.n	80043a2 <_printf_i+0x146>
 800444c:	6923      	ldr	r3, [r4, #16]
 800444e:	4632      	mov	r2, r6
 8004450:	4649      	mov	r1, r9
 8004452:	4640      	mov	r0, r8
 8004454:	47d0      	blx	sl
 8004456:	3001      	adds	r0, #1
 8004458:	d0ad      	beq.n	80043b6 <_printf_i+0x15a>
 800445a:	6823      	ldr	r3, [r4, #0]
 800445c:	079b      	lsls	r3, r3, #30
 800445e:	d413      	bmi.n	8004488 <_printf_i+0x22c>
 8004460:	68e0      	ldr	r0, [r4, #12]
 8004462:	9b03      	ldr	r3, [sp, #12]
 8004464:	4298      	cmp	r0, r3
 8004466:	bfb8      	it	lt
 8004468:	4618      	movlt	r0, r3
 800446a:	e7a6      	b.n	80043ba <_printf_i+0x15e>
 800446c:	2301      	movs	r3, #1
 800446e:	4632      	mov	r2, r6
 8004470:	4649      	mov	r1, r9
 8004472:	4640      	mov	r0, r8
 8004474:	47d0      	blx	sl
 8004476:	3001      	adds	r0, #1
 8004478:	d09d      	beq.n	80043b6 <_printf_i+0x15a>
 800447a:	3501      	adds	r5, #1
 800447c:	68e3      	ldr	r3, [r4, #12]
 800447e:	9903      	ldr	r1, [sp, #12]
 8004480:	1a5b      	subs	r3, r3, r1
 8004482:	42ab      	cmp	r3, r5
 8004484:	dcf2      	bgt.n	800446c <_printf_i+0x210>
 8004486:	e7eb      	b.n	8004460 <_printf_i+0x204>
 8004488:	2500      	movs	r5, #0
 800448a:	f104 0619 	add.w	r6, r4, #25
 800448e:	e7f5      	b.n	800447c <_printf_i+0x220>
 8004490:	080065a6 	.word	0x080065a6
 8004494:	080065b7 	.word	0x080065b7

08004498 <__sflush_r>:
 8004498:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800449c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044a0:	0716      	lsls	r6, r2, #28
 80044a2:	4605      	mov	r5, r0
 80044a4:	460c      	mov	r4, r1
 80044a6:	d454      	bmi.n	8004552 <__sflush_r+0xba>
 80044a8:	684b      	ldr	r3, [r1, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	dc02      	bgt.n	80044b4 <__sflush_r+0x1c>
 80044ae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	dd48      	ble.n	8004546 <__sflush_r+0xae>
 80044b4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80044b6:	2e00      	cmp	r6, #0
 80044b8:	d045      	beq.n	8004546 <__sflush_r+0xae>
 80044ba:	2300      	movs	r3, #0
 80044bc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80044c0:	682f      	ldr	r7, [r5, #0]
 80044c2:	6a21      	ldr	r1, [r4, #32]
 80044c4:	602b      	str	r3, [r5, #0]
 80044c6:	d030      	beq.n	800452a <__sflush_r+0x92>
 80044c8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80044ca:	89a3      	ldrh	r3, [r4, #12]
 80044cc:	0759      	lsls	r1, r3, #29
 80044ce:	d505      	bpl.n	80044dc <__sflush_r+0x44>
 80044d0:	6863      	ldr	r3, [r4, #4]
 80044d2:	1ad2      	subs	r2, r2, r3
 80044d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80044d6:	b10b      	cbz	r3, 80044dc <__sflush_r+0x44>
 80044d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80044da:	1ad2      	subs	r2, r2, r3
 80044dc:	2300      	movs	r3, #0
 80044de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80044e0:	6a21      	ldr	r1, [r4, #32]
 80044e2:	4628      	mov	r0, r5
 80044e4:	47b0      	blx	r6
 80044e6:	1c43      	adds	r3, r0, #1
 80044e8:	89a3      	ldrh	r3, [r4, #12]
 80044ea:	d106      	bne.n	80044fa <__sflush_r+0x62>
 80044ec:	6829      	ldr	r1, [r5, #0]
 80044ee:	291d      	cmp	r1, #29
 80044f0:	d82b      	bhi.n	800454a <__sflush_r+0xb2>
 80044f2:	4a2a      	ldr	r2, [pc, #168]	@ (800459c <__sflush_r+0x104>)
 80044f4:	40ca      	lsrs	r2, r1
 80044f6:	07d6      	lsls	r6, r2, #31
 80044f8:	d527      	bpl.n	800454a <__sflush_r+0xb2>
 80044fa:	2200      	movs	r2, #0
 80044fc:	6062      	str	r2, [r4, #4]
 80044fe:	04d9      	lsls	r1, r3, #19
 8004500:	6922      	ldr	r2, [r4, #16]
 8004502:	6022      	str	r2, [r4, #0]
 8004504:	d504      	bpl.n	8004510 <__sflush_r+0x78>
 8004506:	1c42      	adds	r2, r0, #1
 8004508:	d101      	bne.n	800450e <__sflush_r+0x76>
 800450a:	682b      	ldr	r3, [r5, #0]
 800450c:	b903      	cbnz	r3, 8004510 <__sflush_r+0x78>
 800450e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004510:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004512:	602f      	str	r7, [r5, #0]
 8004514:	b1b9      	cbz	r1, 8004546 <__sflush_r+0xae>
 8004516:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800451a:	4299      	cmp	r1, r3
 800451c:	d002      	beq.n	8004524 <__sflush_r+0x8c>
 800451e:	4628      	mov	r0, r5
 8004520:	f001 f86a 	bl	80055f8 <_free_r>
 8004524:	2300      	movs	r3, #0
 8004526:	6363      	str	r3, [r4, #52]	@ 0x34
 8004528:	e00d      	b.n	8004546 <__sflush_r+0xae>
 800452a:	2301      	movs	r3, #1
 800452c:	4628      	mov	r0, r5
 800452e:	47b0      	blx	r6
 8004530:	4602      	mov	r2, r0
 8004532:	1c50      	adds	r0, r2, #1
 8004534:	d1c9      	bne.n	80044ca <__sflush_r+0x32>
 8004536:	682b      	ldr	r3, [r5, #0]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d0c6      	beq.n	80044ca <__sflush_r+0x32>
 800453c:	2b1d      	cmp	r3, #29
 800453e:	d001      	beq.n	8004544 <__sflush_r+0xac>
 8004540:	2b16      	cmp	r3, #22
 8004542:	d11e      	bne.n	8004582 <__sflush_r+0xea>
 8004544:	602f      	str	r7, [r5, #0]
 8004546:	2000      	movs	r0, #0
 8004548:	e022      	b.n	8004590 <__sflush_r+0xf8>
 800454a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800454e:	b21b      	sxth	r3, r3
 8004550:	e01b      	b.n	800458a <__sflush_r+0xf2>
 8004552:	690f      	ldr	r7, [r1, #16]
 8004554:	2f00      	cmp	r7, #0
 8004556:	d0f6      	beq.n	8004546 <__sflush_r+0xae>
 8004558:	0793      	lsls	r3, r2, #30
 800455a:	680e      	ldr	r6, [r1, #0]
 800455c:	bf08      	it	eq
 800455e:	694b      	ldreq	r3, [r1, #20]
 8004560:	600f      	str	r7, [r1, #0]
 8004562:	bf18      	it	ne
 8004564:	2300      	movne	r3, #0
 8004566:	eba6 0807 	sub.w	r8, r6, r7
 800456a:	608b      	str	r3, [r1, #8]
 800456c:	f1b8 0f00 	cmp.w	r8, #0
 8004570:	dde9      	ble.n	8004546 <__sflush_r+0xae>
 8004572:	6a21      	ldr	r1, [r4, #32]
 8004574:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004576:	4643      	mov	r3, r8
 8004578:	463a      	mov	r2, r7
 800457a:	4628      	mov	r0, r5
 800457c:	47b0      	blx	r6
 800457e:	2800      	cmp	r0, #0
 8004580:	dc08      	bgt.n	8004594 <__sflush_r+0xfc>
 8004582:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004586:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800458a:	81a3      	strh	r3, [r4, #12]
 800458c:	f04f 30ff 	mov.w	r0, #4294967295
 8004590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004594:	4407      	add	r7, r0
 8004596:	eba8 0800 	sub.w	r8, r8, r0
 800459a:	e7e7      	b.n	800456c <__sflush_r+0xd4>
 800459c:	20400001 	.word	0x20400001

080045a0 <_fflush_r>:
 80045a0:	b538      	push	{r3, r4, r5, lr}
 80045a2:	690b      	ldr	r3, [r1, #16]
 80045a4:	4605      	mov	r5, r0
 80045a6:	460c      	mov	r4, r1
 80045a8:	b913      	cbnz	r3, 80045b0 <_fflush_r+0x10>
 80045aa:	2500      	movs	r5, #0
 80045ac:	4628      	mov	r0, r5
 80045ae:	bd38      	pop	{r3, r4, r5, pc}
 80045b0:	b118      	cbz	r0, 80045ba <_fflush_r+0x1a>
 80045b2:	6a03      	ldr	r3, [r0, #32]
 80045b4:	b90b      	cbnz	r3, 80045ba <_fflush_r+0x1a>
 80045b6:	f000 f8bb 	bl	8004730 <__sinit>
 80045ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d0f3      	beq.n	80045aa <_fflush_r+0xa>
 80045c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80045c4:	07d0      	lsls	r0, r2, #31
 80045c6:	d404      	bmi.n	80045d2 <_fflush_r+0x32>
 80045c8:	0599      	lsls	r1, r3, #22
 80045ca:	d402      	bmi.n	80045d2 <_fflush_r+0x32>
 80045cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80045ce:	f000 f9b8 	bl	8004942 <__retarget_lock_acquire_recursive>
 80045d2:	4628      	mov	r0, r5
 80045d4:	4621      	mov	r1, r4
 80045d6:	f7ff ff5f 	bl	8004498 <__sflush_r>
 80045da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80045dc:	07da      	lsls	r2, r3, #31
 80045de:	4605      	mov	r5, r0
 80045e0:	d4e4      	bmi.n	80045ac <_fflush_r+0xc>
 80045e2:	89a3      	ldrh	r3, [r4, #12]
 80045e4:	059b      	lsls	r3, r3, #22
 80045e6:	d4e1      	bmi.n	80045ac <_fflush_r+0xc>
 80045e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80045ea:	f000 f9ab 	bl	8004944 <__retarget_lock_release_recursive>
 80045ee:	e7dd      	b.n	80045ac <_fflush_r+0xc>

080045f0 <fflush>:
 80045f0:	4601      	mov	r1, r0
 80045f2:	b920      	cbnz	r0, 80045fe <fflush+0xe>
 80045f4:	4a04      	ldr	r2, [pc, #16]	@ (8004608 <fflush+0x18>)
 80045f6:	4905      	ldr	r1, [pc, #20]	@ (800460c <fflush+0x1c>)
 80045f8:	4805      	ldr	r0, [pc, #20]	@ (8004610 <fflush+0x20>)
 80045fa:	f000 b8b1 	b.w	8004760 <_fwalk_sglue>
 80045fe:	4b05      	ldr	r3, [pc, #20]	@ (8004614 <fflush+0x24>)
 8004600:	6818      	ldr	r0, [r3, #0]
 8004602:	f7ff bfcd 	b.w	80045a0 <_fflush_r>
 8004606:	bf00      	nop
 8004608:	2000003c 	.word	0x2000003c
 800460c:	080045a1 	.word	0x080045a1
 8004610:	2000004c 	.word	0x2000004c
 8004614:	20000048 	.word	0x20000048

08004618 <std>:
 8004618:	2300      	movs	r3, #0
 800461a:	b510      	push	{r4, lr}
 800461c:	4604      	mov	r4, r0
 800461e:	e9c0 3300 	strd	r3, r3, [r0]
 8004622:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004626:	6083      	str	r3, [r0, #8]
 8004628:	8181      	strh	r1, [r0, #12]
 800462a:	6643      	str	r3, [r0, #100]	@ 0x64
 800462c:	81c2      	strh	r2, [r0, #14]
 800462e:	6183      	str	r3, [r0, #24]
 8004630:	4619      	mov	r1, r3
 8004632:	2208      	movs	r2, #8
 8004634:	305c      	adds	r0, #92	@ 0x5c
 8004636:	f000 f906 	bl	8004846 <memset>
 800463a:	4b0d      	ldr	r3, [pc, #52]	@ (8004670 <std+0x58>)
 800463c:	6263      	str	r3, [r4, #36]	@ 0x24
 800463e:	4b0d      	ldr	r3, [pc, #52]	@ (8004674 <std+0x5c>)
 8004640:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004642:	4b0d      	ldr	r3, [pc, #52]	@ (8004678 <std+0x60>)
 8004644:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004646:	4b0d      	ldr	r3, [pc, #52]	@ (800467c <std+0x64>)
 8004648:	6323      	str	r3, [r4, #48]	@ 0x30
 800464a:	4b0d      	ldr	r3, [pc, #52]	@ (8004680 <std+0x68>)
 800464c:	6224      	str	r4, [r4, #32]
 800464e:	429c      	cmp	r4, r3
 8004650:	d006      	beq.n	8004660 <std+0x48>
 8004652:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004656:	4294      	cmp	r4, r2
 8004658:	d002      	beq.n	8004660 <std+0x48>
 800465a:	33d0      	adds	r3, #208	@ 0xd0
 800465c:	429c      	cmp	r4, r3
 800465e:	d105      	bne.n	800466c <std+0x54>
 8004660:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004668:	f000 b96a 	b.w	8004940 <__retarget_lock_init_recursive>
 800466c:	bd10      	pop	{r4, pc}
 800466e:	bf00      	nop
 8004670:	080047c1 	.word	0x080047c1
 8004674:	080047e3 	.word	0x080047e3
 8004678:	0800481b 	.word	0x0800481b
 800467c:	0800483f 	.word	0x0800483f
 8004680:	2000027c 	.word	0x2000027c

08004684 <stdio_exit_handler>:
 8004684:	4a02      	ldr	r2, [pc, #8]	@ (8004690 <stdio_exit_handler+0xc>)
 8004686:	4903      	ldr	r1, [pc, #12]	@ (8004694 <stdio_exit_handler+0x10>)
 8004688:	4803      	ldr	r0, [pc, #12]	@ (8004698 <stdio_exit_handler+0x14>)
 800468a:	f000 b869 	b.w	8004760 <_fwalk_sglue>
 800468e:	bf00      	nop
 8004690:	2000003c 	.word	0x2000003c
 8004694:	080045a1 	.word	0x080045a1
 8004698:	2000004c 	.word	0x2000004c

0800469c <cleanup_stdio>:
 800469c:	6841      	ldr	r1, [r0, #4]
 800469e:	4b0c      	ldr	r3, [pc, #48]	@ (80046d0 <cleanup_stdio+0x34>)
 80046a0:	4299      	cmp	r1, r3
 80046a2:	b510      	push	{r4, lr}
 80046a4:	4604      	mov	r4, r0
 80046a6:	d001      	beq.n	80046ac <cleanup_stdio+0x10>
 80046a8:	f7ff ff7a 	bl	80045a0 <_fflush_r>
 80046ac:	68a1      	ldr	r1, [r4, #8]
 80046ae:	4b09      	ldr	r3, [pc, #36]	@ (80046d4 <cleanup_stdio+0x38>)
 80046b0:	4299      	cmp	r1, r3
 80046b2:	d002      	beq.n	80046ba <cleanup_stdio+0x1e>
 80046b4:	4620      	mov	r0, r4
 80046b6:	f7ff ff73 	bl	80045a0 <_fflush_r>
 80046ba:	68e1      	ldr	r1, [r4, #12]
 80046bc:	4b06      	ldr	r3, [pc, #24]	@ (80046d8 <cleanup_stdio+0x3c>)
 80046be:	4299      	cmp	r1, r3
 80046c0:	d004      	beq.n	80046cc <cleanup_stdio+0x30>
 80046c2:	4620      	mov	r0, r4
 80046c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046c8:	f7ff bf6a 	b.w	80045a0 <_fflush_r>
 80046cc:	bd10      	pop	{r4, pc}
 80046ce:	bf00      	nop
 80046d0:	2000027c 	.word	0x2000027c
 80046d4:	200002e4 	.word	0x200002e4
 80046d8:	2000034c 	.word	0x2000034c

080046dc <global_stdio_init.part.0>:
 80046dc:	b510      	push	{r4, lr}
 80046de:	4b0b      	ldr	r3, [pc, #44]	@ (800470c <global_stdio_init.part.0+0x30>)
 80046e0:	4c0b      	ldr	r4, [pc, #44]	@ (8004710 <global_stdio_init.part.0+0x34>)
 80046e2:	4a0c      	ldr	r2, [pc, #48]	@ (8004714 <global_stdio_init.part.0+0x38>)
 80046e4:	601a      	str	r2, [r3, #0]
 80046e6:	4620      	mov	r0, r4
 80046e8:	2200      	movs	r2, #0
 80046ea:	2104      	movs	r1, #4
 80046ec:	f7ff ff94 	bl	8004618 <std>
 80046f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80046f4:	2201      	movs	r2, #1
 80046f6:	2109      	movs	r1, #9
 80046f8:	f7ff ff8e 	bl	8004618 <std>
 80046fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004700:	2202      	movs	r2, #2
 8004702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004706:	2112      	movs	r1, #18
 8004708:	f7ff bf86 	b.w	8004618 <std>
 800470c:	200003b4 	.word	0x200003b4
 8004710:	2000027c 	.word	0x2000027c
 8004714:	08004685 	.word	0x08004685

08004718 <__sfp_lock_acquire>:
 8004718:	4801      	ldr	r0, [pc, #4]	@ (8004720 <__sfp_lock_acquire+0x8>)
 800471a:	f000 b912 	b.w	8004942 <__retarget_lock_acquire_recursive>
 800471e:	bf00      	nop
 8004720:	200003bd 	.word	0x200003bd

08004724 <__sfp_lock_release>:
 8004724:	4801      	ldr	r0, [pc, #4]	@ (800472c <__sfp_lock_release+0x8>)
 8004726:	f000 b90d 	b.w	8004944 <__retarget_lock_release_recursive>
 800472a:	bf00      	nop
 800472c:	200003bd 	.word	0x200003bd

08004730 <__sinit>:
 8004730:	b510      	push	{r4, lr}
 8004732:	4604      	mov	r4, r0
 8004734:	f7ff fff0 	bl	8004718 <__sfp_lock_acquire>
 8004738:	6a23      	ldr	r3, [r4, #32]
 800473a:	b11b      	cbz	r3, 8004744 <__sinit+0x14>
 800473c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004740:	f7ff bff0 	b.w	8004724 <__sfp_lock_release>
 8004744:	4b04      	ldr	r3, [pc, #16]	@ (8004758 <__sinit+0x28>)
 8004746:	6223      	str	r3, [r4, #32]
 8004748:	4b04      	ldr	r3, [pc, #16]	@ (800475c <__sinit+0x2c>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d1f5      	bne.n	800473c <__sinit+0xc>
 8004750:	f7ff ffc4 	bl	80046dc <global_stdio_init.part.0>
 8004754:	e7f2      	b.n	800473c <__sinit+0xc>
 8004756:	bf00      	nop
 8004758:	0800469d 	.word	0x0800469d
 800475c:	200003b4 	.word	0x200003b4

08004760 <_fwalk_sglue>:
 8004760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004764:	4607      	mov	r7, r0
 8004766:	4688      	mov	r8, r1
 8004768:	4614      	mov	r4, r2
 800476a:	2600      	movs	r6, #0
 800476c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004770:	f1b9 0901 	subs.w	r9, r9, #1
 8004774:	d505      	bpl.n	8004782 <_fwalk_sglue+0x22>
 8004776:	6824      	ldr	r4, [r4, #0]
 8004778:	2c00      	cmp	r4, #0
 800477a:	d1f7      	bne.n	800476c <_fwalk_sglue+0xc>
 800477c:	4630      	mov	r0, r6
 800477e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004782:	89ab      	ldrh	r3, [r5, #12]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d907      	bls.n	8004798 <_fwalk_sglue+0x38>
 8004788:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800478c:	3301      	adds	r3, #1
 800478e:	d003      	beq.n	8004798 <_fwalk_sglue+0x38>
 8004790:	4629      	mov	r1, r5
 8004792:	4638      	mov	r0, r7
 8004794:	47c0      	blx	r8
 8004796:	4306      	orrs	r6, r0
 8004798:	3568      	adds	r5, #104	@ 0x68
 800479a:	e7e9      	b.n	8004770 <_fwalk_sglue+0x10>

0800479c <iprintf>:
 800479c:	b40f      	push	{r0, r1, r2, r3}
 800479e:	b507      	push	{r0, r1, r2, lr}
 80047a0:	4906      	ldr	r1, [pc, #24]	@ (80047bc <iprintf+0x20>)
 80047a2:	ab04      	add	r3, sp, #16
 80047a4:	6808      	ldr	r0, [r1, #0]
 80047a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80047aa:	6881      	ldr	r1, [r0, #8]
 80047ac:	9301      	str	r3, [sp, #4]
 80047ae:	f001 fbc7 	bl	8005f40 <_vfiprintf_r>
 80047b2:	b003      	add	sp, #12
 80047b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80047b8:	b004      	add	sp, #16
 80047ba:	4770      	bx	lr
 80047bc:	20000048 	.word	0x20000048

080047c0 <__sread>:
 80047c0:	b510      	push	{r4, lr}
 80047c2:	460c      	mov	r4, r1
 80047c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047c8:	f000 f86c 	bl	80048a4 <_read_r>
 80047cc:	2800      	cmp	r0, #0
 80047ce:	bfab      	itete	ge
 80047d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80047d2:	89a3      	ldrhlt	r3, [r4, #12]
 80047d4:	181b      	addge	r3, r3, r0
 80047d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80047da:	bfac      	ite	ge
 80047dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80047de:	81a3      	strhlt	r3, [r4, #12]
 80047e0:	bd10      	pop	{r4, pc}

080047e2 <__swrite>:
 80047e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047e6:	461f      	mov	r7, r3
 80047e8:	898b      	ldrh	r3, [r1, #12]
 80047ea:	05db      	lsls	r3, r3, #23
 80047ec:	4605      	mov	r5, r0
 80047ee:	460c      	mov	r4, r1
 80047f0:	4616      	mov	r6, r2
 80047f2:	d505      	bpl.n	8004800 <__swrite+0x1e>
 80047f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047f8:	2302      	movs	r3, #2
 80047fa:	2200      	movs	r2, #0
 80047fc:	f000 f840 	bl	8004880 <_lseek_r>
 8004800:	89a3      	ldrh	r3, [r4, #12]
 8004802:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004806:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800480a:	81a3      	strh	r3, [r4, #12]
 800480c:	4632      	mov	r2, r6
 800480e:	463b      	mov	r3, r7
 8004810:	4628      	mov	r0, r5
 8004812:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004816:	f000 b857 	b.w	80048c8 <_write_r>

0800481a <__sseek>:
 800481a:	b510      	push	{r4, lr}
 800481c:	460c      	mov	r4, r1
 800481e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004822:	f000 f82d 	bl	8004880 <_lseek_r>
 8004826:	1c43      	adds	r3, r0, #1
 8004828:	89a3      	ldrh	r3, [r4, #12]
 800482a:	bf15      	itete	ne
 800482c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800482e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004832:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004836:	81a3      	strheq	r3, [r4, #12]
 8004838:	bf18      	it	ne
 800483a:	81a3      	strhne	r3, [r4, #12]
 800483c:	bd10      	pop	{r4, pc}

0800483e <__sclose>:
 800483e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004842:	f000 b80d 	b.w	8004860 <_close_r>

08004846 <memset>:
 8004846:	4402      	add	r2, r0
 8004848:	4603      	mov	r3, r0
 800484a:	4293      	cmp	r3, r2
 800484c:	d100      	bne.n	8004850 <memset+0xa>
 800484e:	4770      	bx	lr
 8004850:	f803 1b01 	strb.w	r1, [r3], #1
 8004854:	e7f9      	b.n	800484a <memset+0x4>
	...

08004858 <_localeconv_r>:
 8004858:	4800      	ldr	r0, [pc, #0]	@ (800485c <_localeconv_r+0x4>)
 800485a:	4770      	bx	lr
 800485c:	20000188 	.word	0x20000188

08004860 <_close_r>:
 8004860:	b538      	push	{r3, r4, r5, lr}
 8004862:	4d06      	ldr	r5, [pc, #24]	@ (800487c <_close_r+0x1c>)
 8004864:	2300      	movs	r3, #0
 8004866:	4604      	mov	r4, r0
 8004868:	4608      	mov	r0, r1
 800486a:	602b      	str	r3, [r5, #0]
 800486c:	f7fd f9c1 	bl	8001bf2 <_close>
 8004870:	1c43      	adds	r3, r0, #1
 8004872:	d102      	bne.n	800487a <_close_r+0x1a>
 8004874:	682b      	ldr	r3, [r5, #0]
 8004876:	b103      	cbz	r3, 800487a <_close_r+0x1a>
 8004878:	6023      	str	r3, [r4, #0]
 800487a:	bd38      	pop	{r3, r4, r5, pc}
 800487c:	200003b8 	.word	0x200003b8

08004880 <_lseek_r>:
 8004880:	b538      	push	{r3, r4, r5, lr}
 8004882:	4d07      	ldr	r5, [pc, #28]	@ (80048a0 <_lseek_r+0x20>)
 8004884:	4604      	mov	r4, r0
 8004886:	4608      	mov	r0, r1
 8004888:	4611      	mov	r1, r2
 800488a:	2200      	movs	r2, #0
 800488c:	602a      	str	r2, [r5, #0]
 800488e:	461a      	mov	r2, r3
 8004890:	f7fd f9d6 	bl	8001c40 <_lseek>
 8004894:	1c43      	adds	r3, r0, #1
 8004896:	d102      	bne.n	800489e <_lseek_r+0x1e>
 8004898:	682b      	ldr	r3, [r5, #0]
 800489a:	b103      	cbz	r3, 800489e <_lseek_r+0x1e>
 800489c:	6023      	str	r3, [r4, #0]
 800489e:	bd38      	pop	{r3, r4, r5, pc}
 80048a0:	200003b8 	.word	0x200003b8

080048a4 <_read_r>:
 80048a4:	b538      	push	{r3, r4, r5, lr}
 80048a6:	4d07      	ldr	r5, [pc, #28]	@ (80048c4 <_read_r+0x20>)
 80048a8:	4604      	mov	r4, r0
 80048aa:	4608      	mov	r0, r1
 80048ac:	4611      	mov	r1, r2
 80048ae:	2200      	movs	r2, #0
 80048b0:	602a      	str	r2, [r5, #0]
 80048b2:	461a      	mov	r2, r3
 80048b4:	f7fd f980 	bl	8001bb8 <_read>
 80048b8:	1c43      	adds	r3, r0, #1
 80048ba:	d102      	bne.n	80048c2 <_read_r+0x1e>
 80048bc:	682b      	ldr	r3, [r5, #0]
 80048be:	b103      	cbz	r3, 80048c2 <_read_r+0x1e>
 80048c0:	6023      	str	r3, [r4, #0]
 80048c2:	bd38      	pop	{r3, r4, r5, pc}
 80048c4:	200003b8 	.word	0x200003b8

080048c8 <_write_r>:
 80048c8:	b538      	push	{r3, r4, r5, lr}
 80048ca:	4d07      	ldr	r5, [pc, #28]	@ (80048e8 <_write_r+0x20>)
 80048cc:	4604      	mov	r4, r0
 80048ce:	4608      	mov	r0, r1
 80048d0:	4611      	mov	r1, r2
 80048d2:	2200      	movs	r2, #0
 80048d4:	602a      	str	r2, [r5, #0]
 80048d6:	461a      	mov	r2, r3
 80048d8:	f7fd f89a 	bl	8001a10 <_write>
 80048dc:	1c43      	adds	r3, r0, #1
 80048de:	d102      	bne.n	80048e6 <_write_r+0x1e>
 80048e0:	682b      	ldr	r3, [r5, #0]
 80048e2:	b103      	cbz	r3, 80048e6 <_write_r+0x1e>
 80048e4:	6023      	str	r3, [r4, #0]
 80048e6:	bd38      	pop	{r3, r4, r5, pc}
 80048e8:	200003b8 	.word	0x200003b8

080048ec <__errno>:
 80048ec:	4b01      	ldr	r3, [pc, #4]	@ (80048f4 <__errno+0x8>)
 80048ee:	6818      	ldr	r0, [r3, #0]
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	20000048 	.word	0x20000048

080048f8 <__libc_init_array>:
 80048f8:	b570      	push	{r4, r5, r6, lr}
 80048fa:	4d0d      	ldr	r5, [pc, #52]	@ (8004930 <__libc_init_array+0x38>)
 80048fc:	4c0d      	ldr	r4, [pc, #52]	@ (8004934 <__libc_init_array+0x3c>)
 80048fe:	1b64      	subs	r4, r4, r5
 8004900:	10a4      	asrs	r4, r4, #2
 8004902:	2600      	movs	r6, #0
 8004904:	42a6      	cmp	r6, r4
 8004906:	d109      	bne.n	800491c <__libc_init_array+0x24>
 8004908:	4d0b      	ldr	r5, [pc, #44]	@ (8004938 <__libc_init_array+0x40>)
 800490a:	4c0c      	ldr	r4, [pc, #48]	@ (800493c <__libc_init_array+0x44>)
 800490c:	f001 fe16 	bl	800653c <_init>
 8004910:	1b64      	subs	r4, r4, r5
 8004912:	10a4      	asrs	r4, r4, #2
 8004914:	2600      	movs	r6, #0
 8004916:	42a6      	cmp	r6, r4
 8004918:	d105      	bne.n	8004926 <__libc_init_array+0x2e>
 800491a:	bd70      	pop	{r4, r5, r6, pc}
 800491c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004920:	4798      	blx	r3
 8004922:	3601      	adds	r6, #1
 8004924:	e7ee      	b.n	8004904 <__libc_init_array+0xc>
 8004926:	f855 3b04 	ldr.w	r3, [r5], #4
 800492a:	4798      	blx	r3
 800492c:	3601      	adds	r6, #1
 800492e:	e7f2      	b.n	8004916 <__libc_init_array+0x1e>
 8004930:	08006914 	.word	0x08006914
 8004934:	08006914 	.word	0x08006914
 8004938:	08006914 	.word	0x08006914
 800493c:	08006918 	.word	0x08006918

08004940 <__retarget_lock_init_recursive>:
 8004940:	4770      	bx	lr

08004942 <__retarget_lock_acquire_recursive>:
 8004942:	4770      	bx	lr

08004944 <__retarget_lock_release_recursive>:
 8004944:	4770      	bx	lr

08004946 <quorem>:
 8004946:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800494a:	6903      	ldr	r3, [r0, #16]
 800494c:	690c      	ldr	r4, [r1, #16]
 800494e:	42a3      	cmp	r3, r4
 8004950:	4607      	mov	r7, r0
 8004952:	db7e      	blt.n	8004a52 <quorem+0x10c>
 8004954:	3c01      	subs	r4, #1
 8004956:	f101 0814 	add.w	r8, r1, #20
 800495a:	00a3      	lsls	r3, r4, #2
 800495c:	f100 0514 	add.w	r5, r0, #20
 8004960:	9300      	str	r3, [sp, #0]
 8004962:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004966:	9301      	str	r3, [sp, #4]
 8004968:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800496c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004970:	3301      	adds	r3, #1
 8004972:	429a      	cmp	r2, r3
 8004974:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004978:	fbb2 f6f3 	udiv	r6, r2, r3
 800497c:	d32e      	bcc.n	80049dc <quorem+0x96>
 800497e:	f04f 0a00 	mov.w	sl, #0
 8004982:	46c4      	mov	ip, r8
 8004984:	46ae      	mov	lr, r5
 8004986:	46d3      	mov	fp, sl
 8004988:	f85c 3b04 	ldr.w	r3, [ip], #4
 800498c:	b298      	uxth	r0, r3
 800498e:	fb06 a000 	mla	r0, r6, r0, sl
 8004992:	0c02      	lsrs	r2, r0, #16
 8004994:	0c1b      	lsrs	r3, r3, #16
 8004996:	fb06 2303 	mla	r3, r6, r3, r2
 800499a:	f8de 2000 	ldr.w	r2, [lr]
 800499e:	b280      	uxth	r0, r0
 80049a0:	b292      	uxth	r2, r2
 80049a2:	1a12      	subs	r2, r2, r0
 80049a4:	445a      	add	r2, fp
 80049a6:	f8de 0000 	ldr.w	r0, [lr]
 80049aa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80049b4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80049b8:	b292      	uxth	r2, r2
 80049ba:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80049be:	45e1      	cmp	r9, ip
 80049c0:	f84e 2b04 	str.w	r2, [lr], #4
 80049c4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80049c8:	d2de      	bcs.n	8004988 <quorem+0x42>
 80049ca:	9b00      	ldr	r3, [sp, #0]
 80049cc:	58eb      	ldr	r3, [r5, r3]
 80049ce:	b92b      	cbnz	r3, 80049dc <quorem+0x96>
 80049d0:	9b01      	ldr	r3, [sp, #4]
 80049d2:	3b04      	subs	r3, #4
 80049d4:	429d      	cmp	r5, r3
 80049d6:	461a      	mov	r2, r3
 80049d8:	d32f      	bcc.n	8004a3a <quorem+0xf4>
 80049da:	613c      	str	r4, [r7, #16]
 80049dc:	4638      	mov	r0, r7
 80049de:	f001 f97d 	bl	8005cdc <__mcmp>
 80049e2:	2800      	cmp	r0, #0
 80049e4:	db25      	blt.n	8004a32 <quorem+0xec>
 80049e6:	4629      	mov	r1, r5
 80049e8:	2000      	movs	r0, #0
 80049ea:	f858 2b04 	ldr.w	r2, [r8], #4
 80049ee:	f8d1 c000 	ldr.w	ip, [r1]
 80049f2:	fa1f fe82 	uxth.w	lr, r2
 80049f6:	fa1f f38c 	uxth.w	r3, ip
 80049fa:	eba3 030e 	sub.w	r3, r3, lr
 80049fe:	4403      	add	r3, r0
 8004a00:	0c12      	lsrs	r2, r2, #16
 8004a02:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004a06:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a10:	45c1      	cmp	r9, r8
 8004a12:	f841 3b04 	str.w	r3, [r1], #4
 8004a16:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004a1a:	d2e6      	bcs.n	80049ea <quorem+0xa4>
 8004a1c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004a20:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004a24:	b922      	cbnz	r2, 8004a30 <quorem+0xea>
 8004a26:	3b04      	subs	r3, #4
 8004a28:	429d      	cmp	r5, r3
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	d30b      	bcc.n	8004a46 <quorem+0x100>
 8004a2e:	613c      	str	r4, [r7, #16]
 8004a30:	3601      	adds	r6, #1
 8004a32:	4630      	mov	r0, r6
 8004a34:	b003      	add	sp, #12
 8004a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a3a:	6812      	ldr	r2, [r2, #0]
 8004a3c:	3b04      	subs	r3, #4
 8004a3e:	2a00      	cmp	r2, #0
 8004a40:	d1cb      	bne.n	80049da <quorem+0x94>
 8004a42:	3c01      	subs	r4, #1
 8004a44:	e7c6      	b.n	80049d4 <quorem+0x8e>
 8004a46:	6812      	ldr	r2, [r2, #0]
 8004a48:	3b04      	subs	r3, #4
 8004a4a:	2a00      	cmp	r2, #0
 8004a4c:	d1ef      	bne.n	8004a2e <quorem+0xe8>
 8004a4e:	3c01      	subs	r4, #1
 8004a50:	e7ea      	b.n	8004a28 <quorem+0xe2>
 8004a52:	2000      	movs	r0, #0
 8004a54:	e7ee      	b.n	8004a34 <quorem+0xee>
	...

08004a58 <_dtoa_r>:
 8004a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a5c:	69c7      	ldr	r7, [r0, #28]
 8004a5e:	b097      	sub	sp, #92	@ 0x5c
 8004a60:	ed8d 0b04 	vstr	d0, [sp, #16]
 8004a64:	ec55 4b10 	vmov	r4, r5, d0
 8004a68:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8004a6a:	9107      	str	r1, [sp, #28]
 8004a6c:	4681      	mov	r9, r0
 8004a6e:	920c      	str	r2, [sp, #48]	@ 0x30
 8004a70:	9311      	str	r3, [sp, #68]	@ 0x44
 8004a72:	b97f      	cbnz	r7, 8004a94 <_dtoa_r+0x3c>
 8004a74:	2010      	movs	r0, #16
 8004a76:	f000 fe09 	bl	800568c <malloc>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	f8c9 001c 	str.w	r0, [r9, #28]
 8004a80:	b920      	cbnz	r0, 8004a8c <_dtoa_r+0x34>
 8004a82:	4ba9      	ldr	r3, [pc, #676]	@ (8004d28 <_dtoa_r+0x2d0>)
 8004a84:	21ef      	movs	r1, #239	@ 0xef
 8004a86:	48a9      	ldr	r0, [pc, #676]	@ (8004d2c <_dtoa_r+0x2d4>)
 8004a88:	f001 fc24 	bl	80062d4 <__assert_func>
 8004a8c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004a90:	6007      	str	r7, [r0, #0]
 8004a92:	60c7      	str	r7, [r0, #12]
 8004a94:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004a98:	6819      	ldr	r1, [r3, #0]
 8004a9a:	b159      	cbz	r1, 8004ab4 <_dtoa_r+0x5c>
 8004a9c:	685a      	ldr	r2, [r3, #4]
 8004a9e:	604a      	str	r2, [r1, #4]
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	4093      	lsls	r3, r2
 8004aa4:	608b      	str	r3, [r1, #8]
 8004aa6:	4648      	mov	r0, r9
 8004aa8:	f000 fee6 	bl	8005878 <_Bfree>
 8004aac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	601a      	str	r2, [r3, #0]
 8004ab4:	1e2b      	subs	r3, r5, #0
 8004ab6:	bfb9      	ittee	lt
 8004ab8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004abc:	9305      	strlt	r3, [sp, #20]
 8004abe:	2300      	movge	r3, #0
 8004ac0:	6033      	strge	r3, [r6, #0]
 8004ac2:	9f05      	ldr	r7, [sp, #20]
 8004ac4:	4b9a      	ldr	r3, [pc, #616]	@ (8004d30 <_dtoa_r+0x2d8>)
 8004ac6:	bfbc      	itt	lt
 8004ac8:	2201      	movlt	r2, #1
 8004aca:	6032      	strlt	r2, [r6, #0]
 8004acc:	43bb      	bics	r3, r7
 8004ace:	d112      	bne.n	8004af6 <_dtoa_r+0x9e>
 8004ad0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8004ad2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004ad6:	6013      	str	r3, [r2, #0]
 8004ad8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004adc:	4323      	orrs	r3, r4
 8004ade:	f000 855a 	beq.w	8005596 <_dtoa_r+0xb3e>
 8004ae2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004ae4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8004d44 <_dtoa_r+0x2ec>
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	f000 855c 	beq.w	80055a6 <_dtoa_r+0xb4e>
 8004aee:	f10a 0303 	add.w	r3, sl, #3
 8004af2:	f000 bd56 	b.w	80055a2 <_dtoa_r+0xb4a>
 8004af6:	ed9d 7b04 	vldr	d7, [sp, #16]
 8004afa:	2200      	movs	r2, #0
 8004afc:	ec51 0b17 	vmov	r0, r1, d7
 8004b00:	2300      	movs	r3, #0
 8004b02:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8004b06:	f7fb ffdf 	bl	8000ac8 <__aeabi_dcmpeq>
 8004b0a:	4680      	mov	r8, r0
 8004b0c:	b158      	cbz	r0, 8004b26 <_dtoa_r+0xce>
 8004b0e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8004b10:	2301      	movs	r3, #1
 8004b12:	6013      	str	r3, [r2, #0]
 8004b14:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004b16:	b113      	cbz	r3, 8004b1e <_dtoa_r+0xc6>
 8004b18:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8004b1a:	4b86      	ldr	r3, [pc, #536]	@ (8004d34 <_dtoa_r+0x2dc>)
 8004b1c:	6013      	str	r3, [r2, #0]
 8004b1e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8004d48 <_dtoa_r+0x2f0>
 8004b22:	f000 bd40 	b.w	80055a6 <_dtoa_r+0xb4e>
 8004b26:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8004b2a:	aa14      	add	r2, sp, #80	@ 0x50
 8004b2c:	a915      	add	r1, sp, #84	@ 0x54
 8004b2e:	4648      	mov	r0, r9
 8004b30:	f001 f984 	bl	8005e3c <__d2b>
 8004b34:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8004b38:	9002      	str	r0, [sp, #8]
 8004b3a:	2e00      	cmp	r6, #0
 8004b3c:	d078      	beq.n	8004c30 <_dtoa_r+0x1d8>
 8004b3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004b40:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8004b44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b48:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004b4c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004b50:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004b54:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004b58:	4619      	mov	r1, r3
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	4b76      	ldr	r3, [pc, #472]	@ (8004d38 <_dtoa_r+0x2e0>)
 8004b5e:	f7fb fb93 	bl	8000288 <__aeabi_dsub>
 8004b62:	a36b      	add	r3, pc, #428	@ (adr r3, 8004d10 <_dtoa_r+0x2b8>)
 8004b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b68:	f7fb fd46 	bl	80005f8 <__aeabi_dmul>
 8004b6c:	a36a      	add	r3, pc, #424	@ (adr r3, 8004d18 <_dtoa_r+0x2c0>)
 8004b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b72:	f7fb fb8b 	bl	800028c <__adddf3>
 8004b76:	4604      	mov	r4, r0
 8004b78:	4630      	mov	r0, r6
 8004b7a:	460d      	mov	r5, r1
 8004b7c:	f7fb fcd2 	bl	8000524 <__aeabi_i2d>
 8004b80:	a367      	add	r3, pc, #412	@ (adr r3, 8004d20 <_dtoa_r+0x2c8>)
 8004b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b86:	f7fb fd37 	bl	80005f8 <__aeabi_dmul>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	4620      	mov	r0, r4
 8004b90:	4629      	mov	r1, r5
 8004b92:	f7fb fb7b 	bl	800028c <__adddf3>
 8004b96:	4604      	mov	r4, r0
 8004b98:	460d      	mov	r5, r1
 8004b9a:	f7fb ffdd 	bl	8000b58 <__aeabi_d2iz>
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	4607      	mov	r7, r0
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	4620      	mov	r0, r4
 8004ba6:	4629      	mov	r1, r5
 8004ba8:	f7fb ff98 	bl	8000adc <__aeabi_dcmplt>
 8004bac:	b140      	cbz	r0, 8004bc0 <_dtoa_r+0x168>
 8004bae:	4638      	mov	r0, r7
 8004bb0:	f7fb fcb8 	bl	8000524 <__aeabi_i2d>
 8004bb4:	4622      	mov	r2, r4
 8004bb6:	462b      	mov	r3, r5
 8004bb8:	f7fb ff86 	bl	8000ac8 <__aeabi_dcmpeq>
 8004bbc:	b900      	cbnz	r0, 8004bc0 <_dtoa_r+0x168>
 8004bbe:	3f01      	subs	r7, #1
 8004bc0:	2f16      	cmp	r7, #22
 8004bc2:	d852      	bhi.n	8004c6a <_dtoa_r+0x212>
 8004bc4:	4b5d      	ldr	r3, [pc, #372]	@ (8004d3c <_dtoa_r+0x2e4>)
 8004bc6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004bd2:	f7fb ff83 	bl	8000adc <__aeabi_dcmplt>
 8004bd6:	2800      	cmp	r0, #0
 8004bd8:	d049      	beq.n	8004c6e <_dtoa_r+0x216>
 8004bda:	3f01      	subs	r7, #1
 8004bdc:	2300      	movs	r3, #0
 8004bde:	9310      	str	r3, [sp, #64]	@ 0x40
 8004be0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004be2:	1b9b      	subs	r3, r3, r6
 8004be4:	1e5a      	subs	r2, r3, #1
 8004be6:	bf45      	ittet	mi
 8004be8:	f1c3 0301 	rsbmi	r3, r3, #1
 8004bec:	9300      	strmi	r3, [sp, #0]
 8004bee:	2300      	movpl	r3, #0
 8004bf0:	2300      	movmi	r3, #0
 8004bf2:	9206      	str	r2, [sp, #24]
 8004bf4:	bf54      	ite	pl
 8004bf6:	9300      	strpl	r3, [sp, #0]
 8004bf8:	9306      	strmi	r3, [sp, #24]
 8004bfa:	2f00      	cmp	r7, #0
 8004bfc:	db39      	blt.n	8004c72 <_dtoa_r+0x21a>
 8004bfe:	9b06      	ldr	r3, [sp, #24]
 8004c00:	970d      	str	r7, [sp, #52]	@ 0x34
 8004c02:	443b      	add	r3, r7
 8004c04:	9306      	str	r3, [sp, #24]
 8004c06:	2300      	movs	r3, #0
 8004c08:	9308      	str	r3, [sp, #32]
 8004c0a:	9b07      	ldr	r3, [sp, #28]
 8004c0c:	2b09      	cmp	r3, #9
 8004c0e:	d863      	bhi.n	8004cd8 <_dtoa_r+0x280>
 8004c10:	2b05      	cmp	r3, #5
 8004c12:	bfc4      	itt	gt
 8004c14:	3b04      	subgt	r3, #4
 8004c16:	9307      	strgt	r3, [sp, #28]
 8004c18:	9b07      	ldr	r3, [sp, #28]
 8004c1a:	f1a3 0302 	sub.w	r3, r3, #2
 8004c1e:	bfcc      	ite	gt
 8004c20:	2400      	movgt	r4, #0
 8004c22:	2401      	movle	r4, #1
 8004c24:	2b03      	cmp	r3, #3
 8004c26:	d863      	bhi.n	8004cf0 <_dtoa_r+0x298>
 8004c28:	e8df f003 	tbb	[pc, r3]
 8004c2c:	2b375452 	.word	0x2b375452
 8004c30:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8004c34:	441e      	add	r6, r3
 8004c36:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004c3a:	2b20      	cmp	r3, #32
 8004c3c:	bfc1      	itttt	gt
 8004c3e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004c42:	409f      	lslgt	r7, r3
 8004c44:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004c48:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004c4c:	bfd6      	itet	le
 8004c4e:	f1c3 0320 	rsble	r3, r3, #32
 8004c52:	ea47 0003 	orrgt.w	r0, r7, r3
 8004c56:	fa04 f003 	lslle.w	r0, r4, r3
 8004c5a:	f7fb fc53 	bl	8000504 <__aeabi_ui2d>
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004c64:	3e01      	subs	r6, #1
 8004c66:	9212      	str	r2, [sp, #72]	@ 0x48
 8004c68:	e776      	b.n	8004b58 <_dtoa_r+0x100>
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e7b7      	b.n	8004bde <_dtoa_r+0x186>
 8004c6e:	9010      	str	r0, [sp, #64]	@ 0x40
 8004c70:	e7b6      	b.n	8004be0 <_dtoa_r+0x188>
 8004c72:	9b00      	ldr	r3, [sp, #0]
 8004c74:	1bdb      	subs	r3, r3, r7
 8004c76:	9300      	str	r3, [sp, #0]
 8004c78:	427b      	negs	r3, r7
 8004c7a:	9308      	str	r3, [sp, #32]
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	930d      	str	r3, [sp, #52]	@ 0x34
 8004c80:	e7c3      	b.n	8004c0a <_dtoa_r+0x1b2>
 8004c82:	2301      	movs	r3, #1
 8004c84:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c86:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004c88:	eb07 0b03 	add.w	fp, r7, r3
 8004c8c:	f10b 0301 	add.w	r3, fp, #1
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	9303      	str	r3, [sp, #12]
 8004c94:	bfb8      	it	lt
 8004c96:	2301      	movlt	r3, #1
 8004c98:	e006      	b.n	8004ca8 <_dtoa_r+0x250>
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c9e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	dd28      	ble.n	8004cf6 <_dtoa_r+0x29e>
 8004ca4:	469b      	mov	fp, r3
 8004ca6:	9303      	str	r3, [sp, #12]
 8004ca8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8004cac:	2100      	movs	r1, #0
 8004cae:	2204      	movs	r2, #4
 8004cb0:	f102 0514 	add.w	r5, r2, #20
 8004cb4:	429d      	cmp	r5, r3
 8004cb6:	d926      	bls.n	8004d06 <_dtoa_r+0x2ae>
 8004cb8:	6041      	str	r1, [r0, #4]
 8004cba:	4648      	mov	r0, r9
 8004cbc:	f000 fd9c 	bl	80057f8 <_Balloc>
 8004cc0:	4682      	mov	sl, r0
 8004cc2:	2800      	cmp	r0, #0
 8004cc4:	d142      	bne.n	8004d4c <_dtoa_r+0x2f4>
 8004cc6:	4b1e      	ldr	r3, [pc, #120]	@ (8004d40 <_dtoa_r+0x2e8>)
 8004cc8:	4602      	mov	r2, r0
 8004cca:	f240 11af 	movw	r1, #431	@ 0x1af
 8004cce:	e6da      	b.n	8004a86 <_dtoa_r+0x2e>
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	e7e3      	b.n	8004c9c <_dtoa_r+0x244>
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	e7d5      	b.n	8004c84 <_dtoa_r+0x22c>
 8004cd8:	2401      	movs	r4, #1
 8004cda:	2300      	movs	r3, #0
 8004cdc:	9307      	str	r3, [sp, #28]
 8004cde:	9409      	str	r4, [sp, #36]	@ 0x24
 8004ce0:	f04f 3bff 	mov.w	fp, #4294967295
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f8cd b00c 	str.w	fp, [sp, #12]
 8004cea:	2312      	movs	r3, #18
 8004cec:	920c      	str	r2, [sp, #48]	@ 0x30
 8004cee:	e7db      	b.n	8004ca8 <_dtoa_r+0x250>
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	9309      	str	r3, [sp, #36]	@ 0x24
 8004cf4:	e7f4      	b.n	8004ce0 <_dtoa_r+0x288>
 8004cf6:	f04f 0b01 	mov.w	fp, #1
 8004cfa:	f8cd b00c 	str.w	fp, [sp, #12]
 8004cfe:	465b      	mov	r3, fp
 8004d00:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8004d04:	e7d0      	b.n	8004ca8 <_dtoa_r+0x250>
 8004d06:	3101      	adds	r1, #1
 8004d08:	0052      	lsls	r2, r2, #1
 8004d0a:	e7d1      	b.n	8004cb0 <_dtoa_r+0x258>
 8004d0c:	f3af 8000 	nop.w
 8004d10:	636f4361 	.word	0x636f4361
 8004d14:	3fd287a7 	.word	0x3fd287a7
 8004d18:	8b60c8b3 	.word	0x8b60c8b3
 8004d1c:	3fc68a28 	.word	0x3fc68a28
 8004d20:	509f79fb 	.word	0x509f79fb
 8004d24:	3fd34413 	.word	0x3fd34413
 8004d28:	080065d5 	.word	0x080065d5
 8004d2c:	080065ec 	.word	0x080065ec
 8004d30:	7ff00000 	.word	0x7ff00000
 8004d34:	080065a5 	.word	0x080065a5
 8004d38:	3ff80000 	.word	0x3ff80000
 8004d3c:	08006740 	.word	0x08006740
 8004d40:	08006644 	.word	0x08006644
 8004d44:	080065d1 	.word	0x080065d1
 8004d48:	080065a4 	.word	0x080065a4
 8004d4c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004d50:	6018      	str	r0, [r3, #0]
 8004d52:	9b03      	ldr	r3, [sp, #12]
 8004d54:	2b0e      	cmp	r3, #14
 8004d56:	f200 80a1 	bhi.w	8004e9c <_dtoa_r+0x444>
 8004d5a:	2c00      	cmp	r4, #0
 8004d5c:	f000 809e 	beq.w	8004e9c <_dtoa_r+0x444>
 8004d60:	2f00      	cmp	r7, #0
 8004d62:	dd33      	ble.n	8004dcc <_dtoa_r+0x374>
 8004d64:	4b9c      	ldr	r3, [pc, #624]	@ (8004fd8 <_dtoa_r+0x580>)
 8004d66:	f007 020f 	and.w	r2, r7, #15
 8004d6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004d6e:	ed93 7b00 	vldr	d7, [r3]
 8004d72:	05f8      	lsls	r0, r7, #23
 8004d74:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8004d78:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004d7c:	d516      	bpl.n	8004dac <_dtoa_r+0x354>
 8004d7e:	4b97      	ldr	r3, [pc, #604]	@ (8004fdc <_dtoa_r+0x584>)
 8004d80:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004d84:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004d88:	f7fb fd60 	bl	800084c <__aeabi_ddiv>
 8004d8c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004d90:	f004 040f 	and.w	r4, r4, #15
 8004d94:	2603      	movs	r6, #3
 8004d96:	4d91      	ldr	r5, [pc, #580]	@ (8004fdc <_dtoa_r+0x584>)
 8004d98:	b954      	cbnz	r4, 8004db0 <_dtoa_r+0x358>
 8004d9a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8004d9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004da2:	f7fb fd53 	bl	800084c <__aeabi_ddiv>
 8004da6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004daa:	e028      	b.n	8004dfe <_dtoa_r+0x3a6>
 8004dac:	2602      	movs	r6, #2
 8004dae:	e7f2      	b.n	8004d96 <_dtoa_r+0x33e>
 8004db0:	07e1      	lsls	r1, r4, #31
 8004db2:	d508      	bpl.n	8004dc6 <_dtoa_r+0x36e>
 8004db4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8004db8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004dbc:	f7fb fc1c 	bl	80005f8 <__aeabi_dmul>
 8004dc0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8004dc4:	3601      	adds	r6, #1
 8004dc6:	1064      	asrs	r4, r4, #1
 8004dc8:	3508      	adds	r5, #8
 8004dca:	e7e5      	b.n	8004d98 <_dtoa_r+0x340>
 8004dcc:	f000 80af 	beq.w	8004f2e <_dtoa_r+0x4d6>
 8004dd0:	427c      	negs	r4, r7
 8004dd2:	4b81      	ldr	r3, [pc, #516]	@ (8004fd8 <_dtoa_r+0x580>)
 8004dd4:	4d81      	ldr	r5, [pc, #516]	@ (8004fdc <_dtoa_r+0x584>)
 8004dd6:	f004 020f 	and.w	r2, r4, #15
 8004dda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004de6:	f7fb fc07 	bl	80005f8 <__aeabi_dmul>
 8004dea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004dee:	1124      	asrs	r4, r4, #4
 8004df0:	2300      	movs	r3, #0
 8004df2:	2602      	movs	r6, #2
 8004df4:	2c00      	cmp	r4, #0
 8004df6:	f040 808f 	bne.w	8004f18 <_dtoa_r+0x4c0>
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1d3      	bne.n	8004da6 <_dtoa_r+0x34e>
 8004dfe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004e00:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	f000 8094 	beq.w	8004f32 <_dtoa_r+0x4da>
 8004e0a:	4b75      	ldr	r3, [pc, #468]	@ (8004fe0 <_dtoa_r+0x588>)
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	4620      	mov	r0, r4
 8004e10:	4629      	mov	r1, r5
 8004e12:	f7fb fe63 	bl	8000adc <__aeabi_dcmplt>
 8004e16:	2800      	cmp	r0, #0
 8004e18:	f000 808b 	beq.w	8004f32 <_dtoa_r+0x4da>
 8004e1c:	9b03      	ldr	r3, [sp, #12]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	f000 8087 	beq.w	8004f32 <_dtoa_r+0x4da>
 8004e24:	f1bb 0f00 	cmp.w	fp, #0
 8004e28:	dd34      	ble.n	8004e94 <_dtoa_r+0x43c>
 8004e2a:	4620      	mov	r0, r4
 8004e2c:	4b6d      	ldr	r3, [pc, #436]	@ (8004fe4 <_dtoa_r+0x58c>)
 8004e2e:	2200      	movs	r2, #0
 8004e30:	4629      	mov	r1, r5
 8004e32:	f7fb fbe1 	bl	80005f8 <__aeabi_dmul>
 8004e36:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004e3a:	f107 38ff 	add.w	r8, r7, #4294967295
 8004e3e:	3601      	adds	r6, #1
 8004e40:	465c      	mov	r4, fp
 8004e42:	4630      	mov	r0, r6
 8004e44:	f7fb fb6e 	bl	8000524 <__aeabi_i2d>
 8004e48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e4c:	f7fb fbd4 	bl	80005f8 <__aeabi_dmul>
 8004e50:	4b65      	ldr	r3, [pc, #404]	@ (8004fe8 <_dtoa_r+0x590>)
 8004e52:	2200      	movs	r2, #0
 8004e54:	f7fb fa1a 	bl	800028c <__adddf3>
 8004e58:	4605      	mov	r5, r0
 8004e5a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004e5e:	2c00      	cmp	r4, #0
 8004e60:	d16a      	bne.n	8004f38 <_dtoa_r+0x4e0>
 8004e62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004e66:	4b61      	ldr	r3, [pc, #388]	@ (8004fec <_dtoa_r+0x594>)
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f7fb fa0d 	bl	8000288 <__aeabi_dsub>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	460b      	mov	r3, r1
 8004e72:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004e76:	462a      	mov	r2, r5
 8004e78:	4633      	mov	r3, r6
 8004e7a:	f7fb fe4d 	bl	8000b18 <__aeabi_dcmpgt>
 8004e7e:	2800      	cmp	r0, #0
 8004e80:	f040 8298 	bne.w	80053b4 <_dtoa_r+0x95c>
 8004e84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004e88:	462a      	mov	r2, r5
 8004e8a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004e8e:	f7fb fe25 	bl	8000adc <__aeabi_dcmplt>
 8004e92:	bb38      	cbnz	r0, 8004ee4 <_dtoa_r+0x48c>
 8004e94:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8004e98:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004e9c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	f2c0 8157 	blt.w	8005152 <_dtoa_r+0x6fa>
 8004ea4:	2f0e      	cmp	r7, #14
 8004ea6:	f300 8154 	bgt.w	8005152 <_dtoa_r+0x6fa>
 8004eaa:	4b4b      	ldr	r3, [pc, #300]	@ (8004fd8 <_dtoa_r+0x580>)
 8004eac:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004eb0:	ed93 7b00 	vldr	d7, [r3]
 8004eb4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	ed8d 7b00 	vstr	d7, [sp]
 8004ebc:	f280 80e5 	bge.w	800508a <_dtoa_r+0x632>
 8004ec0:	9b03      	ldr	r3, [sp, #12]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	f300 80e1 	bgt.w	800508a <_dtoa_r+0x632>
 8004ec8:	d10c      	bne.n	8004ee4 <_dtoa_r+0x48c>
 8004eca:	4b48      	ldr	r3, [pc, #288]	@ (8004fec <_dtoa_r+0x594>)
 8004ecc:	2200      	movs	r2, #0
 8004ece:	ec51 0b17 	vmov	r0, r1, d7
 8004ed2:	f7fb fb91 	bl	80005f8 <__aeabi_dmul>
 8004ed6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004eda:	f7fb fe13 	bl	8000b04 <__aeabi_dcmpge>
 8004ede:	2800      	cmp	r0, #0
 8004ee0:	f000 8266 	beq.w	80053b0 <_dtoa_r+0x958>
 8004ee4:	2400      	movs	r4, #0
 8004ee6:	4625      	mov	r5, r4
 8004ee8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004eea:	4656      	mov	r6, sl
 8004eec:	ea6f 0803 	mvn.w	r8, r3
 8004ef0:	2700      	movs	r7, #0
 8004ef2:	4621      	mov	r1, r4
 8004ef4:	4648      	mov	r0, r9
 8004ef6:	f000 fcbf 	bl	8005878 <_Bfree>
 8004efa:	2d00      	cmp	r5, #0
 8004efc:	f000 80bd 	beq.w	800507a <_dtoa_r+0x622>
 8004f00:	b12f      	cbz	r7, 8004f0e <_dtoa_r+0x4b6>
 8004f02:	42af      	cmp	r7, r5
 8004f04:	d003      	beq.n	8004f0e <_dtoa_r+0x4b6>
 8004f06:	4639      	mov	r1, r7
 8004f08:	4648      	mov	r0, r9
 8004f0a:	f000 fcb5 	bl	8005878 <_Bfree>
 8004f0e:	4629      	mov	r1, r5
 8004f10:	4648      	mov	r0, r9
 8004f12:	f000 fcb1 	bl	8005878 <_Bfree>
 8004f16:	e0b0      	b.n	800507a <_dtoa_r+0x622>
 8004f18:	07e2      	lsls	r2, r4, #31
 8004f1a:	d505      	bpl.n	8004f28 <_dtoa_r+0x4d0>
 8004f1c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004f20:	f7fb fb6a 	bl	80005f8 <__aeabi_dmul>
 8004f24:	3601      	adds	r6, #1
 8004f26:	2301      	movs	r3, #1
 8004f28:	1064      	asrs	r4, r4, #1
 8004f2a:	3508      	adds	r5, #8
 8004f2c:	e762      	b.n	8004df4 <_dtoa_r+0x39c>
 8004f2e:	2602      	movs	r6, #2
 8004f30:	e765      	b.n	8004dfe <_dtoa_r+0x3a6>
 8004f32:	9c03      	ldr	r4, [sp, #12]
 8004f34:	46b8      	mov	r8, r7
 8004f36:	e784      	b.n	8004e42 <_dtoa_r+0x3ea>
 8004f38:	4b27      	ldr	r3, [pc, #156]	@ (8004fd8 <_dtoa_r+0x580>)
 8004f3a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004f3c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004f40:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004f44:	4454      	add	r4, sl
 8004f46:	2900      	cmp	r1, #0
 8004f48:	d054      	beq.n	8004ff4 <_dtoa_r+0x59c>
 8004f4a:	4929      	ldr	r1, [pc, #164]	@ (8004ff0 <_dtoa_r+0x598>)
 8004f4c:	2000      	movs	r0, #0
 8004f4e:	f7fb fc7d 	bl	800084c <__aeabi_ddiv>
 8004f52:	4633      	mov	r3, r6
 8004f54:	462a      	mov	r2, r5
 8004f56:	f7fb f997 	bl	8000288 <__aeabi_dsub>
 8004f5a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8004f5e:	4656      	mov	r6, sl
 8004f60:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f64:	f7fb fdf8 	bl	8000b58 <__aeabi_d2iz>
 8004f68:	4605      	mov	r5, r0
 8004f6a:	f7fb fadb 	bl	8000524 <__aeabi_i2d>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	460b      	mov	r3, r1
 8004f72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f76:	f7fb f987 	bl	8000288 <__aeabi_dsub>
 8004f7a:	3530      	adds	r5, #48	@ 0x30
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	460b      	mov	r3, r1
 8004f80:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004f84:	f806 5b01 	strb.w	r5, [r6], #1
 8004f88:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8004f8c:	f7fb fda6 	bl	8000adc <__aeabi_dcmplt>
 8004f90:	2800      	cmp	r0, #0
 8004f92:	d172      	bne.n	800507a <_dtoa_r+0x622>
 8004f94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f98:	4911      	ldr	r1, [pc, #68]	@ (8004fe0 <_dtoa_r+0x588>)
 8004f9a:	2000      	movs	r0, #0
 8004f9c:	f7fb f974 	bl	8000288 <__aeabi_dsub>
 8004fa0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8004fa4:	f7fb fd9a 	bl	8000adc <__aeabi_dcmplt>
 8004fa8:	2800      	cmp	r0, #0
 8004faa:	f040 80b4 	bne.w	8005116 <_dtoa_r+0x6be>
 8004fae:	42a6      	cmp	r6, r4
 8004fb0:	f43f af70 	beq.w	8004e94 <_dtoa_r+0x43c>
 8004fb4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8004fb8:	4b0a      	ldr	r3, [pc, #40]	@ (8004fe4 <_dtoa_r+0x58c>)
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f7fb fb1c 	bl	80005f8 <__aeabi_dmul>
 8004fc0:	4b08      	ldr	r3, [pc, #32]	@ (8004fe4 <_dtoa_r+0x58c>)
 8004fc2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004fcc:	f7fb fb14 	bl	80005f8 <__aeabi_dmul>
 8004fd0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004fd4:	e7c4      	b.n	8004f60 <_dtoa_r+0x508>
 8004fd6:	bf00      	nop
 8004fd8:	08006740 	.word	0x08006740
 8004fdc:	08006718 	.word	0x08006718
 8004fe0:	3ff00000 	.word	0x3ff00000
 8004fe4:	40240000 	.word	0x40240000
 8004fe8:	401c0000 	.word	0x401c0000
 8004fec:	40140000 	.word	0x40140000
 8004ff0:	3fe00000 	.word	0x3fe00000
 8004ff4:	4631      	mov	r1, r6
 8004ff6:	4628      	mov	r0, r5
 8004ff8:	f7fb fafe 	bl	80005f8 <__aeabi_dmul>
 8004ffc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005000:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005002:	4656      	mov	r6, sl
 8005004:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005008:	f7fb fda6 	bl	8000b58 <__aeabi_d2iz>
 800500c:	4605      	mov	r5, r0
 800500e:	f7fb fa89 	bl	8000524 <__aeabi_i2d>
 8005012:	4602      	mov	r2, r0
 8005014:	460b      	mov	r3, r1
 8005016:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800501a:	f7fb f935 	bl	8000288 <__aeabi_dsub>
 800501e:	3530      	adds	r5, #48	@ 0x30
 8005020:	f806 5b01 	strb.w	r5, [r6], #1
 8005024:	4602      	mov	r2, r0
 8005026:	460b      	mov	r3, r1
 8005028:	42a6      	cmp	r6, r4
 800502a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800502e:	f04f 0200 	mov.w	r2, #0
 8005032:	d124      	bne.n	800507e <_dtoa_r+0x626>
 8005034:	4baf      	ldr	r3, [pc, #700]	@ (80052f4 <_dtoa_r+0x89c>)
 8005036:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800503a:	f7fb f927 	bl	800028c <__adddf3>
 800503e:	4602      	mov	r2, r0
 8005040:	460b      	mov	r3, r1
 8005042:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005046:	f7fb fd67 	bl	8000b18 <__aeabi_dcmpgt>
 800504a:	2800      	cmp	r0, #0
 800504c:	d163      	bne.n	8005116 <_dtoa_r+0x6be>
 800504e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005052:	49a8      	ldr	r1, [pc, #672]	@ (80052f4 <_dtoa_r+0x89c>)
 8005054:	2000      	movs	r0, #0
 8005056:	f7fb f917 	bl	8000288 <__aeabi_dsub>
 800505a:	4602      	mov	r2, r0
 800505c:	460b      	mov	r3, r1
 800505e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005062:	f7fb fd3b 	bl	8000adc <__aeabi_dcmplt>
 8005066:	2800      	cmp	r0, #0
 8005068:	f43f af14 	beq.w	8004e94 <_dtoa_r+0x43c>
 800506c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800506e:	1e73      	subs	r3, r6, #1
 8005070:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005072:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005076:	2b30      	cmp	r3, #48	@ 0x30
 8005078:	d0f8      	beq.n	800506c <_dtoa_r+0x614>
 800507a:	4647      	mov	r7, r8
 800507c:	e03b      	b.n	80050f6 <_dtoa_r+0x69e>
 800507e:	4b9e      	ldr	r3, [pc, #632]	@ (80052f8 <_dtoa_r+0x8a0>)
 8005080:	f7fb faba 	bl	80005f8 <__aeabi_dmul>
 8005084:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005088:	e7bc      	b.n	8005004 <_dtoa_r+0x5ac>
 800508a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800508e:	4656      	mov	r6, sl
 8005090:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005094:	4620      	mov	r0, r4
 8005096:	4629      	mov	r1, r5
 8005098:	f7fb fbd8 	bl	800084c <__aeabi_ddiv>
 800509c:	f7fb fd5c 	bl	8000b58 <__aeabi_d2iz>
 80050a0:	4680      	mov	r8, r0
 80050a2:	f7fb fa3f 	bl	8000524 <__aeabi_i2d>
 80050a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80050aa:	f7fb faa5 	bl	80005f8 <__aeabi_dmul>
 80050ae:	4602      	mov	r2, r0
 80050b0:	460b      	mov	r3, r1
 80050b2:	4620      	mov	r0, r4
 80050b4:	4629      	mov	r1, r5
 80050b6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80050ba:	f7fb f8e5 	bl	8000288 <__aeabi_dsub>
 80050be:	f806 4b01 	strb.w	r4, [r6], #1
 80050c2:	9d03      	ldr	r5, [sp, #12]
 80050c4:	eba6 040a 	sub.w	r4, r6, sl
 80050c8:	42a5      	cmp	r5, r4
 80050ca:	4602      	mov	r2, r0
 80050cc:	460b      	mov	r3, r1
 80050ce:	d133      	bne.n	8005138 <_dtoa_r+0x6e0>
 80050d0:	f7fb f8dc 	bl	800028c <__adddf3>
 80050d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80050d8:	4604      	mov	r4, r0
 80050da:	460d      	mov	r5, r1
 80050dc:	f7fb fd1c 	bl	8000b18 <__aeabi_dcmpgt>
 80050e0:	b9c0      	cbnz	r0, 8005114 <_dtoa_r+0x6bc>
 80050e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80050e6:	4620      	mov	r0, r4
 80050e8:	4629      	mov	r1, r5
 80050ea:	f7fb fced 	bl	8000ac8 <__aeabi_dcmpeq>
 80050ee:	b110      	cbz	r0, 80050f6 <_dtoa_r+0x69e>
 80050f0:	f018 0f01 	tst.w	r8, #1
 80050f4:	d10e      	bne.n	8005114 <_dtoa_r+0x6bc>
 80050f6:	9902      	ldr	r1, [sp, #8]
 80050f8:	4648      	mov	r0, r9
 80050fa:	f000 fbbd 	bl	8005878 <_Bfree>
 80050fe:	2300      	movs	r3, #0
 8005100:	7033      	strb	r3, [r6, #0]
 8005102:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005104:	3701      	adds	r7, #1
 8005106:	601f      	str	r7, [r3, #0]
 8005108:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800510a:	2b00      	cmp	r3, #0
 800510c:	f000 824b 	beq.w	80055a6 <_dtoa_r+0xb4e>
 8005110:	601e      	str	r6, [r3, #0]
 8005112:	e248      	b.n	80055a6 <_dtoa_r+0xb4e>
 8005114:	46b8      	mov	r8, r7
 8005116:	4633      	mov	r3, r6
 8005118:	461e      	mov	r6, r3
 800511a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800511e:	2a39      	cmp	r2, #57	@ 0x39
 8005120:	d106      	bne.n	8005130 <_dtoa_r+0x6d8>
 8005122:	459a      	cmp	sl, r3
 8005124:	d1f8      	bne.n	8005118 <_dtoa_r+0x6c0>
 8005126:	2230      	movs	r2, #48	@ 0x30
 8005128:	f108 0801 	add.w	r8, r8, #1
 800512c:	f88a 2000 	strb.w	r2, [sl]
 8005130:	781a      	ldrb	r2, [r3, #0]
 8005132:	3201      	adds	r2, #1
 8005134:	701a      	strb	r2, [r3, #0]
 8005136:	e7a0      	b.n	800507a <_dtoa_r+0x622>
 8005138:	4b6f      	ldr	r3, [pc, #444]	@ (80052f8 <_dtoa_r+0x8a0>)
 800513a:	2200      	movs	r2, #0
 800513c:	f7fb fa5c 	bl	80005f8 <__aeabi_dmul>
 8005140:	2200      	movs	r2, #0
 8005142:	2300      	movs	r3, #0
 8005144:	4604      	mov	r4, r0
 8005146:	460d      	mov	r5, r1
 8005148:	f7fb fcbe 	bl	8000ac8 <__aeabi_dcmpeq>
 800514c:	2800      	cmp	r0, #0
 800514e:	d09f      	beq.n	8005090 <_dtoa_r+0x638>
 8005150:	e7d1      	b.n	80050f6 <_dtoa_r+0x69e>
 8005152:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005154:	2a00      	cmp	r2, #0
 8005156:	f000 80ea 	beq.w	800532e <_dtoa_r+0x8d6>
 800515a:	9a07      	ldr	r2, [sp, #28]
 800515c:	2a01      	cmp	r2, #1
 800515e:	f300 80cd 	bgt.w	80052fc <_dtoa_r+0x8a4>
 8005162:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005164:	2a00      	cmp	r2, #0
 8005166:	f000 80c1 	beq.w	80052ec <_dtoa_r+0x894>
 800516a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800516e:	9c08      	ldr	r4, [sp, #32]
 8005170:	9e00      	ldr	r6, [sp, #0]
 8005172:	9a00      	ldr	r2, [sp, #0]
 8005174:	441a      	add	r2, r3
 8005176:	9200      	str	r2, [sp, #0]
 8005178:	9a06      	ldr	r2, [sp, #24]
 800517a:	2101      	movs	r1, #1
 800517c:	441a      	add	r2, r3
 800517e:	4648      	mov	r0, r9
 8005180:	9206      	str	r2, [sp, #24]
 8005182:	f000 fc2d 	bl	80059e0 <__i2b>
 8005186:	4605      	mov	r5, r0
 8005188:	b166      	cbz	r6, 80051a4 <_dtoa_r+0x74c>
 800518a:	9b06      	ldr	r3, [sp, #24]
 800518c:	2b00      	cmp	r3, #0
 800518e:	dd09      	ble.n	80051a4 <_dtoa_r+0x74c>
 8005190:	42b3      	cmp	r3, r6
 8005192:	9a00      	ldr	r2, [sp, #0]
 8005194:	bfa8      	it	ge
 8005196:	4633      	movge	r3, r6
 8005198:	1ad2      	subs	r2, r2, r3
 800519a:	9200      	str	r2, [sp, #0]
 800519c:	9a06      	ldr	r2, [sp, #24]
 800519e:	1af6      	subs	r6, r6, r3
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	9306      	str	r3, [sp, #24]
 80051a4:	9b08      	ldr	r3, [sp, #32]
 80051a6:	b30b      	cbz	r3, 80051ec <_dtoa_r+0x794>
 80051a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	f000 80c6 	beq.w	800533c <_dtoa_r+0x8e4>
 80051b0:	2c00      	cmp	r4, #0
 80051b2:	f000 80c0 	beq.w	8005336 <_dtoa_r+0x8de>
 80051b6:	4629      	mov	r1, r5
 80051b8:	4622      	mov	r2, r4
 80051ba:	4648      	mov	r0, r9
 80051bc:	f000 fcc8 	bl	8005b50 <__pow5mult>
 80051c0:	9a02      	ldr	r2, [sp, #8]
 80051c2:	4601      	mov	r1, r0
 80051c4:	4605      	mov	r5, r0
 80051c6:	4648      	mov	r0, r9
 80051c8:	f000 fc20 	bl	8005a0c <__multiply>
 80051cc:	9902      	ldr	r1, [sp, #8]
 80051ce:	4680      	mov	r8, r0
 80051d0:	4648      	mov	r0, r9
 80051d2:	f000 fb51 	bl	8005878 <_Bfree>
 80051d6:	9b08      	ldr	r3, [sp, #32]
 80051d8:	1b1b      	subs	r3, r3, r4
 80051da:	9308      	str	r3, [sp, #32]
 80051dc:	f000 80b1 	beq.w	8005342 <_dtoa_r+0x8ea>
 80051e0:	9a08      	ldr	r2, [sp, #32]
 80051e2:	4641      	mov	r1, r8
 80051e4:	4648      	mov	r0, r9
 80051e6:	f000 fcb3 	bl	8005b50 <__pow5mult>
 80051ea:	9002      	str	r0, [sp, #8]
 80051ec:	2101      	movs	r1, #1
 80051ee:	4648      	mov	r0, r9
 80051f0:	f000 fbf6 	bl	80059e0 <__i2b>
 80051f4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80051f6:	4604      	mov	r4, r0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	f000 81d8 	beq.w	80055ae <_dtoa_r+0xb56>
 80051fe:	461a      	mov	r2, r3
 8005200:	4601      	mov	r1, r0
 8005202:	4648      	mov	r0, r9
 8005204:	f000 fca4 	bl	8005b50 <__pow5mult>
 8005208:	9b07      	ldr	r3, [sp, #28]
 800520a:	2b01      	cmp	r3, #1
 800520c:	4604      	mov	r4, r0
 800520e:	f300 809f 	bgt.w	8005350 <_dtoa_r+0x8f8>
 8005212:	9b04      	ldr	r3, [sp, #16]
 8005214:	2b00      	cmp	r3, #0
 8005216:	f040 8097 	bne.w	8005348 <_dtoa_r+0x8f0>
 800521a:	9b05      	ldr	r3, [sp, #20]
 800521c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005220:	2b00      	cmp	r3, #0
 8005222:	f040 8093 	bne.w	800534c <_dtoa_r+0x8f4>
 8005226:	9b05      	ldr	r3, [sp, #20]
 8005228:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800522c:	0d1b      	lsrs	r3, r3, #20
 800522e:	051b      	lsls	r3, r3, #20
 8005230:	b133      	cbz	r3, 8005240 <_dtoa_r+0x7e8>
 8005232:	9b00      	ldr	r3, [sp, #0]
 8005234:	3301      	adds	r3, #1
 8005236:	9300      	str	r3, [sp, #0]
 8005238:	9b06      	ldr	r3, [sp, #24]
 800523a:	3301      	adds	r3, #1
 800523c:	9306      	str	r3, [sp, #24]
 800523e:	2301      	movs	r3, #1
 8005240:	9308      	str	r3, [sp, #32]
 8005242:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005244:	2b00      	cmp	r3, #0
 8005246:	f000 81b8 	beq.w	80055ba <_dtoa_r+0xb62>
 800524a:	6923      	ldr	r3, [r4, #16]
 800524c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005250:	6918      	ldr	r0, [r3, #16]
 8005252:	f000 fb79 	bl	8005948 <__hi0bits>
 8005256:	f1c0 0020 	rsb	r0, r0, #32
 800525a:	9b06      	ldr	r3, [sp, #24]
 800525c:	4418      	add	r0, r3
 800525e:	f010 001f 	ands.w	r0, r0, #31
 8005262:	f000 8082 	beq.w	800536a <_dtoa_r+0x912>
 8005266:	f1c0 0320 	rsb	r3, r0, #32
 800526a:	2b04      	cmp	r3, #4
 800526c:	dd73      	ble.n	8005356 <_dtoa_r+0x8fe>
 800526e:	9b00      	ldr	r3, [sp, #0]
 8005270:	f1c0 001c 	rsb	r0, r0, #28
 8005274:	4403      	add	r3, r0
 8005276:	9300      	str	r3, [sp, #0]
 8005278:	9b06      	ldr	r3, [sp, #24]
 800527a:	4403      	add	r3, r0
 800527c:	4406      	add	r6, r0
 800527e:	9306      	str	r3, [sp, #24]
 8005280:	9b00      	ldr	r3, [sp, #0]
 8005282:	2b00      	cmp	r3, #0
 8005284:	dd05      	ble.n	8005292 <_dtoa_r+0x83a>
 8005286:	9902      	ldr	r1, [sp, #8]
 8005288:	461a      	mov	r2, r3
 800528a:	4648      	mov	r0, r9
 800528c:	f000 fcba 	bl	8005c04 <__lshift>
 8005290:	9002      	str	r0, [sp, #8]
 8005292:	9b06      	ldr	r3, [sp, #24]
 8005294:	2b00      	cmp	r3, #0
 8005296:	dd05      	ble.n	80052a4 <_dtoa_r+0x84c>
 8005298:	4621      	mov	r1, r4
 800529a:	461a      	mov	r2, r3
 800529c:	4648      	mov	r0, r9
 800529e:	f000 fcb1 	bl	8005c04 <__lshift>
 80052a2:	4604      	mov	r4, r0
 80052a4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d061      	beq.n	800536e <_dtoa_r+0x916>
 80052aa:	9802      	ldr	r0, [sp, #8]
 80052ac:	4621      	mov	r1, r4
 80052ae:	f000 fd15 	bl	8005cdc <__mcmp>
 80052b2:	2800      	cmp	r0, #0
 80052b4:	da5b      	bge.n	800536e <_dtoa_r+0x916>
 80052b6:	2300      	movs	r3, #0
 80052b8:	9902      	ldr	r1, [sp, #8]
 80052ba:	220a      	movs	r2, #10
 80052bc:	4648      	mov	r0, r9
 80052be:	f000 fafd 	bl	80058bc <__multadd>
 80052c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052c4:	9002      	str	r0, [sp, #8]
 80052c6:	f107 38ff 	add.w	r8, r7, #4294967295
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	f000 8177 	beq.w	80055be <_dtoa_r+0xb66>
 80052d0:	4629      	mov	r1, r5
 80052d2:	2300      	movs	r3, #0
 80052d4:	220a      	movs	r2, #10
 80052d6:	4648      	mov	r0, r9
 80052d8:	f000 faf0 	bl	80058bc <__multadd>
 80052dc:	f1bb 0f00 	cmp.w	fp, #0
 80052e0:	4605      	mov	r5, r0
 80052e2:	dc6f      	bgt.n	80053c4 <_dtoa_r+0x96c>
 80052e4:	9b07      	ldr	r3, [sp, #28]
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	dc49      	bgt.n	800537e <_dtoa_r+0x926>
 80052ea:	e06b      	b.n	80053c4 <_dtoa_r+0x96c>
 80052ec:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80052ee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80052f2:	e73c      	b.n	800516e <_dtoa_r+0x716>
 80052f4:	3fe00000 	.word	0x3fe00000
 80052f8:	40240000 	.word	0x40240000
 80052fc:	9b03      	ldr	r3, [sp, #12]
 80052fe:	1e5c      	subs	r4, r3, #1
 8005300:	9b08      	ldr	r3, [sp, #32]
 8005302:	42a3      	cmp	r3, r4
 8005304:	db09      	blt.n	800531a <_dtoa_r+0x8c2>
 8005306:	1b1c      	subs	r4, r3, r4
 8005308:	9b03      	ldr	r3, [sp, #12]
 800530a:	2b00      	cmp	r3, #0
 800530c:	f6bf af30 	bge.w	8005170 <_dtoa_r+0x718>
 8005310:	9b00      	ldr	r3, [sp, #0]
 8005312:	9a03      	ldr	r2, [sp, #12]
 8005314:	1a9e      	subs	r6, r3, r2
 8005316:	2300      	movs	r3, #0
 8005318:	e72b      	b.n	8005172 <_dtoa_r+0x71a>
 800531a:	9b08      	ldr	r3, [sp, #32]
 800531c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800531e:	9408      	str	r4, [sp, #32]
 8005320:	1ae3      	subs	r3, r4, r3
 8005322:	441a      	add	r2, r3
 8005324:	9e00      	ldr	r6, [sp, #0]
 8005326:	9b03      	ldr	r3, [sp, #12]
 8005328:	920d      	str	r2, [sp, #52]	@ 0x34
 800532a:	2400      	movs	r4, #0
 800532c:	e721      	b.n	8005172 <_dtoa_r+0x71a>
 800532e:	9c08      	ldr	r4, [sp, #32]
 8005330:	9e00      	ldr	r6, [sp, #0]
 8005332:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8005334:	e728      	b.n	8005188 <_dtoa_r+0x730>
 8005336:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800533a:	e751      	b.n	80051e0 <_dtoa_r+0x788>
 800533c:	9a08      	ldr	r2, [sp, #32]
 800533e:	9902      	ldr	r1, [sp, #8]
 8005340:	e750      	b.n	80051e4 <_dtoa_r+0x78c>
 8005342:	f8cd 8008 	str.w	r8, [sp, #8]
 8005346:	e751      	b.n	80051ec <_dtoa_r+0x794>
 8005348:	2300      	movs	r3, #0
 800534a:	e779      	b.n	8005240 <_dtoa_r+0x7e8>
 800534c:	9b04      	ldr	r3, [sp, #16]
 800534e:	e777      	b.n	8005240 <_dtoa_r+0x7e8>
 8005350:	2300      	movs	r3, #0
 8005352:	9308      	str	r3, [sp, #32]
 8005354:	e779      	b.n	800524a <_dtoa_r+0x7f2>
 8005356:	d093      	beq.n	8005280 <_dtoa_r+0x828>
 8005358:	9a00      	ldr	r2, [sp, #0]
 800535a:	331c      	adds	r3, #28
 800535c:	441a      	add	r2, r3
 800535e:	9200      	str	r2, [sp, #0]
 8005360:	9a06      	ldr	r2, [sp, #24]
 8005362:	441a      	add	r2, r3
 8005364:	441e      	add	r6, r3
 8005366:	9206      	str	r2, [sp, #24]
 8005368:	e78a      	b.n	8005280 <_dtoa_r+0x828>
 800536a:	4603      	mov	r3, r0
 800536c:	e7f4      	b.n	8005358 <_dtoa_r+0x900>
 800536e:	9b03      	ldr	r3, [sp, #12]
 8005370:	2b00      	cmp	r3, #0
 8005372:	46b8      	mov	r8, r7
 8005374:	dc20      	bgt.n	80053b8 <_dtoa_r+0x960>
 8005376:	469b      	mov	fp, r3
 8005378:	9b07      	ldr	r3, [sp, #28]
 800537a:	2b02      	cmp	r3, #2
 800537c:	dd1e      	ble.n	80053bc <_dtoa_r+0x964>
 800537e:	f1bb 0f00 	cmp.w	fp, #0
 8005382:	f47f adb1 	bne.w	8004ee8 <_dtoa_r+0x490>
 8005386:	4621      	mov	r1, r4
 8005388:	465b      	mov	r3, fp
 800538a:	2205      	movs	r2, #5
 800538c:	4648      	mov	r0, r9
 800538e:	f000 fa95 	bl	80058bc <__multadd>
 8005392:	4601      	mov	r1, r0
 8005394:	4604      	mov	r4, r0
 8005396:	9802      	ldr	r0, [sp, #8]
 8005398:	f000 fca0 	bl	8005cdc <__mcmp>
 800539c:	2800      	cmp	r0, #0
 800539e:	f77f ada3 	ble.w	8004ee8 <_dtoa_r+0x490>
 80053a2:	4656      	mov	r6, sl
 80053a4:	2331      	movs	r3, #49	@ 0x31
 80053a6:	f806 3b01 	strb.w	r3, [r6], #1
 80053aa:	f108 0801 	add.w	r8, r8, #1
 80053ae:	e59f      	b.n	8004ef0 <_dtoa_r+0x498>
 80053b0:	9c03      	ldr	r4, [sp, #12]
 80053b2:	46b8      	mov	r8, r7
 80053b4:	4625      	mov	r5, r4
 80053b6:	e7f4      	b.n	80053a2 <_dtoa_r+0x94a>
 80053b8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80053bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053be:	2b00      	cmp	r3, #0
 80053c0:	f000 8101 	beq.w	80055c6 <_dtoa_r+0xb6e>
 80053c4:	2e00      	cmp	r6, #0
 80053c6:	dd05      	ble.n	80053d4 <_dtoa_r+0x97c>
 80053c8:	4629      	mov	r1, r5
 80053ca:	4632      	mov	r2, r6
 80053cc:	4648      	mov	r0, r9
 80053ce:	f000 fc19 	bl	8005c04 <__lshift>
 80053d2:	4605      	mov	r5, r0
 80053d4:	9b08      	ldr	r3, [sp, #32]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d05c      	beq.n	8005494 <_dtoa_r+0xa3c>
 80053da:	6869      	ldr	r1, [r5, #4]
 80053dc:	4648      	mov	r0, r9
 80053de:	f000 fa0b 	bl	80057f8 <_Balloc>
 80053e2:	4606      	mov	r6, r0
 80053e4:	b928      	cbnz	r0, 80053f2 <_dtoa_r+0x99a>
 80053e6:	4b82      	ldr	r3, [pc, #520]	@ (80055f0 <_dtoa_r+0xb98>)
 80053e8:	4602      	mov	r2, r0
 80053ea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80053ee:	f7ff bb4a 	b.w	8004a86 <_dtoa_r+0x2e>
 80053f2:	692a      	ldr	r2, [r5, #16]
 80053f4:	3202      	adds	r2, #2
 80053f6:	0092      	lsls	r2, r2, #2
 80053f8:	f105 010c 	add.w	r1, r5, #12
 80053fc:	300c      	adds	r0, #12
 80053fe:	f000 ff5b 	bl	80062b8 <memcpy>
 8005402:	2201      	movs	r2, #1
 8005404:	4631      	mov	r1, r6
 8005406:	4648      	mov	r0, r9
 8005408:	f000 fbfc 	bl	8005c04 <__lshift>
 800540c:	f10a 0301 	add.w	r3, sl, #1
 8005410:	9300      	str	r3, [sp, #0]
 8005412:	eb0a 030b 	add.w	r3, sl, fp
 8005416:	9308      	str	r3, [sp, #32]
 8005418:	9b04      	ldr	r3, [sp, #16]
 800541a:	f003 0301 	and.w	r3, r3, #1
 800541e:	462f      	mov	r7, r5
 8005420:	9306      	str	r3, [sp, #24]
 8005422:	4605      	mov	r5, r0
 8005424:	9b00      	ldr	r3, [sp, #0]
 8005426:	9802      	ldr	r0, [sp, #8]
 8005428:	4621      	mov	r1, r4
 800542a:	f103 3bff 	add.w	fp, r3, #4294967295
 800542e:	f7ff fa8a 	bl	8004946 <quorem>
 8005432:	4603      	mov	r3, r0
 8005434:	3330      	adds	r3, #48	@ 0x30
 8005436:	9003      	str	r0, [sp, #12]
 8005438:	4639      	mov	r1, r7
 800543a:	9802      	ldr	r0, [sp, #8]
 800543c:	9309      	str	r3, [sp, #36]	@ 0x24
 800543e:	f000 fc4d 	bl	8005cdc <__mcmp>
 8005442:	462a      	mov	r2, r5
 8005444:	9004      	str	r0, [sp, #16]
 8005446:	4621      	mov	r1, r4
 8005448:	4648      	mov	r0, r9
 800544a:	f000 fc63 	bl	8005d14 <__mdiff>
 800544e:	68c2      	ldr	r2, [r0, #12]
 8005450:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005452:	4606      	mov	r6, r0
 8005454:	bb02      	cbnz	r2, 8005498 <_dtoa_r+0xa40>
 8005456:	4601      	mov	r1, r0
 8005458:	9802      	ldr	r0, [sp, #8]
 800545a:	f000 fc3f 	bl	8005cdc <__mcmp>
 800545e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005460:	4602      	mov	r2, r0
 8005462:	4631      	mov	r1, r6
 8005464:	4648      	mov	r0, r9
 8005466:	920c      	str	r2, [sp, #48]	@ 0x30
 8005468:	9309      	str	r3, [sp, #36]	@ 0x24
 800546a:	f000 fa05 	bl	8005878 <_Bfree>
 800546e:	9b07      	ldr	r3, [sp, #28]
 8005470:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005472:	9e00      	ldr	r6, [sp, #0]
 8005474:	ea42 0103 	orr.w	r1, r2, r3
 8005478:	9b06      	ldr	r3, [sp, #24]
 800547a:	4319      	orrs	r1, r3
 800547c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800547e:	d10d      	bne.n	800549c <_dtoa_r+0xa44>
 8005480:	2b39      	cmp	r3, #57	@ 0x39
 8005482:	d027      	beq.n	80054d4 <_dtoa_r+0xa7c>
 8005484:	9a04      	ldr	r2, [sp, #16]
 8005486:	2a00      	cmp	r2, #0
 8005488:	dd01      	ble.n	800548e <_dtoa_r+0xa36>
 800548a:	9b03      	ldr	r3, [sp, #12]
 800548c:	3331      	adds	r3, #49	@ 0x31
 800548e:	f88b 3000 	strb.w	r3, [fp]
 8005492:	e52e      	b.n	8004ef2 <_dtoa_r+0x49a>
 8005494:	4628      	mov	r0, r5
 8005496:	e7b9      	b.n	800540c <_dtoa_r+0x9b4>
 8005498:	2201      	movs	r2, #1
 800549a:	e7e2      	b.n	8005462 <_dtoa_r+0xa0a>
 800549c:	9904      	ldr	r1, [sp, #16]
 800549e:	2900      	cmp	r1, #0
 80054a0:	db04      	blt.n	80054ac <_dtoa_r+0xa54>
 80054a2:	9807      	ldr	r0, [sp, #28]
 80054a4:	4301      	orrs	r1, r0
 80054a6:	9806      	ldr	r0, [sp, #24]
 80054a8:	4301      	orrs	r1, r0
 80054aa:	d120      	bne.n	80054ee <_dtoa_r+0xa96>
 80054ac:	2a00      	cmp	r2, #0
 80054ae:	ddee      	ble.n	800548e <_dtoa_r+0xa36>
 80054b0:	9902      	ldr	r1, [sp, #8]
 80054b2:	9300      	str	r3, [sp, #0]
 80054b4:	2201      	movs	r2, #1
 80054b6:	4648      	mov	r0, r9
 80054b8:	f000 fba4 	bl	8005c04 <__lshift>
 80054bc:	4621      	mov	r1, r4
 80054be:	9002      	str	r0, [sp, #8]
 80054c0:	f000 fc0c 	bl	8005cdc <__mcmp>
 80054c4:	2800      	cmp	r0, #0
 80054c6:	9b00      	ldr	r3, [sp, #0]
 80054c8:	dc02      	bgt.n	80054d0 <_dtoa_r+0xa78>
 80054ca:	d1e0      	bne.n	800548e <_dtoa_r+0xa36>
 80054cc:	07da      	lsls	r2, r3, #31
 80054ce:	d5de      	bpl.n	800548e <_dtoa_r+0xa36>
 80054d0:	2b39      	cmp	r3, #57	@ 0x39
 80054d2:	d1da      	bne.n	800548a <_dtoa_r+0xa32>
 80054d4:	2339      	movs	r3, #57	@ 0x39
 80054d6:	f88b 3000 	strb.w	r3, [fp]
 80054da:	4633      	mov	r3, r6
 80054dc:	461e      	mov	r6, r3
 80054de:	3b01      	subs	r3, #1
 80054e0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80054e4:	2a39      	cmp	r2, #57	@ 0x39
 80054e6:	d04e      	beq.n	8005586 <_dtoa_r+0xb2e>
 80054e8:	3201      	adds	r2, #1
 80054ea:	701a      	strb	r2, [r3, #0]
 80054ec:	e501      	b.n	8004ef2 <_dtoa_r+0x49a>
 80054ee:	2a00      	cmp	r2, #0
 80054f0:	dd03      	ble.n	80054fa <_dtoa_r+0xaa2>
 80054f2:	2b39      	cmp	r3, #57	@ 0x39
 80054f4:	d0ee      	beq.n	80054d4 <_dtoa_r+0xa7c>
 80054f6:	3301      	adds	r3, #1
 80054f8:	e7c9      	b.n	800548e <_dtoa_r+0xa36>
 80054fa:	9a00      	ldr	r2, [sp, #0]
 80054fc:	9908      	ldr	r1, [sp, #32]
 80054fe:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005502:	428a      	cmp	r2, r1
 8005504:	d028      	beq.n	8005558 <_dtoa_r+0xb00>
 8005506:	9902      	ldr	r1, [sp, #8]
 8005508:	2300      	movs	r3, #0
 800550a:	220a      	movs	r2, #10
 800550c:	4648      	mov	r0, r9
 800550e:	f000 f9d5 	bl	80058bc <__multadd>
 8005512:	42af      	cmp	r7, r5
 8005514:	9002      	str	r0, [sp, #8]
 8005516:	f04f 0300 	mov.w	r3, #0
 800551a:	f04f 020a 	mov.w	r2, #10
 800551e:	4639      	mov	r1, r7
 8005520:	4648      	mov	r0, r9
 8005522:	d107      	bne.n	8005534 <_dtoa_r+0xadc>
 8005524:	f000 f9ca 	bl	80058bc <__multadd>
 8005528:	4607      	mov	r7, r0
 800552a:	4605      	mov	r5, r0
 800552c:	9b00      	ldr	r3, [sp, #0]
 800552e:	3301      	adds	r3, #1
 8005530:	9300      	str	r3, [sp, #0]
 8005532:	e777      	b.n	8005424 <_dtoa_r+0x9cc>
 8005534:	f000 f9c2 	bl	80058bc <__multadd>
 8005538:	4629      	mov	r1, r5
 800553a:	4607      	mov	r7, r0
 800553c:	2300      	movs	r3, #0
 800553e:	220a      	movs	r2, #10
 8005540:	4648      	mov	r0, r9
 8005542:	f000 f9bb 	bl	80058bc <__multadd>
 8005546:	4605      	mov	r5, r0
 8005548:	e7f0      	b.n	800552c <_dtoa_r+0xad4>
 800554a:	f1bb 0f00 	cmp.w	fp, #0
 800554e:	bfcc      	ite	gt
 8005550:	465e      	movgt	r6, fp
 8005552:	2601      	movle	r6, #1
 8005554:	4456      	add	r6, sl
 8005556:	2700      	movs	r7, #0
 8005558:	9902      	ldr	r1, [sp, #8]
 800555a:	9300      	str	r3, [sp, #0]
 800555c:	2201      	movs	r2, #1
 800555e:	4648      	mov	r0, r9
 8005560:	f000 fb50 	bl	8005c04 <__lshift>
 8005564:	4621      	mov	r1, r4
 8005566:	9002      	str	r0, [sp, #8]
 8005568:	f000 fbb8 	bl	8005cdc <__mcmp>
 800556c:	2800      	cmp	r0, #0
 800556e:	dcb4      	bgt.n	80054da <_dtoa_r+0xa82>
 8005570:	d102      	bne.n	8005578 <_dtoa_r+0xb20>
 8005572:	9b00      	ldr	r3, [sp, #0]
 8005574:	07db      	lsls	r3, r3, #31
 8005576:	d4b0      	bmi.n	80054da <_dtoa_r+0xa82>
 8005578:	4633      	mov	r3, r6
 800557a:	461e      	mov	r6, r3
 800557c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005580:	2a30      	cmp	r2, #48	@ 0x30
 8005582:	d0fa      	beq.n	800557a <_dtoa_r+0xb22>
 8005584:	e4b5      	b.n	8004ef2 <_dtoa_r+0x49a>
 8005586:	459a      	cmp	sl, r3
 8005588:	d1a8      	bne.n	80054dc <_dtoa_r+0xa84>
 800558a:	2331      	movs	r3, #49	@ 0x31
 800558c:	f108 0801 	add.w	r8, r8, #1
 8005590:	f88a 3000 	strb.w	r3, [sl]
 8005594:	e4ad      	b.n	8004ef2 <_dtoa_r+0x49a>
 8005596:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005598:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80055f4 <_dtoa_r+0xb9c>
 800559c:	b11b      	cbz	r3, 80055a6 <_dtoa_r+0xb4e>
 800559e:	f10a 0308 	add.w	r3, sl, #8
 80055a2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80055a4:	6013      	str	r3, [r2, #0]
 80055a6:	4650      	mov	r0, sl
 80055a8:	b017      	add	sp, #92	@ 0x5c
 80055aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055ae:	9b07      	ldr	r3, [sp, #28]
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	f77f ae2e 	ble.w	8005212 <_dtoa_r+0x7ba>
 80055b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80055b8:	9308      	str	r3, [sp, #32]
 80055ba:	2001      	movs	r0, #1
 80055bc:	e64d      	b.n	800525a <_dtoa_r+0x802>
 80055be:	f1bb 0f00 	cmp.w	fp, #0
 80055c2:	f77f aed9 	ble.w	8005378 <_dtoa_r+0x920>
 80055c6:	4656      	mov	r6, sl
 80055c8:	9802      	ldr	r0, [sp, #8]
 80055ca:	4621      	mov	r1, r4
 80055cc:	f7ff f9bb 	bl	8004946 <quorem>
 80055d0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80055d4:	f806 3b01 	strb.w	r3, [r6], #1
 80055d8:	eba6 020a 	sub.w	r2, r6, sl
 80055dc:	4593      	cmp	fp, r2
 80055de:	ddb4      	ble.n	800554a <_dtoa_r+0xaf2>
 80055e0:	9902      	ldr	r1, [sp, #8]
 80055e2:	2300      	movs	r3, #0
 80055e4:	220a      	movs	r2, #10
 80055e6:	4648      	mov	r0, r9
 80055e8:	f000 f968 	bl	80058bc <__multadd>
 80055ec:	9002      	str	r0, [sp, #8]
 80055ee:	e7eb      	b.n	80055c8 <_dtoa_r+0xb70>
 80055f0:	08006644 	.word	0x08006644
 80055f4:	080065c8 	.word	0x080065c8

080055f8 <_free_r>:
 80055f8:	b538      	push	{r3, r4, r5, lr}
 80055fa:	4605      	mov	r5, r0
 80055fc:	2900      	cmp	r1, #0
 80055fe:	d041      	beq.n	8005684 <_free_r+0x8c>
 8005600:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005604:	1f0c      	subs	r4, r1, #4
 8005606:	2b00      	cmp	r3, #0
 8005608:	bfb8      	it	lt
 800560a:	18e4      	addlt	r4, r4, r3
 800560c:	f000 f8e8 	bl	80057e0 <__malloc_lock>
 8005610:	4a1d      	ldr	r2, [pc, #116]	@ (8005688 <_free_r+0x90>)
 8005612:	6813      	ldr	r3, [r2, #0]
 8005614:	b933      	cbnz	r3, 8005624 <_free_r+0x2c>
 8005616:	6063      	str	r3, [r4, #4]
 8005618:	6014      	str	r4, [r2, #0]
 800561a:	4628      	mov	r0, r5
 800561c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005620:	f000 b8e4 	b.w	80057ec <__malloc_unlock>
 8005624:	42a3      	cmp	r3, r4
 8005626:	d908      	bls.n	800563a <_free_r+0x42>
 8005628:	6820      	ldr	r0, [r4, #0]
 800562a:	1821      	adds	r1, r4, r0
 800562c:	428b      	cmp	r3, r1
 800562e:	bf01      	itttt	eq
 8005630:	6819      	ldreq	r1, [r3, #0]
 8005632:	685b      	ldreq	r3, [r3, #4]
 8005634:	1809      	addeq	r1, r1, r0
 8005636:	6021      	streq	r1, [r4, #0]
 8005638:	e7ed      	b.n	8005616 <_free_r+0x1e>
 800563a:	461a      	mov	r2, r3
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	b10b      	cbz	r3, 8005644 <_free_r+0x4c>
 8005640:	42a3      	cmp	r3, r4
 8005642:	d9fa      	bls.n	800563a <_free_r+0x42>
 8005644:	6811      	ldr	r1, [r2, #0]
 8005646:	1850      	adds	r0, r2, r1
 8005648:	42a0      	cmp	r0, r4
 800564a:	d10b      	bne.n	8005664 <_free_r+0x6c>
 800564c:	6820      	ldr	r0, [r4, #0]
 800564e:	4401      	add	r1, r0
 8005650:	1850      	adds	r0, r2, r1
 8005652:	4283      	cmp	r3, r0
 8005654:	6011      	str	r1, [r2, #0]
 8005656:	d1e0      	bne.n	800561a <_free_r+0x22>
 8005658:	6818      	ldr	r0, [r3, #0]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	6053      	str	r3, [r2, #4]
 800565e:	4408      	add	r0, r1
 8005660:	6010      	str	r0, [r2, #0]
 8005662:	e7da      	b.n	800561a <_free_r+0x22>
 8005664:	d902      	bls.n	800566c <_free_r+0x74>
 8005666:	230c      	movs	r3, #12
 8005668:	602b      	str	r3, [r5, #0]
 800566a:	e7d6      	b.n	800561a <_free_r+0x22>
 800566c:	6820      	ldr	r0, [r4, #0]
 800566e:	1821      	adds	r1, r4, r0
 8005670:	428b      	cmp	r3, r1
 8005672:	bf04      	itt	eq
 8005674:	6819      	ldreq	r1, [r3, #0]
 8005676:	685b      	ldreq	r3, [r3, #4]
 8005678:	6063      	str	r3, [r4, #4]
 800567a:	bf04      	itt	eq
 800567c:	1809      	addeq	r1, r1, r0
 800567e:	6021      	streq	r1, [r4, #0]
 8005680:	6054      	str	r4, [r2, #4]
 8005682:	e7ca      	b.n	800561a <_free_r+0x22>
 8005684:	bd38      	pop	{r3, r4, r5, pc}
 8005686:	bf00      	nop
 8005688:	200003c4 	.word	0x200003c4

0800568c <malloc>:
 800568c:	4b02      	ldr	r3, [pc, #8]	@ (8005698 <malloc+0xc>)
 800568e:	4601      	mov	r1, r0
 8005690:	6818      	ldr	r0, [r3, #0]
 8005692:	f000 b825 	b.w	80056e0 <_malloc_r>
 8005696:	bf00      	nop
 8005698:	20000048 	.word	0x20000048

0800569c <sbrk_aligned>:
 800569c:	b570      	push	{r4, r5, r6, lr}
 800569e:	4e0f      	ldr	r6, [pc, #60]	@ (80056dc <sbrk_aligned+0x40>)
 80056a0:	460c      	mov	r4, r1
 80056a2:	6831      	ldr	r1, [r6, #0]
 80056a4:	4605      	mov	r5, r0
 80056a6:	b911      	cbnz	r1, 80056ae <sbrk_aligned+0x12>
 80056a8:	f000 fdf6 	bl	8006298 <_sbrk_r>
 80056ac:	6030      	str	r0, [r6, #0]
 80056ae:	4621      	mov	r1, r4
 80056b0:	4628      	mov	r0, r5
 80056b2:	f000 fdf1 	bl	8006298 <_sbrk_r>
 80056b6:	1c43      	adds	r3, r0, #1
 80056b8:	d103      	bne.n	80056c2 <sbrk_aligned+0x26>
 80056ba:	f04f 34ff 	mov.w	r4, #4294967295
 80056be:	4620      	mov	r0, r4
 80056c0:	bd70      	pop	{r4, r5, r6, pc}
 80056c2:	1cc4      	adds	r4, r0, #3
 80056c4:	f024 0403 	bic.w	r4, r4, #3
 80056c8:	42a0      	cmp	r0, r4
 80056ca:	d0f8      	beq.n	80056be <sbrk_aligned+0x22>
 80056cc:	1a21      	subs	r1, r4, r0
 80056ce:	4628      	mov	r0, r5
 80056d0:	f000 fde2 	bl	8006298 <_sbrk_r>
 80056d4:	3001      	adds	r0, #1
 80056d6:	d1f2      	bne.n	80056be <sbrk_aligned+0x22>
 80056d8:	e7ef      	b.n	80056ba <sbrk_aligned+0x1e>
 80056da:	bf00      	nop
 80056dc:	200003c0 	.word	0x200003c0

080056e0 <_malloc_r>:
 80056e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056e4:	1ccd      	adds	r5, r1, #3
 80056e6:	f025 0503 	bic.w	r5, r5, #3
 80056ea:	3508      	adds	r5, #8
 80056ec:	2d0c      	cmp	r5, #12
 80056ee:	bf38      	it	cc
 80056f0:	250c      	movcc	r5, #12
 80056f2:	2d00      	cmp	r5, #0
 80056f4:	4606      	mov	r6, r0
 80056f6:	db01      	blt.n	80056fc <_malloc_r+0x1c>
 80056f8:	42a9      	cmp	r1, r5
 80056fa:	d904      	bls.n	8005706 <_malloc_r+0x26>
 80056fc:	230c      	movs	r3, #12
 80056fe:	6033      	str	r3, [r6, #0]
 8005700:	2000      	movs	r0, #0
 8005702:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005706:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80057dc <_malloc_r+0xfc>
 800570a:	f000 f869 	bl	80057e0 <__malloc_lock>
 800570e:	f8d8 3000 	ldr.w	r3, [r8]
 8005712:	461c      	mov	r4, r3
 8005714:	bb44      	cbnz	r4, 8005768 <_malloc_r+0x88>
 8005716:	4629      	mov	r1, r5
 8005718:	4630      	mov	r0, r6
 800571a:	f7ff ffbf 	bl	800569c <sbrk_aligned>
 800571e:	1c43      	adds	r3, r0, #1
 8005720:	4604      	mov	r4, r0
 8005722:	d158      	bne.n	80057d6 <_malloc_r+0xf6>
 8005724:	f8d8 4000 	ldr.w	r4, [r8]
 8005728:	4627      	mov	r7, r4
 800572a:	2f00      	cmp	r7, #0
 800572c:	d143      	bne.n	80057b6 <_malloc_r+0xd6>
 800572e:	2c00      	cmp	r4, #0
 8005730:	d04b      	beq.n	80057ca <_malloc_r+0xea>
 8005732:	6823      	ldr	r3, [r4, #0]
 8005734:	4639      	mov	r1, r7
 8005736:	4630      	mov	r0, r6
 8005738:	eb04 0903 	add.w	r9, r4, r3
 800573c:	f000 fdac 	bl	8006298 <_sbrk_r>
 8005740:	4581      	cmp	r9, r0
 8005742:	d142      	bne.n	80057ca <_malloc_r+0xea>
 8005744:	6821      	ldr	r1, [r4, #0]
 8005746:	1a6d      	subs	r5, r5, r1
 8005748:	4629      	mov	r1, r5
 800574a:	4630      	mov	r0, r6
 800574c:	f7ff ffa6 	bl	800569c <sbrk_aligned>
 8005750:	3001      	adds	r0, #1
 8005752:	d03a      	beq.n	80057ca <_malloc_r+0xea>
 8005754:	6823      	ldr	r3, [r4, #0]
 8005756:	442b      	add	r3, r5
 8005758:	6023      	str	r3, [r4, #0]
 800575a:	f8d8 3000 	ldr.w	r3, [r8]
 800575e:	685a      	ldr	r2, [r3, #4]
 8005760:	bb62      	cbnz	r2, 80057bc <_malloc_r+0xdc>
 8005762:	f8c8 7000 	str.w	r7, [r8]
 8005766:	e00f      	b.n	8005788 <_malloc_r+0xa8>
 8005768:	6822      	ldr	r2, [r4, #0]
 800576a:	1b52      	subs	r2, r2, r5
 800576c:	d420      	bmi.n	80057b0 <_malloc_r+0xd0>
 800576e:	2a0b      	cmp	r2, #11
 8005770:	d917      	bls.n	80057a2 <_malloc_r+0xc2>
 8005772:	1961      	adds	r1, r4, r5
 8005774:	42a3      	cmp	r3, r4
 8005776:	6025      	str	r5, [r4, #0]
 8005778:	bf18      	it	ne
 800577a:	6059      	strne	r1, [r3, #4]
 800577c:	6863      	ldr	r3, [r4, #4]
 800577e:	bf08      	it	eq
 8005780:	f8c8 1000 	streq.w	r1, [r8]
 8005784:	5162      	str	r2, [r4, r5]
 8005786:	604b      	str	r3, [r1, #4]
 8005788:	4630      	mov	r0, r6
 800578a:	f000 f82f 	bl	80057ec <__malloc_unlock>
 800578e:	f104 000b 	add.w	r0, r4, #11
 8005792:	1d23      	adds	r3, r4, #4
 8005794:	f020 0007 	bic.w	r0, r0, #7
 8005798:	1ac2      	subs	r2, r0, r3
 800579a:	bf1c      	itt	ne
 800579c:	1a1b      	subne	r3, r3, r0
 800579e:	50a3      	strne	r3, [r4, r2]
 80057a0:	e7af      	b.n	8005702 <_malloc_r+0x22>
 80057a2:	6862      	ldr	r2, [r4, #4]
 80057a4:	42a3      	cmp	r3, r4
 80057a6:	bf0c      	ite	eq
 80057a8:	f8c8 2000 	streq.w	r2, [r8]
 80057ac:	605a      	strne	r2, [r3, #4]
 80057ae:	e7eb      	b.n	8005788 <_malloc_r+0xa8>
 80057b0:	4623      	mov	r3, r4
 80057b2:	6864      	ldr	r4, [r4, #4]
 80057b4:	e7ae      	b.n	8005714 <_malloc_r+0x34>
 80057b6:	463c      	mov	r4, r7
 80057b8:	687f      	ldr	r7, [r7, #4]
 80057ba:	e7b6      	b.n	800572a <_malloc_r+0x4a>
 80057bc:	461a      	mov	r2, r3
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	42a3      	cmp	r3, r4
 80057c2:	d1fb      	bne.n	80057bc <_malloc_r+0xdc>
 80057c4:	2300      	movs	r3, #0
 80057c6:	6053      	str	r3, [r2, #4]
 80057c8:	e7de      	b.n	8005788 <_malloc_r+0xa8>
 80057ca:	230c      	movs	r3, #12
 80057cc:	6033      	str	r3, [r6, #0]
 80057ce:	4630      	mov	r0, r6
 80057d0:	f000 f80c 	bl	80057ec <__malloc_unlock>
 80057d4:	e794      	b.n	8005700 <_malloc_r+0x20>
 80057d6:	6005      	str	r5, [r0, #0]
 80057d8:	e7d6      	b.n	8005788 <_malloc_r+0xa8>
 80057da:	bf00      	nop
 80057dc:	200003c4 	.word	0x200003c4

080057e0 <__malloc_lock>:
 80057e0:	4801      	ldr	r0, [pc, #4]	@ (80057e8 <__malloc_lock+0x8>)
 80057e2:	f7ff b8ae 	b.w	8004942 <__retarget_lock_acquire_recursive>
 80057e6:	bf00      	nop
 80057e8:	200003bc 	.word	0x200003bc

080057ec <__malloc_unlock>:
 80057ec:	4801      	ldr	r0, [pc, #4]	@ (80057f4 <__malloc_unlock+0x8>)
 80057ee:	f7ff b8a9 	b.w	8004944 <__retarget_lock_release_recursive>
 80057f2:	bf00      	nop
 80057f4:	200003bc 	.word	0x200003bc

080057f8 <_Balloc>:
 80057f8:	b570      	push	{r4, r5, r6, lr}
 80057fa:	69c6      	ldr	r6, [r0, #28]
 80057fc:	4604      	mov	r4, r0
 80057fe:	460d      	mov	r5, r1
 8005800:	b976      	cbnz	r6, 8005820 <_Balloc+0x28>
 8005802:	2010      	movs	r0, #16
 8005804:	f7ff ff42 	bl	800568c <malloc>
 8005808:	4602      	mov	r2, r0
 800580a:	61e0      	str	r0, [r4, #28]
 800580c:	b920      	cbnz	r0, 8005818 <_Balloc+0x20>
 800580e:	4b18      	ldr	r3, [pc, #96]	@ (8005870 <_Balloc+0x78>)
 8005810:	4818      	ldr	r0, [pc, #96]	@ (8005874 <_Balloc+0x7c>)
 8005812:	216b      	movs	r1, #107	@ 0x6b
 8005814:	f000 fd5e 	bl	80062d4 <__assert_func>
 8005818:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800581c:	6006      	str	r6, [r0, #0]
 800581e:	60c6      	str	r6, [r0, #12]
 8005820:	69e6      	ldr	r6, [r4, #28]
 8005822:	68f3      	ldr	r3, [r6, #12]
 8005824:	b183      	cbz	r3, 8005848 <_Balloc+0x50>
 8005826:	69e3      	ldr	r3, [r4, #28]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800582e:	b9b8      	cbnz	r0, 8005860 <_Balloc+0x68>
 8005830:	2101      	movs	r1, #1
 8005832:	fa01 f605 	lsl.w	r6, r1, r5
 8005836:	1d72      	adds	r2, r6, #5
 8005838:	0092      	lsls	r2, r2, #2
 800583a:	4620      	mov	r0, r4
 800583c:	f000 fd68 	bl	8006310 <_calloc_r>
 8005840:	b160      	cbz	r0, 800585c <_Balloc+0x64>
 8005842:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005846:	e00e      	b.n	8005866 <_Balloc+0x6e>
 8005848:	2221      	movs	r2, #33	@ 0x21
 800584a:	2104      	movs	r1, #4
 800584c:	4620      	mov	r0, r4
 800584e:	f000 fd5f 	bl	8006310 <_calloc_r>
 8005852:	69e3      	ldr	r3, [r4, #28]
 8005854:	60f0      	str	r0, [r6, #12]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d1e4      	bne.n	8005826 <_Balloc+0x2e>
 800585c:	2000      	movs	r0, #0
 800585e:	bd70      	pop	{r4, r5, r6, pc}
 8005860:	6802      	ldr	r2, [r0, #0]
 8005862:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005866:	2300      	movs	r3, #0
 8005868:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800586c:	e7f7      	b.n	800585e <_Balloc+0x66>
 800586e:	bf00      	nop
 8005870:	080065d5 	.word	0x080065d5
 8005874:	08006655 	.word	0x08006655

08005878 <_Bfree>:
 8005878:	b570      	push	{r4, r5, r6, lr}
 800587a:	69c6      	ldr	r6, [r0, #28]
 800587c:	4605      	mov	r5, r0
 800587e:	460c      	mov	r4, r1
 8005880:	b976      	cbnz	r6, 80058a0 <_Bfree+0x28>
 8005882:	2010      	movs	r0, #16
 8005884:	f7ff ff02 	bl	800568c <malloc>
 8005888:	4602      	mov	r2, r0
 800588a:	61e8      	str	r0, [r5, #28]
 800588c:	b920      	cbnz	r0, 8005898 <_Bfree+0x20>
 800588e:	4b09      	ldr	r3, [pc, #36]	@ (80058b4 <_Bfree+0x3c>)
 8005890:	4809      	ldr	r0, [pc, #36]	@ (80058b8 <_Bfree+0x40>)
 8005892:	218f      	movs	r1, #143	@ 0x8f
 8005894:	f000 fd1e 	bl	80062d4 <__assert_func>
 8005898:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800589c:	6006      	str	r6, [r0, #0]
 800589e:	60c6      	str	r6, [r0, #12]
 80058a0:	b13c      	cbz	r4, 80058b2 <_Bfree+0x3a>
 80058a2:	69eb      	ldr	r3, [r5, #28]
 80058a4:	6862      	ldr	r2, [r4, #4]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80058ac:	6021      	str	r1, [r4, #0]
 80058ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80058b2:	bd70      	pop	{r4, r5, r6, pc}
 80058b4:	080065d5 	.word	0x080065d5
 80058b8:	08006655 	.word	0x08006655

080058bc <__multadd>:
 80058bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058c0:	690d      	ldr	r5, [r1, #16]
 80058c2:	4607      	mov	r7, r0
 80058c4:	460c      	mov	r4, r1
 80058c6:	461e      	mov	r6, r3
 80058c8:	f101 0c14 	add.w	ip, r1, #20
 80058cc:	2000      	movs	r0, #0
 80058ce:	f8dc 3000 	ldr.w	r3, [ip]
 80058d2:	b299      	uxth	r1, r3
 80058d4:	fb02 6101 	mla	r1, r2, r1, r6
 80058d8:	0c1e      	lsrs	r6, r3, #16
 80058da:	0c0b      	lsrs	r3, r1, #16
 80058dc:	fb02 3306 	mla	r3, r2, r6, r3
 80058e0:	b289      	uxth	r1, r1
 80058e2:	3001      	adds	r0, #1
 80058e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80058e8:	4285      	cmp	r5, r0
 80058ea:	f84c 1b04 	str.w	r1, [ip], #4
 80058ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80058f2:	dcec      	bgt.n	80058ce <__multadd+0x12>
 80058f4:	b30e      	cbz	r6, 800593a <__multadd+0x7e>
 80058f6:	68a3      	ldr	r3, [r4, #8]
 80058f8:	42ab      	cmp	r3, r5
 80058fa:	dc19      	bgt.n	8005930 <__multadd+0x74>
 80058fc:	6861      	ldr	r1, [r4, #4]
 80058fe:	4638      	mov	r0, r7
 8005900:	3101      	adds	r1, #1
 8005902:	f7ff ff79 	bl	80057f8 <_Balloc>
 8005906:	4680      	mov	r8, r0
 8005908:	b928      	cbnz	r0, 8005916 <__multadd+0x5a>
 800590a:	4602      	mov	r2, r0
 800590c:	4b0c      	ldr	r3, [pc, #48]	@ (8005940 <__multadd+0x84>)
 800590e:	480d      	ldr	r0, [pc, #52]	@ (8005944 <__multadd+0x88>)
 8005910:	21ba      	movs	r1, #186	@ 0xba
 8005912:	f000 fcdf 	bl	80062d4 <__assert_func>
 8005916:	6922      	ldr	r2, [r4, #16]
 8005918:	3202      	adds	r2, #2
 800591a:	f104 010c 	add.w	r1, r4, #12
 800591e:	0092      	lsls	r2, r2, #2
 8005920:	300c      	adds	r0, #12
 8005922:	f000 fcc9 	bl	80062b8 <memcpy>
 8005926:	4621      	mov	r1, r4
 8005928:	4638      	mov	r0, r7
 800592a:	f7ff ffa5 	bl	8005878 <_Bfree>
 800592e:	4644      	mov	r4, r8
 8005930:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005934:	3501      	adds	r5, #1
 8005936:	615e      	str	r6, [r3, #20]
 8005938:	6125      	str	r5, [r4, #16]
 800593a:	4620      	mov	r0, r4
 800593c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005940:	08006644 	.word	0x08006644
 8005944:	08006655 	.word	0x08006655

08005948 <__hi0bits>:
 8005948:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800594c:	4603      	mov	r3, r0
 800594e:	bf36      	itet	cc
 8005950:	0403      	lslcc	r3, r0, #16
 8005952:	2000      	movcs	r0, #0
 8005954:	2010      	movcc	r0, #16
 8005956:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800595a:	bf3c      	itt	cc
 800595c:	021b      	lslcc	r3, r3, #8
 800595e:	3008      	addcc	r0, #8
 8005960:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005964:	bf3c      	itt	cc
 8005966:	011b      	lslcc	r3, r3, #4
 8005968:	3004      	addcc	r0, #4
 800596a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800596e:	bf3c      	itt	cc
 8005970:	009b      	lslcc	r3, r3, #2
 8005972:	3002      	addcc	r0, #2
 8005974:	2b00      	cmp	r3, #0
 8005976:	db05      	blt.n	8005984 <__hi0bits+0x3c>
 8005978:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800597c:	f100 0001 	add.w	r0, r0, #1
 8005980:	bf08      	it	eq
 8005982:	2020      	moveq	r0, #32
 8005984:	4770      	bx	lr

08005986 <__lo0bits>:
 8005986:	6803      	ldr	r3, [r0, #0]
 8005988:	4602      	mov	r2, r0
 800598a:	f013 0007 	ands.w	r0, r3, #7
 800598e:	d00b      	beq.n	80059a8 <__lo0bits+0x22>
 8005990:	07d9      	lsls	r1, r3, #31
 8005992:	d421      	bmi.n	80059d8 <__lo0bits+0x52>
 8005994:	0798      	lsls	r0, r3, #30
 8005996:	bf49      	itett	mi
 8005998:	085b      	lsrmi	r3, r3, #1
 800599a:	089b      	lsrpl	r3, r3, #2
 800599c:	2001      	movmi	r0, #1
 800599e:	6013      	strmi	r3, [r2, #0]
 80059a0:	bf5c      	itt	pl
 80059a2:	6013      	strpl	r3, [r2, #0]
 80059a4:	2002      	movpl	r0, #2
 80059a6:	4770      	bx	lr
 80059a8:	b299      	uxth	r1, r3
 80059aa:	b909      	cbnz	r1, 80059b0 <__lo0bits+0x2a>
 80059ac:	0c1b      	lsrs	r3, r3, #16
 80059ae:	2010      	movs	r0, #16
 80059b0:	b2d9      	uxtb	r1, r3
 80059b2:	b909      	cbnz	r1, 80059b8 <__lo0bits+0x32>
 80059b4:	3008      	adds	r0, #8
 80059b6:	0a1b      	lsrs	r3, r3, #8
 80059b8:	0719      	lsls	r1, r3, #28
 80059ba:	bf04      	itt	eq
 80059bc:	091b      	lsreq	r3, r3, #4
 80059be:	3004      	addeq	r0, #4
 80059c0:	0799      	lsls	r1, r3, #30
 80059c2:	bf04      	itt	eq
 80059c4:	089b      	lsreq	r3, r3, #2
 80059c6:	3002      	addeq	r0, #2
 80059c8:	07d9      	lsls	r1, r3, #31
 80059ca:	d403      	bmi.n	80059d4 <__lo0bits+0x4e>
 80059cc:	085b      	lsrs	r3, r3, #1
 80059ce:	f100 0001 	add.w	r0, r0, #1
 80059d2:	d003      	beq.n	80059dc <__lo0bits+0x56>
 80059d4:	6013      	str	r3, [r2, #0]
 80059d6:	4770      	bx	lr
 80059d8:	2000      	movs	r0, #0
 80059da:	4770      	bx	lr
 80059dc:	2020      	movs	r0, #32
 80059de:	4770      	bx	lr

080059e0 <__i2b>:
 80059e0:	b510      	push	{r4, lr}
 80059e2:	460c      	mov	r4, r1
 80059e4:	2101      	movs	r1, #1
 80059e6:	f7ff ff07 	bl	80057f8 <_Balloc>
 80059ea:	4602      	mov	r2, r0
 80059ec:	b928      	cbnz	r0, 80059fa <__i2b+0x1a>
 80059ee:	4b05      	ldr	r3, [pc, #20]	@ (8005a04 <__i2b+0x24>)
 80059f0:	4805      	ldr	r0, [pc, #20]	@ (8005a08 <__i2b+0x28>)
 80059f2:	f240 1145 	movw	r1, #325	@ 0x145
 80059f6:	f000 fc6d 	bl	80062d4 <__assert_func>
 80059fa:	2301      	movs	r3, #1
 80059fc:	6144      	str	r4, [r0, #20]
 80059fe:	6103      	str	r3, [r0, #16]
 8005a00:	bd10      	pop	{r4, pc}
 8005a02:	bf00      	nop
 8005a04:	08006644 	.word	0x08006644
 8005a08:	08006655 	.word	0x08006655

08005a0c <__multiply>:
 8005a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a10:	4617      	mov	r7, r2
 8005a12:	690a      	ldr	r2, [r1, #16]
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	bfa8      	it	ge
 8005a1a:	463b      	movge	r3, r7
 8005a1c:	4689      	mov	r9, r1
 8005a1e:	bfa4      	itt	ge
 8005a20:	460f      	movge	r7, r1
 8005a22:	4699      	movge	r9, r3
 8005a24:	693d      	ldr	r5, [r7, #16]
 8005a26:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	6879      	ldr	r1, [r7, #4]
 8005a2e:	eb05 060a 	add.w	r6, r5, sl
 8005a32:	42b3      	cmp	r3, r6
 8005a34:	b085      	sub	sp, #20
 8005a36:	bfb8      	it	lt
 8005a38:	3101      	addlt	r1, #1
 8005a3a:	f7ff fedd 	bl	80057f8 <_Balloc>
 8005a3e:	b930      	cbnz	r0, 8005a4e <__multiply+0x42>
 8005a40:	4602      	mov	r2, r0
 8005a42:	4b41      	ldr	r3, [pc, #260]	@ (8005b48 <__multiply+0x13c>)
 8005a44:	4841      	ldr	r0, [pc, #260]	@ (8005b4c <__multiply+0x140>)
 8005a46:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005a4a:	f000 fc43 	bl	80062d4 <__assert_func>
 8005a4e:	f100 0414 	add.w	r4, r0, #20
 8005a52:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8005a56:	4623      	mov	r3, r4
 8005a58:	2200      	movs	r2, #0
 8005a5a:	4573      	cmp	r3, lr
 8005a5c:	d320      	bcc.n	8005aa0 <__multiply+0x94>
 8005a5e:	f107 0814 	add.w	r8, r7, #20
 8005a62:	f109 0114 	add.w	r1, r9, #20
 8005a66:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8005a6a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8005a6e:	9302      	str	r3, [sp, #8]
 8005a70:	1beb      	subs	r3, r5, r7
 8005a72:	3b15      	subs	r3, #21
 8005a74:	f023 0303 	bic.w	r3, r3, #3
 8005a78:	3304      	adds	r3, #4
 8005a7a:	3715      	adds	r7, #21
 8005a7c:	42bd      	cmp	r5, r7
 8005a7e:	bf38      	it	cc
 8005a80:	2304      	movcc	r3, #4
 8005a82:	9301      	str	r3, [sp, #4]
 8005a84:	9b02      	ldr	r3, [sp, #8]
 8005a86:	9103      	str	r1, [sp, #12]
 8005a88:	428b      	cmp	r3, r1
 8005a8a:	d80c      	bhi.n	8005aa6 <__multiply+0x9a>
 8005a8c:	2e00      	cmp	r6, #0
 8005a8e:	dd03      	ble.n	8005a98 <__multiply+0x8c>
 8005a90:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d055      	beq.n	8005b44 <__multiply+0x138>
 8005a98:	6106      	str	r6, [r0, #16]
 8005a9a:	b005      	add	sp, #20
 8005a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aa0:	f843 2b04 	str.w	r2, [r3], #4
 8005aa4:	e7d9      	b.n	8005a5a <__multiply+0x4e>
 8005aa6:	f8b1 a000 	ldrh.w	sl, [r1]
 8005aaa:	f1ba 0f00 	cmp.w	sl, #0
 8005aae:	d01f      	beq.n	8005af0 <__multiply+0xe4>
 8005ab0:	46c4      	mov	ip, r8
 8005ab2:	46a1      	mov	r9, r4
 8005ab4:	2700      	movs	r7, #0
 8005ab6:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005aba:	f8d9 3000 	ldr.w	r3, [r9]
 8005abe:	fa1f fb82 	uxth.w	fp, r2
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	fb0a 330b 	mla	r3, sl, fp, r3
 8005ac8:	443b      	add	r3, r7
 8005aca:	f8d9 7000 	ldr.w	r7, [r9]
 8005ace:	0c12      	lsrs	r2, r2, #16
 8005ad0:	0c3f      	lsrs	r7, r7, #16
 8005ad2:	fb0a 7202 	mla	r2, sl, r2, r7
 8005ad6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ae0:	4565      	cmp	r5, ip
 8005ae2:	f849 3b04 	str.w	r3, [r9], #4
 8005ae6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8005aea:	d8e4      	bhi.n	8005ab6 <__multiply+0xaa>
 8005aec:	9b01      	ldr	r3, [sp, #4]
 8005aee:	50e7      	str	r7, [r4, r3]
 8005af0:	9b03      	ldr	r3, [sp, #12]
 8005af2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005af6:	3104      	adds	r1, #4
 8005af8:	f1b9 0f00 	cmp.w	r9, #0
 8005afc:	d020      	beq.n	8005b40 <__multiply+0x134>
 8005afe:	6823      	ldr	r3, [r4, #0]
 8005b00:	4647      	mov	r7, r8
 8005b02:	46a4      	mov	ip, r4
 8005b04:	f04f 0a00 	mov.w	sl, #0
 8005b08:	f8b7 b000 	ldrh.w	fp, [r7]
 8005b0c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8005b10:	fb09 220b 	mla	r2, r9, fp, r2
 8005b14:	4452      	add	r2, sl
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005b1c:	f84c 3b04 	str.w	r3, [ip], #4
 8005b20:	f857 3b04 	ldr.w	r3, [r7], #4
 8005b24:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005b28:	f8bc 3000 	ldrh.w	r3, [ip]
 8005b2c:	fb09 330a 	mla	r3, r9, sl, r3
 8005b30:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8005b34:	42bd      	cmp	r5, r7
 8005b36:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005b3a:	d8e5      	bhi.n	8005b08 <__multiply+0xfc>
 8005b3c:	9a01      	ldr	r2, [sp, #4]
 8005b3e:	50a3      	str	r3, [r4, r2]
 8005b40:	3404      	adds	r4, #4
 8005b42:	e79f      	b.n	8005a84 <__multiply+0x78>
 8005b44:	3e01      	subs	r6, #1
 8005b46:	e7a1      	b.n	8005a8c <__multiply+0x80>
 8005b48:	08006644 	.word	0x08006644
 8005b4c:	08006655 	.word	0x08006655

08005b50 <__pow5mult>:
 8005b50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b54:	4615      	mov	r5, r2
 8005b56:	f012 0203 	ands.w	r2, r2, #3
 8005b5a:	4607      	mov	r7, r0
 8005b5c:	460e      	mov	r6, r1
 8005b5e:	d007      	beq.n	8005b70 <__pow5mult+0x20>
 8005b60:	4c25      	ldr	r4, [pc, #148]	@ (8005bf8 <__pow5mult+0xa8>)
 8005b62:	3a01      	subs	r2, #1
 8005b64:	2300      	movs	r3, #0
 8005b66:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005b6a:	f7ff fea7 	bl	80058bc <__multadd>
 8005b6e:	4606      	mov	r6, r0
 8005b70:	10ad      	asrs	r5, r5, #2
 8005b72:	d03d      	beq.n	8005bf0 <__pow5mult+0xa0>
 8005b74:	69fc      	ldr	r4, [r7, #28]
 8005b76:	b97c      	cbnz	r4, 8005b98 <__pow5mult+0x48>
 8005b78:	2010      	movs	r0, #16
 8005b7a:	f7ff fd87 	bl	800568c <malloc>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	61f8      	str	r0, [r7, #28]
 8005b82:	b928      	cbnz	r0, 8005b90 <__pow5mult+0x40>
 8005b84:	4b1d      	ldr	r3, [pc, #116]	@ (8005bfc <__pow5mult+0xac>)
 8005b86:	481e      	ldr	r0, [pc, #120]	@ (8005c00 <__pow5mult+0xb0>)
 8005b88:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005b8c:	f000 fba2 	bl	80062d4 <__assert_func>
 8005b90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005b94:	6004      	str	r4, [r0, #0]
 8005b96:	60c4      	str	r4, [r0, #12]
 8005b98:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005b9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005ba0:	b94c      	cbnz	r4, 8005bb6 <__pow5mult+0x66>
 8005ba2:	f240 2171 	movw	r1, #625	@ 0x271
 8005ba6:	4638      	mov	r0, r7
 8005ba8:	f7ff ff1a 	bl	80059e0 <__i2b>
 8005bac:	2300      	movs	r3, #0
 8005bae:	f8c8 0008 	str.w	r0, [r8, #8]
 8005bb2:	4604      	mov	r4, r0
 8005bb4:	6003      	str	r3, [r0, #0]
 8005bb6:	f04f 0900 	mov.w	r9, #0
 8005bba:	07eb      	lsls	r3, r5, #31
 8005bbc:	d50a      	bpl.n	8005bd4 <__pow5mult+0x84>
 8005bbe:	4631      	mov	r1, r6
 8005bc0:	4622      	mov	r2, r4
 8005bc2:	4638      	mov	r0, r7
 8005bc4:	f7ff ff22 	bl	8005a0c <__multiply>
 8005bc8:	4631      	mov	r1, r6
 8005bca:	4680      	mov	r8, r0
 8005bcc:	4638      	mov	r0, r7
 8005bce:	f7ff fe53 	bl	8005878 <_Bfree>
 8005bd2:	4646      	mov	r6, r8
 8005bd4:	106d      	asrs	r5, r5, #1
 8005bd6:	d00b      	beq.n	8005bf0 <__pow5mult+0xa0>
 8005bd8:	6820      	ldr	r0, [r4, #0]
 8005bda:	b938      	cbnz	r0, 8005bec <__pow5mult+0x9c>
 8005bdc:	4622      	mov	r2, r4
 8005bde:	4621      	mov	r1, r4
 8005be0:	4638      	mov	r0, r7
 8005be2:	f7ff ff13 	bl	8005a0c <__multiply>
 8005be6:	6020      	str	r0, [r4, #0]
 8005be8:	f8c0 9000 	str.w	r9, [r0]
 8005bec:	4604      	mov	r4, r0
 8005bee:	e7e4      	b.n	8005bba <__pow5mult+0x6a>
 8005bf0:	4630      	mov	r0, r6
 8005bf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bf6:	bf00      	nop
 8005bf8:	08006708 	.word	0x08006708
 8005bfc:	080065d5 	.word	0x080065d5
 8005c00:	08006655 	.word	0x08006655

08005c04 <__lshift>:
 8005c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c08:	460c      	mov	r4, r1
 8005c0a:	6849      	ldr	r1, [r1, #4]
 8005c0c:	6923      	ldr	r3, [r4, #16]
 8005c0e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005c12:	68a3      	ldr	r3, [r4, #8]
 8005c14:	4607      	mov	r7, r0
 8005c16:	4691      	mov	r9, r2
 8005c18:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005c1c:	f108 0601 	add.w	r6, r8, #1
 8005c20:	42b3      	cmp	r3, r6
 8005c22:	db0b      	blt.n	8005c3c <__lshift+0x38>
 8005c24:	4638      	mov	r0, r7
 8005c26:	f7ff fde7 	bl	80057f8 <_Balloc>
 8005c2a:	4605      	mov	r5, r0
 8005c2c:	b948      	cbnz	r0, 8005c42 <__lshift+0x3e>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	4b28      	ldr	r3, [pc, #160]	@ (8005cd4 <__lshift+0xd0>)
 8005c32:	4829      	ldr	r0, [pc, #164]	@ (8005cd8 <__lshift+0xd4>)
 8005c34:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005c38:	f000 fb4c 	bl	80062d4 <__assert_func>
 8005c3c:	3101      	adds	r1, #1
 8005c3e:	005b      	lsls	r3, r3, #1
 8005c40:	e7ee      	b.n	8005c20 <__lshift+0x1c>
 8005c42:	2300      	movs	r3, #0
 8005c44:	f100 0114 	add.w	r1, r0, #20
 8005c48:	f100 0210 	add.w	r2, r0, #16
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	4553      	cmp	r3, sl
 8005c50:	db33      	blt.n	8005cba <__lshift+0xb6>
 8005c52:	6920      	ldr	r0, [r4, #16]
 8005c54:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005c58:	f104 0314 	add.w	r3, r4, #20
 8005c5c:	f019 091f 	ands.w	r9, r9, #31
 8005c60:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005c64:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005c68:	d02b      	beq.n	8005cc2 <__lshift+0xbe>
 8005c6a:	f1c9 0e20 	rsb	lr, r9, #32
 8005c6e:	468a      	mov	sl, r1
 8005c70:	2200      	movs	r2, #0
 8005c72:	6818      	ldr	r0, [r3, #0]
 8005c74:	fa00 f009 	lsl.w	r0, r0, r9
 8005c78:	4310      	orrs	r0, r2
 8005c7a:	f84a 0b04 	str.w	r0, [sl], #4
 8005c7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c82:	459c      	cmp	ip, r3
 8005c84:	fa22 f20e 	lsr.w	r2, r2, lr
 8005c88:	d8f3      	bhi.n	8005c72 <__lshift+0x6e>
 8005c8a:	ebac 0304 	sub.w	r3, ip, r4
 8005c8e:	3b15      	subs	r3, #21
 8005c90:	f023 0303 	bic.w	r3, r3, #3
 8005c94:	3304      	adds	r3, #4
 8005c96:	f104 0015 	add.w	r0, r4, #21
 8005c9a:	4560      	cmp	r0, ip
 8005c9c:	bf88      	it	hi
 8005c9e:	2304      	movhi	r3, #4
 8005ca0:	50ca      	str	r2, [r1, r3]
 8005ca2:	b10a      	cbz	r2, 8005ca8 <__lshift+0xa4>
 8005ca4:	f108 0602 	add.w	r6, r8, #2
 8005ca8:	3e01      	subs	r6, #1
 8005caa:	4638      	mov	r0, r7
 8005cac:	612e      	str	r6, [r5, #16]
 8005cae:	4621      	mov	r1, r4
 8005cb0:	f7ff fde2 	bl	8005878 <_Bfree>
 8005cb4:	4628      	mov	r0, r5
 8005cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cba:	f842 0f04 	str.w	r0, [r2, #4]!
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	e7c5      	b.n	8005c4e <__lshift+0x4a>
 8005cc2:	3904      	subs	r1, #4
 8005cc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cc8:	f841 2f04 	str.w	r2, [r1, #4]!
 8005ccc:	459c      	cmp	ip, r3
 8005cce:	d8f9      	bhi.n	8005cc4 <__lshift+0xc0>
 8005cd0:	e7ea      	b.n	8005ca8 <__lshift+0xa4>
 8005cd2:	bf00      	nop
 8005cd4:	08006644 	.word	0x08006644
 8005cd8:	08006655 	.word	0x08006655

08005cdc <__mcmp>:
 8005cdc:	690a      	ldr	r2, [r1, #16]
 8005cde:	4603      	mov	r3, r0
 8005ce0:	6900      	ldr	r0, [r0, #16]
 8005ce2:	1a80      	subs	r0, r0, r2
 8005ce4:	b530      	push	{r4, r5, lr}
 8005ce6:	d10e      	bne.n	8005d06 <__mcmp+0x2a>
 8005ce8:	3314      	adds	r3, #20
 8005cea:	3114      	adds	r1, #20
 8005cec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005cf0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005cf4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005cf8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005cfc:	4295      	cmp	r5, r2
 8005cfe:	d003      	beq.n	8005d08 <__mcmp+0x2c>
 8005d00:	d205      	bcs.n	8005d0e <__mcmp+0x32>
 8005d02:	f04f 30ff 	mov.w	r0, #4294967295
 8005d06:	bd30      	pop	{r4, r5, pc}
 8005d08:	42a3      	cmp	r3, r4
 8005d0a:	d3f3      	bcc.n	8005cf4 <__mcmp+0x18>
 8005d0c:	e7fb      	b.n	8005d06 <__mcmp+0x2a>
 8005d0e:	2001      	movs	r0, #1
 8005d10:	e7f9      	b.n	8005d06 <__mcmp+0x2a>
	...

08005d14 <__mdiff>:
 8005d14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d18:	4689      	mov	r9, r1
 8005d1a:	4606      	mov	r6, r0
 8005d1c:	4611      	mov	r1, r2
 8005d1e:	4648      	mov	r0, r9
 8005d20:	4614      	mov	r4, r2
 8005d22:	f7ff ffdb 	bl	8005cdc <__mcmp>
 8005d26:	1e05      	subs	r5, r0, #0
 8005d28:	d112      	bne.n	8005d50 <__mdiff+0x3c>
 8005d2a:	4629      	mov	r1, r5
 8005d2c:	4630      	mov	r0, r6
 8005d2e:	f7ff fd63 	bl	80057f8 <_Balloc>
 8005d32:	4602      	mov	r2, r0
 8005d34:	b928      	cbnz	r0, 8005d42 <__mdiff+0x2e>
 8005d36:	4b3f      	ldr	r3, [pc, #252]	@ (8005e34 <__mdiff+0x120>)
 8005d38:	f240 2137 	movw	r1, #567	@ 0x237
 8005d3c:	483e      	ldr	r0, [pc, #248]	@ (8005e38 <__mdiff+0x124>)
 8005d3e:	f000 fac9 	bl	80062d4 <__assert_func>
 8005d42:	2301      	movs	r3, #1
 8005d44:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005d48:	4610      	mov	r0, r2
 8005d4a:	b003      	add	sp, #12
 8005d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d50:	bfbc      	itt	lt
 8005d52:	464b      	movlt	r3, r9
 8005d54:	46a1      	movlt	r9, r4
 8005d56:	4630      	mov	r0, r6
 8005d58:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005d5c:	bfba      	itte	lt
 8005d5e:	461c      	movlt	r4, r3
 8005d60:	2501      	movlt	r5, #1
 8005d62:	2500      	movge	r5, #0
 8005d64:	f7ff fd48 	bl	80057f8 <_Balloc>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	b918      	cbnz	r0, 8005d74 <__mdiff+0x60>
 8005d6c:	4b31      	ldr	r3, [pc, #196]	@ (8005e34 <__mdiff+0x120>)
 8005d6e:	f240 2145 	movw	r1, #581	@ 0x245
 8005d72:	e7e3      	b.n	8005d3c <__mdiff+0x28>
 8005d74:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005d78:	6926      	ldr	r6, [r4, #16]
 8005d7a:	60c5      	str	r5, [r0, #12]
 8005d7c:	f109 0310 	add.w	r3, r9, #16
 8005d80:	f109 0514 	add.w	r5, r9, #20
 8005d84:	f104 0e14 	add.w	lr, r4, #20
 8005d88:	f100 0b14 	add.w	fp, r0, #20
 8005d8c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005d90:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005d94:	9301      	str	r3, [sp, #4]
 8005d96:	46d9      	mov	r9, fp
 8005d98:	f04f 0c00 	mov.w	ip, #0
 8005d9c:	9b01      	ldr	r3, [sp, #4]
 8005d9e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005da2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005da6:	9301      	str	r3, [sp, #4]
 8005da8:	fa1f f38a 	uxth.w	r3, sl
 8005dac:	4619      	mov	r1, r3
 8005dae:	b283      	uxth	r3, r0
 8005db0:	1acb      	subs	r3, r1, r3
 8005db2:	0c00      	lsrs	r0, r0, #16
 8005db4:	4463      	add	r3, ip
 8005db6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005dba:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005dc4:	4576      	cmp	r6, lr
 8005dc6:	f849 3b04 	str.w	r3, [r9], #4
 8005dca:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005dce:	d8e5      	bhi.n	8005d9c <__mdiff+0x88>
 8005dd0:	1b33      	subs	r3, r6, r4
 8005dd2:	3b15      	subs	r3, #21
 8005dd4:	f023 0303 	bic.w	r3, r3, #3
 8005dd8:	3415      	adds	r4, #21
 8005dda:	3304      	adds	r3, #4
 8005ddc:	42a6      	cmp	r6, r4
 8005dde:	bf38      	it	cc
 8005de0:	2304      	movcc	r3, #4
 8005de2:	441d      	add	r5, r3
 8005de4:	445b      	add	r3, fp
 8005de6:	461e      	mov	r6, r3
 8005de8:	462c      	mov	r4, r5
 8005dea:	4544      	cmp	r4, r8
 8005dec:	d30e      	bcc.n	8005e0c <__mdiff+0xf8>
 8005dee:	f108 0103 	add.w	r1, r8, #3
 8005df2:	1b49      	subs	r1, r1, r5
 8005df4:	f021 0103 	bic.w	r1, r1, #3
 8005df8:	3d03      	subs	r5, #3
 8005dfa:	45a8      	cmp	r8, r5
 8005dfc:	bf38      	it	cc
 8005dfe:	2100      	movcc	r1, #0
 8005e00:	440b      	add	r3, r1
 8005e02:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005e06:	b191      	cbz	r1, 8005e2e <__mdiff+0x11a>
 8005e08:	6117      	str	r7, [r2, #16]
 8005e0a:	e79d      	b.n	8005d48 <__mdiff+0x34>
 8005e0c:	f854 1b04 	ldr.w	r1, [r4], #4
 8005e10:	46e6      	mov	lr, ip
 8005e12:	0c08      	lsrs	r0, r1, #16
 8005e14:	fa1c fc81 	uxtah	ip, ip, r1
 8005e18:	4471      	add	r1, lr
 8005e1a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005e1e:	b289      	uxth	r1, r1
 8005e20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005e24:	f846 1b04 	str.w	r1, [r6], #4
 8005e28:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005e2c:	e7dd      	b.n	8005dea <__mdiff+0xd6>
 8005e2e:	3f01      	subs	r7, #1
 8005e30:	e7e7      	b.n	8005e02 <__mdiff+0xee>
 8005e32:	bf00      	nop
 8005e34:	08006644 	.word	0x08006644
 8005e38:	08006655 	.word	0x08006655

08005e3c <__d2b>:
 8005e3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005e40:	460f      	mov	r7, r1
 8005e42:	2101      	movs	r1, #1
 8005e44:	ec59 8b10 	vmov	r8, r9, d0
 8005e48:	4616      	mov	r6, r2
 8005e4a:	f7ff fcd5 	bl	80057f8 <_Balloc>
 8005e4e:	4604      	mov	r4, r0
 8005e50:	b930      	cbnz	r0, 8005e60 <__d2b+0x24>
 8005e52:	4602      	mov	r2, r0
 8005e54:	4b23      	ldr	r3, [pc, #140]	@ (8005ee4 <__d2b+0xa8>)
 8005e56:	4824      	ldr	r0, [pc, #144]	@ (8005ee8 <__d2b+0xac>)
 8005e58:	f240 310f 	movw	r1, #783	@ 0x30f
 8005e5c:	f000 fa3a 	bl	80062d4 <__assert_func>
 8005e60:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005e64:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005e68:	b10d      	cbz	r5, 8005e6e <__d2b+0x32>
 8005e6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e6e:	9301      	str	r3, [sp, #4]
 8005e70:	f1b8 0300 	subs.w	r3, r8, #0
 8005e74:	d023      	beq.n	8005ebe <__d2b+0x82>
 8005e76:	4668      	mov	r0, sp
 8005e78:	9300      	str	r3, [sp, #0]
 8005e7a:	f7ff fd84 	bl	8005986 <__lo0bits>
 8005e7e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005e82:	b1d0      	cbz	r0, 8005eba <__d2b+0x7e>
 8005e84:	f1c0 0320 	rsb	r3, r0, #32
 8005e88:	fa02 f303 	lsl.w	r3, r2, r3
 8005e8c:	430b      	orrs	r3, r1
 8005e8e:	40c2      	lsrs	r2, r0
 8005e90:	6163      	str	r3, [r4, #20]
 8005e92:	9201      	str	r2, [sp, #4]
 8005e94:	9b01      	ldr	r3, [sp, #4]
 8005e96:	61a3      	str	r3, [r4, #24]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	bf0c      	ite	eq
 8005e9c:	2201      	moveq	r2, #1
 8005e9e:	2202      	movne	r2, #2
 8005ea0:	6122      	str	r2, [r4, #16]
 8005ea2:	b1a5      	cbz	r5, 8005ece <__d2b+0x92>
 8005ea4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005ea8:	4405      	add	r5, r0
 8005eaa:	603d      	str	r5, [r7, #0]
 8005eac:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005eb0:	6030      	str	r0, [r6, #0]
 8005eb2:	4620      	mov	r0, r4
 8005eb4:	b003      	add	sp, #12
 8005eb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005eba:	6161      	str	r1, [r4, #20]
 8005ebc:	e7ea      	b.n	8005e94 <__d2b+0x58>
 8005ebe:	a801      	add	r0, sp, #4
 8005ec0:	f7ff fd61 	bl	8005986 <__lo0bits>
 8005ec4:	9b01      	ldr	r3, [sp, #4]
 8005ec6:	6163      	str	r3, [r4, #20]
 8005ec8:	3020      	adds	r0, #32
 8005eca:	2201      	movs	r2, #1
 8005ecc:	e7e8      	b.n	8005ea0 <__d2b+0x64>
 8005ece:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005ed2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005ed6:	6038      	str	r0, [r7, #0]
 8005ed8:	6918      	ldr	r0, [r3, #16]
 8005eda:	f7ff fd35 	bl	8005948 <__hi0bits>
 8005ede:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005ee2:	e7e5      	b.n	8005eb0 <__d2b+0x74>
 8005ee4:	08006644 	.word	0x08006644
 8005ee8:	08006655 	.word	0x08006655

08005eec <__sfputc_r>:
 8005eec:	6893      	ldr	r3, [r2, #8]
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	b410      	push	{r4}
 8005ef4:	6093      	str	r3, [r2, #8]
 8005ef6:	da08      	bge.n	8005f0a <__sfputc_r+0x1e>
 8005ef8:	6994      	ldr	r4, [r2, #24]
 8005efa:	42a3      	cmp	r3, r4
 8005efc:	db01      	blt.n	8005f02 <__sfputc_r+0x16>
 8005efe:	290a      	cmp	r1, #10
 8005f00:	d103      	bne.n	8005f0a <__sfputc_r+0x1e>
 8005f02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f06:	f000 b933 	b.w	8006170 <__swbuf_r>
 8005f0a:	6813      	ldr	r3, [r2, #0]
 8005f0c:	1c58      	adds	r0, r3, #1
 8005f0e:	6010      	str	r0, [r2, #0]
 8005f10:	7019      	strb	r1, [r3, #0]
 8005f12:	4608      	mov	r0, r1
 8005f14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f18:	4770      	bx	lr

08005f1a <__sfputs_r>:
 8005f1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f1c:	4606      	mov	r6, r0
 8005f1e:	460f      	mov	r7, r1
 8005f20:	4614      	mov	r4, r2
 8005f22:	18d5      	adds	r5, r2, r3
 8005f24:	42ac      	cmp	r4, r5
 8005f26:	d101      	bne.n	8005f2c <__sfputs_r+0x12>
 8005f28:	2000      	movs	r0, #0
 8005f2a:	e007      	b.n	8005f3c <__sfputs_r+0x22>
 8005f2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f30:	463a      	mov	r2, r7
 8005f32:	4630      	mov	r0, r6
 8005f34:	f7ff ffda 	bl	8005eec <__sfputc_r>
 8005f38:	1c43      	adds	r3, r0, #1
 8005f3a:	d1f3      	bne.n	8005f24 <__sfputs_r+0xa>
 8005f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005f40 <_vfiprintf_r>:
 8005f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f44:	460d      	mov	r5, r1
 8005f46:	b09d      	sub	sp, #116	@ 0x74
 8005f48:	4614      	mov	r4, r2
 8005f4a:	4698      	mov	r8, r3
 8005f4c:	4606      	mov	r6, r0
 8005f4e:	b118      	cbz	r0, 8005f58 <_vfiprintf_r+0x18>
 8005f50:	6a03      	ldr	r3, [r0, #32]
 8005f52:	b90b      	cbnz	r3, 8005f58 <_vfiprintf_r+0x18>
 8005f54:	f7fe fbec 	bl	8004730 <__sinit>
 8005f58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f5a:	07d9      	lsls	r1, r3, #31
 8005f5c:	d405      	bmi.n	8005f6a <_vfiprintf_r+0x2a>
 8005f5e:	89ab      	ldrh	r3, [r5, #12]
 8005f60:	059a      	lsls	r2, r3, #22
 8005f62:	d402      	bmi.n	8005f6a <_vfiprintf_r+0x2a>
 8005f64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f66:	f7fe fcec 	bl	8004942 <__retarget_lock_acquire_recursive>
 8005f6a:	89ab      	ldrh	r3, [r5, #12]
 8005f6c:	071b      	lsls	r3, r3, #28
 8005f6e:	d501      	bpl.n	8005f74 <_vfiprintf_r+0x34>
 8005f70:	692b      	ldr	r3, [r5, #16]
 8005f72:	b99b      	cbnz	r3, 8005f9c <_vfiprintf_r+0x5c>
 8005f74:	4629      	mov	r1, r5
 8005f76:	4630      	mov	r0, r6
 8005f78:	f000 f938 	bl	80061ec <__swsetup_r>
 8005f7c:	b170      	cbz	r0, 8005f9c <_vfiprintf_r+0x5c>
 8005f7e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f80:	07dc      	lsls	r4, r3, #31
 8005f82:	d504      	bpl.n	8005f8e <_vfiprintf_r+0x4e>
 8005f84:	f04f 30ff 	mov.w	r0, #4294967295
 8005f88:	b01d      	add	sp, #116	@ 0x74
 8005f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f8e:	89ab      	ldrh	r3, [r5, #12]
 8005f90:	0598      	lsls	r0, r3, #22
 8005f92:	d4f7      	bmi.n	8005f84 <_vfiprintf_r+0x44>
 8005f94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f96:	f7fe fcd5 	bl	8004944 <__retarget_lock_release_recursive>
 8005f9a:	e7f3      	b.n	8005f84 <_vfiprintf_r+0x44>
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fa0:	2320      	movs	r3, #32
 8005fa2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005fa6:	f8cd 800c 	str.w	r8, [sp, #12]
 8005faa:	2330      	movs	r3, #48	@ 0x30
 8005fac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800615c <_vfiprintf_r+0x21c>
 8005fb0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005fb4:	f04f 0901 	mov.w	r9, #1
 8005fb8:	4623      	mov	r3, r4
 8005fba:	469a      	mov	sl, r3
 8005fbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005fc0:	b10a      	cbz	r2, 8005fc6 <_vfiprintf_r+0x86>
 8005fc2:	2a25      	cmp	r2, #37	@ 0x25
 8005fc4:	d1f9      	bne.n	8005fba <_vfiprintf_r+0x7a>
 8005fc6:	ebba 0b04 	subs.w	fp, sl, r4
 8005fca:	d00b      	beq.n	8005fe4 <_vfiprintf_r+0xa4>
 8005fcc:	465b      	mov	r3, fp
 8005fce:	4622      	mov	r2, r4
 8005fd0:	4629      	mov	r1, r5
 8005fd2:	4630      	mov	r0, r6
 8005fd4:	f7ff ffa1 	bl	8005f1a <__sfputs_r>
 8005fd8:	3001      	adds	r0, #1
 8005fda:	f000 80a7 	beq.w	800612c <_vfiprintf_r+0x1ec>
 8005fde:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005fe0:	445a      	add	r2, fp
 8005fe2:	9209      	str	r2, [sp, #36]	@ 0x24
 8005fe4:	f89a 3000 	ldrb.w	r3, [sl]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	f000 809f 	beq.w	800612c <_vfiprintf_r+0x1ec>
 8005fee:	2300      	movs	r3, #0
 8005ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ff4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ff8:	f10a 0a01 	add.w	sl, sl, #1
 8005ffc:	9304      	str	r3, [sp, #16]
 8005ffe:	9307      	str	r3, [sp, #28]
 8006000:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006004:	931a      	str	r3, [sp, #104]	@ 0x68
 8006006:	4654      	mov	r4, sl
 8006008:	2205      	movs	r2, #5
 800600a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800600e:	4853      	ldr	r0, [pc, #332]	@ (800615c <_vfiprintf_r+0x21c>)
 8006010:	f7fa f8de 	bl	80001d0 <memchr>
 8006014:	9a04      	ldr	r2, [sp, #16]
 8006016:	b9d8      	cbnz	r0, 8006050 <_vfiprintf_r+0x110>
 8006018:	06d1      	lsls	r1, r2, #27
 800601a:	bf44      	itt	mi
 800601c:	2320      	movmi	r3, #32
 800601e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006022:	0713      	lsls	r3, r2, #28
 8006024:	bf44      	itt	mi
 8006026:	232b      	movmi	r3, #43	@ 0x2b
 8006028:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800602c:	f89a 3000 	ldrb.w	r3, [sl]
 8006030:	2b2a      	cmp	r3, #42	@ 0x2a
 8006032:	d015      	beq.n	8006060 <_vfiprintf_r+0x120>
 8006034:	9a07      	ldr	r2, [sp, #28]
 8006036:	4654      	mov	r4, sl
 8006038:	2000      	movs	r0, #0
 800603a:	f04f 0c0a 	mov.w	ip, #10
 800603e:	4621      	mov	r1, r4
 8006040:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006044:	3b30      	subs	r3, #48	@ 0x30
 8006046:	2b09      	cmp	r3, #9
 8006048:	d94b      	bls.n	80060e2 <_vfiprintf_r+0x1a2>
 800604a:	b1b0      	cbz	r0, 800607a <_vfiprintf_r+0x13a>
 800604c:	9207      	str	r2, [sp, #28]
 800604e:	e014      	b.n	800607a <_vfiprintf_r+0x13a>
 8006050:	eba0 0308 	sub.w	r3, r0, r8
 8006054:	fa09 f303 	lsl.w	r3, r9, r3
 8006058:	4313      	orrs	r3, r2
 800605a:	9304      	str	r3, [sp, #16]
 800605c:	46a2      	mov	sl, r4
 800605e:	e7d2      	b.n	8006006 <_vfiprintf_r+0xc6>
 8006060:	9b03      	ldr	r3, [sp, #12]
 8006062:	1d19      	adds	r1, r3, #4
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	9103      	str	r1, [sp, #12]
 8006068:	2b00      	cmp	r3, #0
 800606a:	bfbb      	ittet	lt
 800606c:	425b      	neglt	r3, r3
 800606e:	f042 0202 	orrlt.w	r2, r2, #2
 8006072:	9307      	strge	r3, [sp, #28]
 8006074:	9307      	strlt	r3, [sp, #28]
 8006076:	bfb8      	it	lt
 8006078:	9204      	strlt	r2, [sp, #16]
 800607a:	7823      	ldrb	r3, [r4, #0]
 800607c:	2b2e      	cmp	r3, #46	@ 0x2e
 800607e:	d10a      	bne.n	8006096 <_vfiprintf_r+0x156>
 8006080:	7863      	ldrb	r3, [r4, #1]
 8006082:	2b2a      	cmp	r3, #42	@ 0x2a
 8006084:	d132      	bne.n	80060ec <_vfiprintf_r+0x1ac>
 8006086:	9b03      	ldr	r3, [sp, #12]
 8006088:	1d1a      	adds	r2, r3, #4
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	9203      	str	r2, [sp, #12]
 800608e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006092:	3402      	adds	r4, #2
 8006094:	9305      	str	r3, [sp, #20]
 8006096:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800616c <_vfiprintf_r+0x22c>
 800609a:	7821      	ldrb	r1, [r4, #0]
 800609c:	2203      	movs	r2, #3
 800609e:	4650      	mov	r0, sl
 80060a0:	f7fa f896 	bl	80001d0 <memchr>
 80060a4:	b138      	cbz	r0, 80060b6 <_vfiprintf_r+0x176>
 80060a6:	9b04      	ldr	r3, [sp, #16]
 80060a8:	eba0 000a 	sub.w	r0, r0, sl
 80060ac:	2240      	movs	r2, #64	@ 0x40
 80060ae:	4082      	lsls	r2, r0
 80060b0:	4313      	orrs	r3, r2
 80060b2:	3401      	adds	r4, #1
 80060b4:	9304      	str	r3, [sp, #16]
 80060b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060ba:	4829      	ldr	r0, [pc, #164]	@ (8006160 <_vfiprintf_r+0x220>)
 80060bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80060c0:	2206      	movs	r2, #6
 80060c2:	f7fa f885 	bl	80001d0 <memchr>
 80060c6:	2800      	cmp	r0, #0
 80060c8:	d03f      	beq.n	800614a <_vfiprintf_r+0x20a>
 80060ca:	4b26      	ldr	r3, [pc, #152]	@ (8006164 <_vfiprintf_r+0x224>)
 80060cc:	bb1b      	cbnz	r3, 8006116 <_vfiprintf_r+0x1d6>
 80060ce:	9b03      	ldr	r3, [sp, #12]
 80060d0:	3307      	adds	r3, #7
 80060d2:	f023 0307 	bic.w	r3, r3, #7
 80060d6:	3308      	adds	r3, #8
 80060d8:	9303      	str	r3, [sp, #12]
 80060da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060dc:	443b      	add	r3, r7
 80060de:	9309      	str	r3, [sp, #36]	@ 0x24
 80060e0:	e76a      	b.n	8005fb8 <_vfiprintf_r+0x78>
 80060e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80060e6:	460c      	mov	r4, r1
 80060e8:	2001      	movs	r0, #1
 80060ea:	e7a8      	b.n	800603e <_vfiprintf_r+0xfe>
 80060ec:	2300      	movs	r3, #0
 80060ee:	3401      	adds	r4, #1
 80060f0:	9305      	str	r3, [sp, #20]
 80060f2:	4619      	mov	r1, r3
 80060f4:	f04f 0c0a 	mov.w	ip, #10
 80060f8:	4620      	mov	r0, r4
 80060fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060fe:	3a30      	subs	r2, #48	@ 0x30
 8006100:	2a09      	cmp	r2, #9
 8006102:	d903      	bls.n	800610c <_vfiprintf_r+0x1cc>
 8006104:	2b00      	cmp	r3, #0
 8006106:	d0c6      	beq.n	8006096 <_vfiprintf_r+0x156>
 8006108:	9105      	str	r1, [sp, #20]
 800610a:	e7c4      	b.n	8006096 <_vfiprintf_r+0x156>
 800610c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006110:	4604      	mov	r4, r0
 8006112:	2301      	movs	r3, #1
 8006114:	e7f0      	b.n	80060f8 <_vfiprintf_r+0x1b8>
 8006116:	ab03      	add	r3, sp, #12
 8006118:	9300      	str	r3, [sp, #0]
 800611a:	462a      	mov	r2, r5
 800611c:	4b12      	ldr	r3, [pc, #72]	@ (8006168 <_vfiprintf_r+0x228>)
 800611e:	a904      	add	r1, sp, #16
 8006120:	4630      	mov	r0, r6
 8006122:	f7fd fe03 	bl	8003d2c <_printf_float>
 8006126:	4607      	mov	r7, r0
 8006128:	1c78      	adds	r0, r7, #1
 800612a:	d1d6      	bne.n	80060da <_vfiprintf_r+0x19a>
 800612c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800612e:	07d9      	lsls	r1, r3, #31
 8006130:	d405      	bmi.n	800613e <_vfiprintf_r+0x1fe>
 8006132:	89ab      	ldrh	r3, [r5, #12]
 8006134:	059a      	lsls	r2, r3, #22
 8006136:	d402      	bmi.n	800613e <_vfiprintf_r+0x1fe>
 8006138:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800613a:	f7fe fc03 	bl	8004944 <__retarget_lock_release_recursive>
 800613e:	89ab      	ldrh	r3, [r5, #12]
 8006140:	065b      	lsls	r3, r3, #25
 8006142:	f53f af1f 	bmi.w	8005f84 <_vfiprintf_r+0x44>
 8006146:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006148:	e71e      	b.n	8005f88 <_vfiprintf_r+0x48>
 800614a:	ab03      	add	r3, sp, #12
 800614c:	9300      	str	r3, [sp, #0]
 800614e:	462a      	mov	r2, r5
 8006150:	4b05      	ldr	r3, [pc, #20]	@ (8006168 <_vfiprintf_r+0x228>)
 8006152:	a904      	add	r1, sp, #16
 8006154:	4630      	mov	r0, r6
 8006156:	f7fe f881 	bl	800425c <_printf_i>
 800615a:	e7e4      	b.n	8006126 <_vfiprintf_r+0x1e6>
 800615c:	080066ae 	.word	0x080066ae
 8006160:	080066b8 	.word	0x080066b8
 8006164:	08003d2d 	.word	0x08003d2d
 8006168:	08005f1b 	.word	0x08005f1b
 800616c:	080066b4 	.word	0x080066b4

08006170 <__swbuf_r>:
 8006170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006172:	460e      	mov	r6, r1
 8006174:	4614      	mov	r4, r2
 8006176:	4605      	mov	r5, r0
 8006178:	b118      	cbz	r0, 8006182 <__swbuf_r+0x12>
 800617a:	6a03      	ldr	r3, [r0, #32]
 800617c:	b90b      	cbnz	r3, 8006182 <__swbuf_r+0x12>
 800617e:	f7fe fad7 	bl	8004730 <__sinit>
 8006182:	69a3      	ldr	r3, [r4, #24]
 8006184:	60a3      	str	r3, [r4, #8]
 8006186:	89a3      	ldrh	r3, [r4, #12]
 8006188:	071a      	lsls	r2, r3, #28
 800618a:	d501      	bpl.n	8006190 <__swbuf_r+0x20>
 800618c:	6923      	ldr	r3, [r4, #16]
 800618e:	b943      	cbnz	r3, 80061a2 <__swbuf_r+0x32>
 8006190:	4621      	mov	r1, r4
 8006192:	4628      	mov	r0, r5
 8006194:	f000 f82a 	bl	80061ec <__swsetup_r>
 8006198:	b118      	cbz	r0, 80061a2 <__swbuf_r+0x32>
 800619a:	f04f 37ff 	mov.w	r7, #4294967295
 800619e:	4638      	mov	r0, r7
 80061a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061a2:	6823      	ldr	r3, [r4, #0]
 80061a4:	6922      	ldr	r2, [r4, #16]
 80061a6:	1a98      	subs	r0, r3, r2
 80061a8:	6963      	ldr	r3, [r4, #20]
 80061aa:	b2f6      	uxtb	r6, r6
 80061ac:	4283      	cmp	r3, r0
 80061ae:	4637      	mov	r7, r6
 80061b0:	dc05      	bgt.n	80061be <__swbuf_r+0x4e>
 80061b2:	4621      	mov	r1, r4
 80061b4:	4628      	mov	r0, r5
 80061b6:	f7fe f9f3 	bl	80045a0 <_fflush_r>
 80061ba:	2800      	cmp	r0, #0
 80061bc:	d1ed      	bne.n	800619a <__swbuf_r+0x2a>
 80061be:	68a3      	ldr	r3, [r4, #8]
 80061c0:	3b01      	subs	r3, #1
 80061c2:	60a3      	str	r3, [r4, #8]
 80061c4:	6823      	ldr	r3, [r4, #0]
 80061c6:	1c5a      	adds	r2, r3, #1
 80061c8:	6022      	str	r2, [r4, #0]
 80061ca:	701e      	strb	r6, [r3, #0]
 80061cc:	6962      	ldr	r2, [r4, #20]
 80061ce:	1c43      	adds	r3, r0, #1
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d004      	beq.n	80061de <__swbuf_r+0x6e>
 80061d4:	89a3      	ldrh	r3, [r4, #12]
 80061d6:	07db      	lsls	r3, r3, #31
 80061d8:	d5e1      	bpl.n	800619e <__swbuf_r+0x2e>
 80061da:	2e0a      	cmp	r6, #10
 80061dc:	d1df      	bne.n	800619e <__swbuf_r+0x2e>
 80061de:	4621      	mov	r1, r4
 80061e0:	4628      	mov	r0, r5
 80061e2:	f7fe f9dd 	bl	80045a0 <_fflush_r>
 80061e6:	2800      	cmp	r0, #0
 80061e8:	d0d9      	beq.n	800619e <__swbuf_r+0x2e>
 80061ea:	e7d6      	b.n	800619a <__swbuf_r+0x2a>

080061ec <__swsetup_r>:
 80061ec:	b538      	push	{r3, r4, r5, lr}
 80061ee:	4b29      	ldr	r3, [pc, #164]	@ (8006294 <__swsetup_r+0xa8>)
 80061f0:	4605      	mov	r5, r0
 80061f2:	6818      	ldr	r0, [r3, #0]
 80061f4:	460c      	mov	r4, r1
 80061f6:	b118      	cbz	r0, 8006200 <__swsetup_r+0x14>
 80061f8:	6a03      	ldr	r3, [r0, #32]
 80061fa:	b90b      	cbnz	r3, 8006200 <__swsetup_r+0x14>
 80061fc:	f7fe fa98 	bl	8004730 <__sinit>
 8006200:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006204:	0719      	lsls	r1, r3, #28
 8006206:	d422      	bmi.n	800624e <__swsetup_r+0x62>
 8006208:	06da      	lsls	r2, r3, #27
 800620a:	d407      	bmi.n	800621c <__swsetup_r+0x30>
 800620c:	2209      	movs	r2, #9
 800620e:	602a      	str	r2, [r5, #0]
 8006210:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006214:	81a3      	strh	r3, [r4, #12]
 8006216:	f04f 30ff 	mov.w	r0, #4294967295
 800621a:	e033      	b.n	8006284 <__swsetup_r+0x98>
 800621c:	0758      	lsls	r0, r3, #29
 800621e:	d512      	bpl.n	8006246 <__swsetup_r+0x5a>
 8006220:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006222:	b141      	cbz	r1, 8006236 <__swsetup_r+0x4a>
 8006224:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006228:	4299      	cmp	r1, r3
 800622a:	d002      	beq.n	8006232 <__swsetup_r+0x46>
 800622c:	4628      	mov	r0, r5
 800622e:	f7ff f9e3 	bl	80055f8 <_free_r>
 8006232:	2300      	movs	r3, #0
 8006234:	6363      	str	r3, [r4, #52]	@ 0x34
 8006236:	89a3      	ldrh	r3, [r4, #12]
 8006238:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800623c:	81a3      	strh	r3, [r4, #12]
 800623e:	2300      	movs	r3, #0
 8006240:	6063      	str	r3, [r4, #4]
 8006242:	6923      	ldr	r3, [r4, #16]
 8006244:	6023      	str	r3, [r4, #0]
 8006246:	89a3      	ldrh	r3, [r4, #12]
 8006248:	f043 0308 	orr.w	r3, r3, #8
 800624c:	81a3      	strh	r3, [r4, #12]
 800624e:	6923      	ldr	r3, [r4, #16]
 8006250:	b94b      	cbnz	r3, 8006266 <__swsetup_r+0x7a>
 8006252:	89a3      	ldrh	r3, [r4, #12]
 8006254:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006258:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800625c:	d003      	beq.n	8006266 <__swsetup_r+0x7a>
 800625e:	4621      	mov	r1, r4
 8006260:	4628      	mov	r0, r5
 8006262:	f000 f8c1 	bl	80063e8 <__smakebuf_r>
 8006266:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800626a:	f013 0201 	ands.w	r2, r3, #1
 800626e:	d00a      	beq.n	8006286 <__swsetup_r+0x9a>
 8006270:	2200      	movs	r2, #0
 8006272:	60a2      	str	r2, [r4, #8]
 8006274:	6962      	ldr	r2, [r4, #20]
 8006276:	4252      	negs	r2, r2
 8006278:	61a2      	str	r2, [r4, #24]
 800627a:	6922      	ldr	r2, [r4, #16]
 800627c:	b942      	cbnz	r2, 8006290 <__swsetup_r+0xa4>
 800627e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006282:	d1c5      	bne.n	8006210 <__swsetup_r+0x24>
 8006284:	bd38      	pop	{r3, r4, r5, pc}
 8006286:	0799      	lsls	r1, r3, #30
 8006288:	bf58      	it	pl
 800628a:	6962      	ldrpl	r2, [r4, #20]
 800628c:	60a2      	str	r2, [r4, #8]
 800628e:	e7f4      	b.n	800627a <__swsetup_r+0x8e>
 8006290:	2000      	movs	r0, #0
 8006292:	e7f7      	b.n	8006284 <__swsetup_r+0x98>
 8006294:	20000048 	.word	0x20000048

08006298 <_sbrk_r>:
 8006298:	b538      	push	{r3, r4, r5, lr}
 800629a:	4d06      	ldr	r5, [pc, #24]	@ (80062b4 <_sbrk_r+0x1c>)
 800629c:	2300      	movs	r3, #0
 800629e:	4604      	mov	r4, r0
 80062a0:	4608      	mov	r0, r1
 80062a2:	602b      	str	r3, [r5, #0]
 80062a4:	f7fb fcda 	bl	8001c5c <_sbrk>
 80062a8:	1c43      	adds	r3, r0, #1
 80062aa:	d102      	bne.n	80062b2 <_sbrk_r+0x1a>
 80062ac:	682b      	ldr	r3, [r5, #0]
 80062ae:	b103      	cbz	r3, 80062b2 <_sbrk_r+0x1a>
 80062b0:	6023      	str	r3, [r4, #0]
 80062b2:	bd38      	pop	{r3, r4, r5, pc}
 80062b4:	200003b8 	.word	0x200003b8

080062b8 <memcpy>:
 80062b8:	440a      	add	r2, r1
 80062ba:	4291      	cmp	r1, r2
 80062bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80062c0:	d100      	bne.n	80062c4 <memcpy+0xc>
 80062c2:	4770      	bx	lr
 80062c4:	b510      	push	{r4, lr}
 80062c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80062ce:	4291      	cmp	r1, r2
 80062d0:	d1f9      	bne.n	80062c6 <memcpy+0xe>
 80062d2:	bd10      	pop	{r4, pc}

080062d4 <__assert_func>:
 80062d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80062d6:	4614      	mov	r4, r2
 80062d8:	461a      	mov	r2, r3
 80062da:	4b09      	ldr	r3, [pc, #36]	@ (8006300 <__assert_func+0x2c>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4605      	mov	r5, r0
 80062e0:	68d8      	ldr	r0, [r3, #12]
 80062e2:	b14c      	cbz	r4, 80062f8 <__assert_func+0x24>
 80062e4:	4b07      	ldr	r3, [pc, #28]	@ (8006304 <__assert_func+0x30>)
 80062e6:	9100      	str	r1, [sp, #0]
 80062e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80062ec:	4906      	ldr	r1, [pc, #24]	@ (8006308 <__assert_func+0x34>)
 80062ee:	462b      	mov	r3, r5
 80062f0:	f000 f842 	bl	8006378 <fiprintf>
 80062f4:	f000 f8d6 	bl	80064a4 <abort>
 80062f8:	4b04      	ldr	r3, [pc, #16]	@ (800630c <__assert_func+0x38>)
 80062fa:	461c      	mov	r4, r3
 80062fc:	e7f3      	b.n	80062e6 <__assert_func+0x12>
 80062fe:	bf00      	nop
 8006300:	20000048 	.word	0x20000048
 8006304:	080066c9 	.word	0x080066c9
 8006308:	080066d6 	.word	0x080066d6
 800630c:	08006704 	.word	0x08006704

08006310 <_calloc_r>:
 8006310:	b570      	push	{r4, r5, r6, lr}
 8006312:	fba1 5402 	umull	r5, r4, r1, r2
 8006316:	b934      	cbnz	r4, 8006326 <_calloc_r+0x16>
 8006318:	4629      	mov	r1, r5
 800631a:	f7ff f9e1 	bl	80056e0 <_malloc_r>
 800631e:	4606      	mov	r6, r0
 8006320:	b928      	cbnz	r0, 800632e <_calloc_r+0x1e>
 8006322:	4630      	mov	r0, r6
 8006324:	bd70      	pop	{r4, r5, r6, pc}
 8006326:	220c      	movs	r2, #12
 8006328:	6002      	str	r2, [r0, #0]
 800632a:	2600      	movs	r6, #0
 800632c:	e7f9      	b.n	8006322 <_calloc_r+0x12>
 800632e:	462a      	mov	r2, r5
 8006330:	4621      	mov	r1, r4
 8006332:	f7fe fa88 	bl	8004846 <memset>
 8006336:	e7f4      	b.n	8006322 <_calloc_r+0x12>

08006338 <__ascii_mbtowc>:
 8006338:	b082      	sub	sp, #8
 800633a:	b901      	cbnz	r1, 800633e <__ascii_mbtowc+0x6>
 800633c:	a901      	add	r1, sp, #4
 800633e:	b142      	cbz	r2, 8006352 <__ascii_mbtowc+0x1a>
 8006340:	b14b      	cbz	r3, 8006356 <__ascii_mbtowc+0x1e>
 8006342:	7813      	ldrb	r3, [r2, #0]
 8006344:	600b      	str	r3, [r1, #0]
 8006346:	7812      	ldrb	r2, [r2, #0]
 8006348:	1e10      	subs	r0, r2, #0
 800634a:	bf18      	it	ne
 800634c:	2001      	movne	r0, #1
 800634e:	b002      	add	sp, #8
 8006350:	4770      	bx	lr
 8006352:	4610      	mov	r0, r2
 8006354:	e7fb      	b.n	800634e <__ascii_mbtowc+0x16>
 8006356:	f06f 0001 	mvn.w	r0, #1
 800635a:	e7f8      	b.n	800634e <__ascii_mbtowc+0x16>

0800635c <__ascii_wctomb>:
 800635c:	4603      	mov	r3, r0
 800635e:	4608      	mov	r0, r1
 8006360:	b141      	cbz	r1, 8006374 <__ascii_wctomb+0x18>
 8006362:	2aff      	cmp	r2, #255	@ 0xff
 8006364:	d904      	bls.n	8006370 <__ascii_wctomb+0x14>
 8006366:	228a      	movs	r2, #138	@ 0x8a
 8006368:	601a      	str	r2, [r3, #0]
 800636a:	f04f 30ff 	mov.w	r0, #4294967295
 800636e:	4770      	bx	lr
 8006370:	700a      	strb	r2, [r1, #0]
 8006372:	2001      	movs	r0, #1
 8006374:	4770      	bx	lr
	...

08006378 <fiprintf>:
 8006378:	b40e      	push	{r1, r2, r3}
 800637a:	b503      	push	{r0, r1, lr}
 800637c:	4601      	mov	r1, r0
 800637e:	ab03      	add	r3, sp, #12
 8006380:	4805      	ldr	r0, [pc, #20]	@ (8006398 <fiprintf+0x20>)
 8006382:	f853 2b04 	ldr.w	r2, [r3], #4
 8006386:	6800      	ldr	r0, [r0, #0]
 8006388:	9301      	str	r3, [sp, #4]
 800638a:	f7ff fdd9 	bl	8005f40 <_vfiprintf_r>
 800638e:	b002      	add	sp, #8
 8006390:	f85d eb04 	ldr.w	lr, [sp], #4
 8006394:	b003      	add	sp, #12
 8006396:	4770      	bx	lr
 8006398:	20000048 	.word	0x20000048

0800639c <__swhatbuf_r>:
 800639c:	b570      	push	{r4, r5, r6, lr}
 800639e:	460c      	mov	r4, r1
 80063a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063a4:	2900      	cmp	r1, #0
 80063a6:	b096      	sub	sp, #88	@ 0x58
 80063a8:	4615      	mov	r5, r2
 80063aa:	461e      	mov	r6, r3
 80063ac:	da0d      	bge.n	80063ca <__swhatbuf_r+0x2e>
 80063ae:	89a3      	ldrh	r3, [r4, #12]
 80063b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80063b4:	f04f 0100 	mov.w	r1, #0
 80063b8:	bf14      	ite	ne
 80063ba:	2340      	movne	r3, #64	@ 0x40
 80063bc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80063c0:	2000      	movs	r0, #0
 80063c2:	6031      	str	r1, [r6, #0]
 80063c4:	602b      	str	r3, [r5, #0]
 80063c6:	b016      	add	sp, #88	@ 0x58
 80063c8:	bd70      	pop	{r4, r5, r6, pc}
 80063ca:	466a      	mov	r2, sp
 80063cc:	f000 f848 	bl	8006460 <_fstat_r>
 80063d0:	2800      	cmp	r0, #0
 80063d2:	dbec      	blt.n	80063ae <__swhatbuf_r+0x12>
 80063d4:	9901      	ldr	r1, [sp, #4]
 80063d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80063da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80063de:	4259      	negs	r1, r3
 80063e0:	4159      	adcs	r1, r3
 80063e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80063e6:	e7eb      	b.n	80063c0 <__swhatbuf_r+0x24>

080063e8 <__smakebuf_r>:
 80063e8:	898b      	ldrh	r3, [r1, #12]
 80063ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063ec:	079d      	lsls	r5, r3, #30
 80063ee:	4606      	mov	r6, r0
 80063f0:	460c      	mov	r4, r1
 80063f2:	d507      	bpl.n	8006404 <__smakebuf_r+0x1c>
 80063f4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80063f8:	6023      	str	r3, [r4, #0]
 80063fa:	6123      	str	r3, [r4, #16]
 80063fc:	2301      	movs	r3, #1
 80063fe:	6163      	str	r3, [r4, #20]
 8006400:	b003      	add	sp, #12
 8006402:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006404:	ab01      	add	r3, sp, #4
 8006406:	466a      	mov	r2, sp
 8006408:	f7ff ffc8 	bl	800639c <__swhatbuf_r>
 800640c:	9f00      	ldr	r7, [sp, #0]
 800640e:	4605      	mov	r5, r0
 8006410:	4639      	mov	r1, r7
 8006412:	4630      	mov	r0, r6
 8006414:	f7ff f964 	bl	80056e0 <_malloc_r>
 8006418:	b948      	cbnz	r0, 800642e <__smakebuf_r+0x46>
 800641a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800641e:	059a      	lsls	r2, r3, #22
 8006420:	d4ee      	bmi.n	8006400 <__smakebuf_r+0x18>
 8006422:	f023 0303 	bic.w	r3, r3, #3
 8006426:	f043 0302 	orr.w	r3, r3, #2
 800642a:	81a3      	strh	r3, [r4, #12]
 800642c:	e7e2      	b.n	80063f4 <__smakebuf_r+0xc>
 800642e:	89a3      	ldrh	r3, [r4, #12]
 8006430:	6020      	str	r0, [r4, #0]
 8006432:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006436:	81a3      	strh	r3, [r4, #12]
 8006438:	9b01      	ldr	r3, [sp, #4]
 800643a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800643e:	b15b      	cbz	r3, 8006458 <__smakebuf_r+0x70>
 8006440:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006444:	4630      	mov	r0, r6
 8006446:	f000 f81d 	bl	8006484 <_isatty_r>
 800644a:	b128      	cbz	r0, 8006458 <__smakebuf_r+0x70>
 800644c:	89a3      	ldrh	r3, [r4, #12]
 800644e:	f023 0303 	bic.w	r3, r3, #3
 8006452:	f043 0301 	orr.w	r3, r3, #1
 8006456:	81a3      	strh	r3, [r4, #12]
 8006458:	89a3      	ldrh	r3, [r4, #12]
 800645a:	431d      	orrs	r5, r3
 800645c:	81a5      	strh	r5, [r4, #12]
 800645e:	e7cf      	b.n	8006400 <__smakebuf_r+0x18>

08006460 <_fstat_r>:
 8006460:	b538      	push	{r3, r4, r5, lr}
 8006462:	4d07      	ldr	r5, [pc, #28]	@ (8006480 <_fstat_r+0x20>)
 8006464:	2300      	movs	r3, #0
 8006466:	4604      	mov	r4, r0
 8006468:	4608      	mov	r0, r1
 800646a:	4611      	mov	r1, r2
 800646c:	602b      	str	r3, [r5, #0]
 800646e:	f7fb fbcc 	bl	8001c0a <_fstat>
 8006472:	1c43      	adds	r3, r0, #1
 8006474:	d102      	bne.n	800647c <_fstat_r+0x1c>
 8006476:	682b      	ldr	r3, [r5, #0]
 8006478:	b103      	cbz	r3, 800647c <_fstat_r+0x1c>
 800647a:	6023      	str	r3, [r4, #0]
 800647c:	bd38      	pop	{r3, r4, r5, pc}
 800647e:	bf00      	nop
 8006480:	200003b8 	.word	0x200003b8

08006484 <_isatty_r>:
 8006484:	b538      	push	{r3, r4, r5, lr}
 8006486:	4d06      	ldr	r5, [pc, #24]	@ (80064a0 <_isatty_r+0x1c>)
 8006488:	2300      	movs	r3, #0
 800648a:	4604      	mov	r4, r0
 800648c:	4608      	mov	r0, r1
 800648e:	602b      	str	r3, [r5, #0]
 8006490:	f7fb fbcb 	bl	8001c2a <_isatty>
 8006494:	1c43      	adds	r3, r0, #1
 8006496:	d102      	bne.n	800649e <_isatty_r+0x1a>
 8006498:	682b      	ldr	r3, [r5, #0]
 800649a:	b103      	cbz	r3, 800649e <_isatty_r+0x1a>
 800649c:	6023      	str	r3, [r4, #0]
 800649e:	bd38      	pop	{r3, r4, r5, pc}
 80064a0:	200003b8 	.word	0x200003b8

080064a4 <abort>:
 80064a4:	b508      	push	{r3, lr}
 80064a6:	2006      	movs	r0, #6
 80064a8:	f000 f82c 	bl	8006504 <raise>
 80064ac:	2001      	movs	r0, #1
 80064ae:	f7fb fb78 	bl	8001ba2 <_exit>

080064b2 <_raise_r>:
 80064b2:	291f      	cmp	r1, #31
 80064b4:	b538      	push	{r3, r4, r5, lr}
 80064b6:	4605      	mov	r5, r0
 80064b8:	460c      	mov	r4, r1
 80064ba:	d904      	bls.n	80064c6 <_raise_r+0x14>
 80064bc:	2316      	movs	r3, #22
 80064be:	6003      	str	r3, [r0, #0]
 80064c0:	f04f 30ff 	mov.w	r0, #4294967295
 80064c4:	bd38      	pop	{r3, r4, r5, pc}
 80064c6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80064c8:	b112      	cbz	r2, 80064d0 <_raise_r+0x1e>
 80064ca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80064ce:	b94b      	cbnz	r3, 80064e4 <_raise_r+0x32>
 80064d0:	4628      	mov	r0, r5
 80064d2:	f000 f831 	bl	8006538 <_getpid_r>
 80064d6:	4622      	mov	r2, r4
 80064d8:	4601      	mov	r1, r0
 80064da:	4628      	mov	r0, r5
 80064dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80064e0:	f000 b818 	b.w	8006514 <_kill_r>
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d00a      	beq.n	80064fe <_raise_r+0x4c>
 80064e8:	1c59      	adds	r1, r3, #1
 80064ea:	d103      	bne.n	80064f4 <_raise_r+0x42>
 80064ec:	2316      	movs	r3, #22
 80064ee:	6003      	str	r3, [r0, #0]
 80064f0:	2001      	movs	r0, #1
 80064f2:	e7e7      	b.n	80064c4 <_raise_r+0x12>
 80064f4:	2100      	movs	r1, #0
 80064f6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80064fa:	4620      	mov	r0, r4
 80064fc:	4798      	blx	r3
 80064fe:	2000      	movs	r0, #0
 8006500:	e7e0      	b.n	80064c4 <_raise_r+0x12>
	...

08006504 <raise>:
 8006504:	4b02      	ldr	r3, [pc, #8]	@ (8006510 <raise+0xc>)
 8006506:	4601      	mov	r1, r0
 8006508:	6818      	ldr	r0, [r3, #0]
 800650a:	f7ff bfd2 	b.w	80064b2 <_raise_r>
 800650e:	bf00      	nop
 8006510:	20000048 	.word	0x20000048

08006514 <_kill_r>:
 8006514:	b538      	push	{r3, r4, r5, lr}
 8006516:	4d07      	ldr	r5, [pc, #28]	@ (8006534 <_kill_r+0x20>)
 8006518:	2300      	movs	r3, #0
 800651a:	4604      	mov	r4, r0
 800651c:	4608      	mov	r0, r1
 800651e:	4611      	mov	r1, r2
 8006520:	602b      	str	r3, [r5, #0]
 8006522:	f7fb fb2e 	bl	8001b82 <_kill>
 8006526:	1c43      	adds	r3, r0, #1
 8006528:	d102      	bne.n	8006530 <_kill_r+0x1c>
 800652a:	682b      	ldr	r3, [r5, #0]
 800652c:	b103      	cbz	r3, 8006530 <_kill_r+0x1c>
 800652e:	6023      	str	r3, [r4, #0]
 8006530:	bd38      	pop	{r3, r4, r5, pc}
 8006532:	bf00      	nop
 8006534:	200003b8 	.word	0x200003b8

08006538 <_getpid_r>:
 8006538:	f7fb bb1b 	b.w	8001b72 <_getpid>

0800653c <_init>:
 800653c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800653e:	bf00      	nop
 8006540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006542:	bc08      	pop	{r3}
 8006544:	469e      	mov	lr, r3
 8006546:	4770      	bx	lr

08006548 <_fini>:
 8006548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800654a:	bf00      	nop
 800654c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800654e:	bc08      	pop	{r3}
 8006550:	469e      	mov	lr, r3
 8006552:	4770      	bx	lr
